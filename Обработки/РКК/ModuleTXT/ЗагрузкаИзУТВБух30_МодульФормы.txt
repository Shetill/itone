Процедура ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента)
	
	ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	Если ЗаполнятьБУ = Истина Тогда
		Если ИмяТабЧасти = "Оборудование" Тогда
			СтрокаТЧ.СчетУчета  = СчетаУчета.СчетУчета;
			СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			
		ИначеЕсли ИмяТабЧасти = "ВозвратнаяТара" Тогда
			СтрокаТЧ.СчетУчета  = СчетаУчета.СчетУчета;
			
		ИначеЕсли ИмяТабЧасти = "Услуги" Тогда
			СтрокаТЧ.СчетЗатрат   = СчетаУчета.СчетУчета;
			СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			СтрокаТЧ.Субконто1	 = СчетаУчета.Субконто1;
			СтрокаТЧ.Субконто2   = СчетаУчета.Субконто2;
			СтрокаТЧ.Субконто3   = СчетаУчета.Субконто3;
		Иначе
			СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
				СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли; // Если ЗаполнятьБУ = Истина Тогда
	
КонецПроцедуры // ЗаполнитьСчетаБУ()

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	Объект.Склад = Справочники.Склады.НайтиПоКоду("000000001");
	
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура, Объект.Склад);
	
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
	
	ЗаполнитьСчетаБУ(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

#region COMConnector

&НаСервереБезКонтекста
Функция  ПолучитьПодключениеКФайловойБД()
	
	V83COMConnector  = Новый COMObject("V83.COMConnector");
	Попытка
		Возврат V83COMConnector.Connect(ПолучитьПараметрыПодключенияКФайловойБД());
	Исключение
		Сообщить(ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыПодключенияКФайловойБД()
	
	login 		= "adminn";
	password	= "123";
	путьКБазе	= "D:\RomanPetukhov\Базы1С\РКК\УТ10-3";
	
	Возврат "File="+путьКБазе+";Usr="+login+";Pwd="+password+";"; 
	
КонецФункции

#endregion 

#region search

//функции поиска
////////////////////////////////////////////////////////////////////////////
&НаСервере
Функция НайтиСчет(НомерСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Ссылка,
	|	СчетНаОплатуПокупателю.Номер
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Номер = &НомерСчета
	|	И СчетНаОплатуПокупателю.Дата МЕЖДУ &НачалоГода И &КонецГода";
	
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Период.ДатаОкончания));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если  Выборка.Следующий() тогда
		ТекСчет = Выборка.Ссылка;
	КонецЕсли;	
	
	Возврат ТекСчет;
	
КонецФункции	

&НаСервере
Функция НайтиДокументПрихода(НомерВхПОставщика,Сумма, ДатаДока)
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента,
	|	ПоступлениеТоваровУслуг.СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерДокумента
	|	И ПоступлениеТоваровУслуг.Дата = &ДатаДока";
	
	Запрос.УстановитьПараметр("НомерДокумента", НомерВхПОставщика);	
	Запрос.УстановитьПараметр("СуммаДокумента", Сумма);   
	Запрос.УстановитьПараметр("ДатаДока", ДатаДока);  	
	
	Выборка = Запрос.Выполнить().Выбрать();		
	Если Выборка.Следующий() тогда
		ТекДок = Выборка.Ссылка;
	КонецЕсли;	
	
	Возврат ТекДок;
	
Конецфункции	

&НаСервере
Функция НайтиДокументыПеремещения(НомерДок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.Номер
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Номер = &НомерДок";
	
	Запрос.УстановитьПараметр("НомерДок",НомерДок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		ТекПеремещение = Выборка.Ссылка;
	КонецЕсли;	
	
	возврат ТекПеремещение;
	
КонецФункции	

&НаСервере
Функция НайтиДокументыСписания(НомерДок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СписаниеТоваров.Ссылка,
	|	СписаниеТоваров.Номер
	|ИЗ
	|	Документ.СписаниеТоваров КАК СписаниеТоваров
	|ГДЕ
	|	СписаниеТоваров.Номер = &НомерСписания";
	
	Запрос.УстановитьПараметр("НомерСписания",НомерДок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		ТекСписание = Выборка.Ссылка;
	КонецЕсли;	
	
	возврат ТекСписание;
	
КонецФункции	

&НаСервере
Функция НайтиДокументыКомплектации(НомерДок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КомплектацияНоменклатуры.Ссылка,
	|	КомплектацияНоменклатуры.Номер
	|ИЗ
	|	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
	|ГДЕ
	|	КомплектацияНоменклатуры.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер",НомерДок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		ТекКомплектация = Выборка.Ссылка;
	КонецЕсли;	
	
	возврат ТекКомплектация;
	
КонецФункции

&НаСервере
Функция НайтиДокументыРеализации(НомерДок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Номер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Номер = &НомерДок
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачДата И &КонДата";
	
	
	Запрос.УстановитьПараметр("НачДата",НачалоГода(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонДата",КонецГода(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("НомерДок",НомерДок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() тогда
		ТекРеал = Выборка.Ссылка;
	КонецЕсли;	
	
	возврат ТекРеал;
	
КонецФункции	

&НаСервере
Функция НайтиВозвраты(НомерДок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.Номер
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Номер = &НомерВозврата
	|	И ВозвратТоваровОтПокупателя.Дата МЕЖДУ &НачДата И &КонДата";
	
	
	Запрос.УстановитьПараметр("НачДата",НачалоГода(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонДата",КонецГода(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("НомерВозврата",НомерДок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() тогда
		ТекВозврат = Выборка.Ссылка;
	КонецЕсли;	
	
	возврат ТекВозврат;
	
КонецФункции	

&НаСервере
Функция НайтиОтчетКомиссионера(НомерДок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Ссылка,
	|	ОтчетКомиссионераОПродажах.Номер
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Номер = &НомерДока";
	
	
	Запрос.УстановитьПараметр("НомерДока",НомерДок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() тогда
		ТекОтч = Выборка.Ссылка;
	КонецЕсли;	
	
	возврат ТекОтч;
	
КонецФункции	

&НаСервере
Функция ПоискНоменклатуры(КодID)
	
	Запрос = Новый запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ID = &ВыбКод"; 
	
	
	Запрос.УстановитьПараметр("ВыбКод",КодID);
	
	Выборка= Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр из Выборка цикл
		ТекНом = Стр.Ссылка;
		//	сообщить("ном. из заказа найдена:"+" "+ТекНом);
	КонецЦикла;	
	
	Возврат ТекНом;
	
КонецФункции	

&НаСервере
Функция ПоискКонтрагента(Код)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Код = &Код";
	
	//Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("Код",Код);
	
	Выборка= Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр из Выборка цикл
		ТекПок = стр.Ссылка;
	КонецЦикла; 
	
	
	Возврат ТекПок;
	
КонецФункции

&НаСервере
Функция ПоискКонтрагентаПоИНН(ИНН)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН";
	
	//Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("ИНН",ИНН);
	
	Выборка= Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр из Выборка цикл
		ТекПок = стр.Ссылка;
	КонецЦикла; 
	
	
	Возврат ТекПок;
	
КонецФункции

&НаСервере
Функция ПоискДоговора(Наименование,Контрагент,ВидДоговора,КодДог)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Код = &КодДог";
	
	Запрос.УстановитьПараметр("Наименование",Наименование);
	Запрос.УстановитьПараметр("ТекКонтрагент",Контрагент);
	Запрос.УстановитьПараметр("ВидДоговора",ВидДоговора);
	Запрос.УстановитьПараметр("КодДог",КодДог);
	
	
	Выборка= Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр из Выборка цикл
		ТекДог = стр.Ссылка;
	КонецЦикла; 
	
	Возврат ТекДог;
	
КонецФункции

&НаСервере
Функция СоздатьНайтиДоговор(Владелец,НаимДоговора,ВидДоговора,ВалютаДоговора,КодДог)
	
	
	Договор       = ПоискДоговора(НаимДоговора,Владелец, ВидДоговора,КодДог);
	
	Если ЗначениеЗаполнено(Договор) тогда
		ТекДоговор = Договор;
	Иначе	
		Если ЗначениеЗаполнено(Владелец) тогда
			//НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			//НовыйДоговор.Объект.Организация = Объект.Организация;
			//Если ЗначениеЗаполнено(НаимДоговора) тогда
			//	НовыйДоговор.Наименование = НаимДоговора; 
			//Иначе
			//	НовыйДоговор.Наименование = "Основной договор"; 
			//КонецЕсли;
			//НовыйДоговор.Владелец = Владелец;
			//НовыйДоговор.ВидДоговора = ВидДоговора;
			//НовыйДоговор.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(ВалютаДоговора);
			//НовыйДоговор.Записать();
			//Сообщить("записан договор для найденного контрагента!"+НовыйДоговор.Ссылка+"для"+НовыйДоговор.Владелец);
			//
			//ТекДоговор  = НовыйДоговор.Ссылка;
		Иначе
			сообщить("владелец неопределен! договор записан не будет!");
		КонецЕсли;
	КонецЕсли;	
	
	возврат ТекДоговор;
	
КонецФункции	

&НаСервере
Функция СоздатьНайтиКонтрагента(КодКонтрагента)
	
	Контрагент = ПоискКонтрагента(КодКонтрагента);
	
	Если ЗначениеЗаполнено(Контрагент) тогда
		ТекКонтрагент = Контрагент;
	Иначе
		сообщить("контрагент:"+КодКонтрагента+" не найден! Будет записан как новый");
		////записываем нового контрагента
		//НовЭлКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		//НовЭлКонтрагент.Родитель     = Справочники.Контрагенты.НайтиПоКоду(КодГруппыКонтрагента);
		//НовЭлКонтрагент.Наименование = НаимКонтрагента;
		//НовЭлКонтрагент.ИНН = ИНН;
		//НовЭлКонтрагент.НаименованиеПолное  = НаимКонтрагента;
		//НовЭлКонтрагент.IDforOst  = КодКонтрагента;
		//НовЭлКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		//НовЭлКонтрагент.IDut      = КодКонтрагента;
		//НовЭлКонтрагент.Комментарий = "#авт. загружен"+ТекущаяДата();
		//НовЭлКонтрагент.Записать();
		//
		//НовЭлКонтрагент.ГоловнойКонтрагент =  НовЭлКонтрагент.Ссылка;
		//НовЭлКонтрагент.Записать();
		//сообщить("записан новый контрагент:"+НовЭлКонтрагент.Наименование);
		//
		//ТекКонтрагент = НовЭлКонтрагент.Ссылка;
	КонецЕсли;
	
	возврат ТекКонтрагент;
	
КонецФункции	

&НаСервере
Функция СоздатьНайтиКонтрагентаПО_ИНН(КодКонтрагента,ИНН, Наимен)
	
	Контрагент = ПоискКонтрагентаПоИНН(ИНН);
	
	Если ЗначениеЗаполнено(Контрагент) тогда
		ТекКонтрагент = Контрагент;
	Иначе
		сообщить("контрагент:"+КодКонтрагента+" не найден! Будет записан как новый");
		////записываем нового контрагента
		НовЭлКонтрагент              = Справочники.Контрагенты.СоздатьЭлемент();
		НовЭлКонтрагент.Родитель     = Справочники.Контрагенты.НайтиПоКоду("000000120");
		НовЭлКонтрагент.Наименование = Наимен;
		НовЭлКонтрагент.ИНН          = ИНН;
		НовЭлКонтрагент.НаименованиеПолное  = Наимен;
		НовЭлКонтрагент.ID                  = КодКонтрагента;
		НовЭлКонтрагент.ЮрФизЛицо           = Перечисления.ЮрФизЛицо.ЮрЛицо;
		НовЭлКонтрагент.Комментарий         = "#авт. загружен"+ТекущаяДата();
		НовЭлКонтрагент.Записать();
		
		НовЭлКонтрагент.ГоловнойКонтрагент  =  НовЭлКонтрагент.Ссылка;
		НовЭлКонтрагент.Записать();
		сообщить("записан новый контрагент:"+НовЭлКонтрагент.Наименование);
		
		ТекКонтрагент = НовЭлКонтрагент.Ссылка;
	КонецЕсли;
	
	возврат ТекКонтрагент;
	
КонецФункции	

&НаСервере
Функция НайтиСоздатьНоменклатуру(КодНом,НаимНом,НаимЕд,Арт)
	
	РезНом = ПоискНоменклатуры(КодНом);
	
	Если НЕ ЗначениеЗаполнено(РезНом) тогда
		сообщить("номенклатура:"+НаимНом+"...не найдена в справочнике!");
		НовыйЭлНом = Справочники.Номенклатура.СоздатьЭлемент();
		НовыйЭлНом.Родитель = Справочники.Номенклатура.НайтиПоКоду("00000001516");
		
		
		НовыйЭлНом.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(СокрЛП(НаимЕд));
		НовыйЭлНом.Наименование = НаимНом;
		НовыйЭлНом.Артикул      = Арт;
		НовыйЭлНом.НаименованиеПолное = НаимНом;
		НовыйЭлНом.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		НовыйЭлНом.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
		НовыйЭлНом.Комментарий = "#Загр. из УТ";
		НовыйЭлНом.ID          = КодНом;
		НовыйЭлНом.Записать();
		сообщить("записана как новый элемент!");
		Ном = НовыйЭлНом.Ссылка ;
	Иначе
		Ном = РезНом  ;
		сообщить("найдена номенклатура:"+Ном);
	КонецЕсли;	
	
	Возврат Ном;
	
КонецФункции	

&НаСервере
Функция НайтиСебестоимостьНоменклатуры(Номенклатура, Склад)
	
	ЦенаСредняя =0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт КАК КоличествоОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			,
	|			Счет = &Счет,
	|			,
	|			Субконто1 = &Ном
	|				И Субконто2 = &Склад) КАК ХозрасчетныйОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("НачПериода",Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонПериода",КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Счет",ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	Запрос.УстановитьПараметр("Склад",Объект.Склад);
	Запрос.УстановитьПараметр("Ном", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		Сумма = ?(Выборка.СуммаОборотДт = null, 0, Выборка.СуммаОборотДт);
		Кол   = ?(ВЫборка.КоличествоОборотДт = null, 0,Выборка.КоличествоОборотДт);
		Если Кол<>0 тогда
			ЦенаСредняя = Сумма/Кол;
		Иначе
			ЦенаСредняя = 0;
		КонецЕсли;	
	КонецЕсли;	
	
	возврат ЦенаСредняя;
	
КонецФункции	

&НаСервере
Функция НайтиНомерИсправляемойСчФ(НомСчФ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокРеал";
	
	Запрос.УстановитьПараметр("ДокРеал", НомСчФ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		СчФ = Выборка.Ссылка.Номер;
	КонецЕсли;	
	
	возврат СчФ;
	
КонецФункции	

&НаСервере
Функция ПолучитьКурсВал(Вал, Пер)
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Вал) КАК КурсыВалютСрезПоследних" ;
	
	Запрос.УстановитьПараметр("Вал", Вал);			  
	Запрос.УстановитьПараметр("Дата", Пер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() тогда
		Курс = Выборка.Курс;
	КонецЕсли;
	
	возврат Курс;
	
КонецФункции

&НаСервере
Функция ПолучитьКратностьВал(Вал,Пер)
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Вал) КАК КурсыВалютСрезПоследних" ;
	
	Запрос.УстановитьПараметр("Вал", Вал);			  
	Запрос.УстановитьПараметр("Дата", Пер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() тогда
		Кратность = Выборка.Кратность;
	КонецЕсли;
	
	возврат Кратность;
	
	
	
КонецФункции	

&НаСервере
Функция НайтиБанковскийСчет(НомерСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.НомерСчета = &НомерСчета";
	
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() тогда
		
		БанкСчет = Выборка.Ссылка;
		
	КонецЕсли;	
	
	возврат БанкСчет;
	
КонецФункции	

&НаСервере
Функция НайтиВедомость(НомерВед)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизаций.Номер,
	|	ЗарплатаКВыплатеОрганизаций.Ссылка
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизаций.Номер = &Ном";
	
	Запрос.УстановитьПараметр("Ном", НомерВед);
	
	выборка = запрос.Выполнить().Выбрать();
	
	Если выборка.Следующий() тогда
		Ведомость = выборка.ссылка;
	КонецЕсли;	
	
	возврат Ведомость;
	
КонецФункции	

&НаСервере
Функция НайтиФЛ(Код)
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	ФизическиеЛица.Код,
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Код = &Код" ;
	
	Запрос.УстановитьПараметр("Код", Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		ФЛ = Выборка.Ссылка;
	КонецЕсли;	
	
	возврат ФЛ;
	
КонецФункции	

&НаСервере
Функция НайтиДоговорСПоставщиком(Наим,Влад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Влад
	|	И ДоговорыКонтрагентов.ВидДоговора = &СПост
	|	И ДоговорыКонтрагентов.Наименование = &Наим";
	
	Запрос.УстановитьПараметр("Влад",Влад);
	Запрос.УстановитьПараметр("Наим",Наим);
	Запрос.УстановитьПараметр("СПост",Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		Дог = Выборка.Ссылка;
	КонецЕсли;	
	
	возврат Дог;
КонецФункции	

#endregion

#region commands

&НаКлиенте
Процедура ЗаполнитьПоступлениями(Команда)
	
	ЗаполнитьПоступлениямиНаСервере();
	ПоказатьПредупреждение(,"Загрузка завершена!",30,"Оповещение");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПоступленияНаСкладМонтажа(Команда)
	ЗагрузитьПоступленияНаСкладМонтажаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РеализацияБезНал(Команда)
	
	РеализацияБезНалНаСервере();
	
КонецПроцедуры



//По имени команды обрабатываем действие с флагом(Булево)
//Команда должна называться согласно шаблону "УстанФлаг_ИмяТабличнойЧасти/СнятьФлаг_ИмяТабличнойЧасти"
//Первые пять символов префикс команды:
//"Устан" 	- проставляем флажки, в табличной части
//"Снять"	- снимаем флажки, с табличной части
//С 11 символа и по конец строки, получаем имя табличной части
//
&НаКлиенте
Функция ОбработатьФлаг(Команда)
	
	ВзвестиФлаг = ?(Лев(Команда.Имя,5)="Устан", Истина, Ложь);
	ИмяТабличнойЧасти = Сред(Команда.Имя,11);
	УстановитьСнятьФлаг(ИмяТабличнойЧасти, ВзвестиФлаг)
	
КонецФункции

//Ставим или снимаем флажки, со всей табличной части
&НаКлиенте
Функция УстановитьСнятьФлаг(ТабличнаяЧасть, ВзводФлага)
	
	Для каждого СтрокаФлаг Из Объект[ТабличнаяЧасть] Цикл
		СтрокаФлаг.Флаг = ВзводФлага; 	
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Для каждого Стр из Объект.СписокДокументов цикл
		Если Стр.ПризнакПрихода = 1 тогда
			СформироватьДокументыПоступления(Стр);
		ИначеЕсли Стр.ПризнакПрихода = 3 тогда  //это реализация оптовая со склада "Основной"!
			СформироватьДокументыРеализации(Стр);
		ИначеЕсли Стр.ПризнакПрихода = 33 тогда  //это реализация оптовая со склада "СкладМонтажа"!
			Если не стр.ЭтоУслугиМ тогда
				СформироватьОП(Стр);
				СформироватьДокументыРеализацииСклМонт(Стр);
			Иначе
				СформироватьДокументыРеализацииСклМонт(Стр);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#endregion

#region get_docs_UT

&НаСервере
Процедура ЗаполнитьПоступлениямиНаСервере()
	
	Если Объект.СписокДокументов.Количество() > 0 тогда
		Объект.СписокДокументов.Очистить();
	КонецЕсли;	
	Если Объект.СписокНоменклатуры.Количество() > 0 тогда
		Объект.СписокНоменклатуры.Очистить();
	КонецЕсли;	
	
	КодСклада ="000000001";
	Объект.Склад = Справочники.Склады.НайтиПоКоду(КодСклада);
	
	V83 = ПолучитьПодключениеКФайловойБД();
	Если V83 = Неопределено Тогда
		Сообщить("Не удалось подключиться к базе УТ!  " +ОписаниеОшибки());
		Возврат;
	Иначе
		Сообщить("Начало подключения: "+ТекущаяДата());	
		Запрос8  = V83.NewObject("Запрос");
	КонецЕсли; 
	
	//Попытка
	//	Запрос8  = V83.NewObject("Запрос");
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки;
	
	ЗаполнитьТоварами(Запрос8, КодСклада);
	// ЗаполнитьУслугами(Запрос8);
	
	тзСписокДок = Объект.СписокДокументов.Выгрузить();
	тзСписокДок.Свернуть("ДатаДок,НомерДок,Контрагент,Документа,Флаг,ПризнакПрихода,ДатаДокументаПоставщика,НомерДокументаПоставщика,НомерСчФактурыВх,ДатаСчФактурыВх,КодКонтрагента,ИНН,НаименованиеДоговора,КодДоговора,КодСклада,СуммаВключаетНДС,Комментарий,ВалютаДоговора,Ответственный,КонтрагентСсылка,ДоговорСсылка","Сумма,СуммаНДС");
	Объект.СписокДокументов.Загрузить(тзСписокДок);
	Сообщить("Окончание подключения: "+ТекущаяДата());	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоступленияНаСкладМонтажаНаСервере()
	
	КодСклада = "000000002";
	Объект.Склад = справочники.Склады.НайтиПоКоду("000000003");
	
	Если Объект.СписокДокументов.Количество()>0 тогда
		Объект.СписокДокументов.Очистить();
	КонецЕсли;	
	
	Если Объект.СписокНоменклатуры.Количество()>0 тогда
		Объект.СписокНоменклатуры.Очистить();
	КонецЕсли;	
	
	////ПутьКБазе    = "C:\Documents and Settings\konovalova\Мои документы\InfoBase2";
	////ПутьКБазе    = "Y:\Управление торговлей(копия)\Accounting1";
	//ПутьКБазе    = "X:\Управление торговлей(копия)\Accounting1";
	//Пользователь = "админ";
	//Пароль       = "252118";
	
	сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V82.Application");
	//Попытка 
	//	//Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	//	//Открытие = V81.Connect("File="""+ПутьКБазе+""";Usr="""+Пользователь+""";Pwd="""+Пароль+""";");
	//	Открытие = V81.Connect("Srvr="""+"RKKSERVERPC"+""";Ref="""+"UT"+""";Usr="""+"obmen_ne_trogaem"+""";Pwd="""+"252118"+""";");
	//	
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	
	V81 = ПолучитьПодключениеКФайловойБД();
	Попытка
		Запрос8  = V81.NewObject("Запрос");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаполнитьТоварами(Запрос8,КодСклада);
	//ЗаполнитьУслугами(Запрос8,КодСклада);
	
	тзСписокДокументов = Объект.СписокДокументов.Выгрузить();
	тзСписокДокументов.Свернуть("ДатаДок,НомерДок,Контрагент,Документа,Флаг,ПризнакПрихода,ДатаДокументаПоставщика,НомерДокументаПоставщика,НомерСчФактурыВх,ДатаСчФактурыВх,КодКонтрагента,ИНН,НаименованиеДоговора,КодДоговора,КодСклада,СуммаВключаетНДС,Комментарий,ВалютаДоговора,Ответственный,КонтрагентСсылка,ДоговорСсылка","Сумма,СуммаНДС");
	Объект.СписокДокументов.Загрузить(тзСписокДокументов);
	Сообщить("окончание подключения:"+ТекущаяДата());	
	
КонецПроцедуры

&НаСервере
Процедура РеализацияБезНалНаСервере()
	
	Объект.Склад = Справочники.Склады.НайтиПоКоду("000000001");
	
	Если Объект.СписокДокументов.Количество()>0 тогда
		Объект.СписокДокументов.Очистить();
	КонецЕсли;	
	
	Если Объект.СписокНоменклатуры.Количество()>0 тогда
		Объект.СписокНоменклатуры.Очистить();
	КонецЕсли;	
	
	//ПутьКБазе    = "X:\Управление торговлей(копия)\Accounting1";
	////ПутьКБазе    = "Y:\Управление торговлей(копия)\Accounting1";
	//Пользователь = "админ";
	//Пароль       = "252118";
	//
	//
	//сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V82.Application");
	//Попытка 
	//	//Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	//	//Открытие = V81.Connect("File="""+ПутьКБазе+""";Usr="""+Пользователь+""";Pwd="""+Пароль+""";");
	//	Открытие = V81.Connect("Srvr="""+"RKKSERVERPC"+""";Ref="""+"UT"+""";Usr="""+"obmen_ne_trogaem"+""";Pwd="""+"252118"+""";");
	//	
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	
	V81 = ПолучитьПодключениеКФайловойБД();
	Попытка
		Запрос8  = V81.NewObject("Запрос");
		//Запрос8_ = V81.NewObject("Запрос");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Запрос8.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугТовары.Ссылка.Номер КАК Номер,
	|	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК Код,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.СтавкаНДС.Порядок КАК СтавкаНДС,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.Ссылка.Контрагент.Наименование КАК Контрагент,
	|	РеализацияТоваровУслугТовары.Ссылка.Контрагент.Код КАК КодКонтрагента,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Наименование КАК Единица,
	|	РеализацияТоваровУслугТовары.Ссылка.Контрагент.ИНН КАК ИНН,
	|	ВложенныйЗапрос.Ссылка КАК СчетФактураВыданный,
	|	ВложенныйЗапрос.Номер КАК НомерСчФ,
	|	ВложенныйЗапрос.Дата КАК ДатаСчФ,
	|	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.Код КАК ДоговорКод,
	|	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВидДоговора.Порядок КАК ВидДоговора,
	|	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код КАК ВалютаДоговора,
	|	РеализацияТоваровУслугТовары.Ссылка.Склад.Код КАК КодСклада,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.Комментарий КАК СТРОКА) КАК Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	|			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|			СчетФактураВыданныйДокументыОснования.Ссылка.Номер КАК Номер,
	|			СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования) КАК ВложенныйЗапрос
	|		ПО РеализацияТоваровУслугТовары.Ссылка = ВложенныйЗапрос.ДокументОснование.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	|	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И РеализацияТоваровУслугТовары.Ссылка.Склад.Код = &ОсновнойСклад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";	
	
	Запрос8.УстановитьПараметр("НачДата",НачалоДня(Период.ДатаНачала));
	Запрос8.УстановитьПараметр("КонДата",КонецДня(Период.ДатаОкончания));
	Запрос8.УстановитьПараметр("ОсновнойСклад","000000001");
	
	Выборка = Запрос8.Выполнить().Выгрузить();
	Для каждого Стр из выборка цикл
		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.ДатаДок  = Стр.Ссылка.дата;
		СтрокаСпискаДокументов.НомерДок = Стр.Ссылка.номер;
		СтрокаСпискаДокументов.Контрагент = Стр.Контрагент;
		СтрокаСпискаДокументов.КодКонтрагента = СокрЛП(Стр.КодКонтрагента);
		Если ЗначениеЗаполнено(стр.ИНН) тогда
			ТекКонтрагент = ПоискКонтрагентаПоИНН(стр.ИНН);
		Иначе
			ТекКонтрагент = справочники.Контрагенты.НайтиПоКоду("000000304");
		КонецЕсли;
		СтрокаСпискаДокументов.КонтрагентСсылка = ТекКонтрагент;
		
		СтрокаСпискаДокументов.ДоговорСсылка    = ?(ЗначениеЗаполнено(ТекКонтрагент),СтрокаСпискаДокументов.КонтрагентСсылка.ОсновнойДоговорКонтрагента, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());//СтрокаСпискаДокументов.КонтрагентСсылка.ОсновнойДоговорКонтрагента;
		
		//СтрокаСпискаДокументов.ДоговорСсылка    = СтрокаСпискаДокументов.КонтрагентСсылка.ОсновнойДоговорКонтрагента;
		СтрокаСпискаДокументов.Сумма = Стр.Сумма;
		СтрокаСпискаДокументов.СуммаНДС = Стр.СуммаНДС;
		СтрокаСпискаДокументов.Документа = "Реализация";
		СтрокаСпискаДокументов.Флаг = истина;
		СтрокаСпискаДокументов.ПризнакПрихода = 3;
		СтрокаСпискаДокументов.инн = Стр.инн;
		СтрокаСпискаДокументов.НомерСчФактурыВх = Стр.НомерСчФ;
		СтрокаСпискаДокументов.ДатаСчФактурыВх  = Стр.ДатаСчФ;
		СтрокаСпискаДокументов.КодДоговора      = Стр.ДоговорКод;
		СтрокаСпискаДокументов.НаименованиеДоговора = Стр.ДоговорНаименование;
		СтрокаСпискаДокументов.ТипДоговора          = Стр.ВидДоговора;
		СтрокаСпискаДокументов.ВалютаДоговора       = Справочники.Валюты.НайтиПоКоду("643");
		СтрокаСпискаДокументов.КодСклада            = Стр.КодСклада;
		СтрокаСпискаДокументов.Комментарий          = Стр.Комментарий;
		//СтрокаСпискаДокументов.СуммаВключаетНДС     = Стр.СуммаВключаетНДС;
		//СтрокаСпискаДокументов.УчитыватьНДС         = Стр.УчитыватьНДС;
		СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
		СтрокаСпискаНоменклатуры._ДатаДок      = Стр.Ссылка.дата;
		СтрокаСпискаНоменклатуры._КодНом       = Стр.Код;
		СтрокаСпискаНоменклатуры._Номенклатура = Стр.Номенклатура.Наименование;
		СтрокаСпискаНоменклатуры._НомерДок     = Стр.ссылка.Номер;
		СтрокаСпискаНоменклатуры._Сумма        = Стр.Сумма;
		СтрокаСпискаНоменклатуры._СуммаНДС     = Стр.СуммаНДС;
		СтрокаСпискаНоменклатуры._Цена         = Стр.Цена;
		СтрокаСпискаНоменклатуры._Количество   = Стр.Количество;
		СтрокаСпискаНоменклатуры._Артикул      = Стр.Артикул;
		СтрокаСпискаНоменклатуры._Единица      = Стр.Единица;
		СтрокаСпискаНоменклатуры._СтавкаНДС    = Стр.СтавкаНДС;
		//		СтрокаСпискаНоменклатуры.Субконто      = Стр.СубконтоКод;
		//СтрокаСпискаНоменклатуры.Страна               = Стр.СтранаПроисхождения;
		//СтрокаСпискаНоменклатуры.НомерГТД             = Стр.НомерГТД;
		
		//сообщить("");
	КонецЦикла;
	
	РеализацияУслуг(Запрос8,"000000001",3,,);
	тзСписокДок = Объект.СписокДокументов.Выгрузить();
	тзСписокДок.Свернуть("ДатаДок,НомерДок,Контрагент,Документа,Флаг,ПризнакПрихода,ВидВозврата,КодКонтрагента,ИНН,НомерСчФактурыВх,ДатаСчФактурыВх,КодДоговора,НаименованиеДоговора,ТипДоговора,ВалютаДоговора,КодСклада,Комментарий,СуммаВключаетНДС,УчитыватьНДС,Страна,НомерГТД,КонтрагентСсылка,ДоговорСсылка","Сумма,СуммаНДС");
	Объект.СписокДокументов.Загрузить(тзСписокДок);
	
КонецПроцедуры


#endregion


//----------------------------------------------------
//процедуры заполнения из внешних баз

&НаСервере
Процедура ЗаполнитьРеализациями(Команда)
	
	Если Объект.СписокДокументов.Количество()>0 тогда
		Объект.СписокДокументов.Очистить();
	КонецЕсли;	
	
	Если Объект.СписокНоменклатуры.Количество()>0 тогда
		Объект.СписокНоменклатуры.Очистить();
	КонецЕсли;	
	
	сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V81.Application");
	//Попытка 
	//	Открытие = V81.Connect("Srvr="""+"ndc02"+""";Ref="""+"UT2010"+""";Usr="""+"КоноваловаМ"+""";Pwd="""+"252118"+""";");
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	
	V81 = ПолучитьПодключениеКФайловойБД();
	Попытка
		Запрос8 = V81.NewObject("Запрос");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Запрос8.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахТовары.Ссылка,
	|	ОтчетОРозничныхПродажахТовары.Ссылка.Номер,
	|	ОтчетОРозничныхПродажахТовары.Ссылка.Дата,
	|	ОтчетОРозничныхПродажахТовары.Номенклатура,
	|	ОтчетОРозничныхПродажахТовары.Номенклатура.Код КАК Код,
	|	ОтчетОРозничныхПродажахТовары.Номенклатура.Артикул КАК Артикул,
	|	ОтчетОРозничныхПродажахТовары.Количество,
	|	ОтчетОРозничныхПродажахТовары.Цена,
	|	ОтчетОРозничныхПродажахТовары.СуммаНДС,
	|	ОтчетОРозничныхПродажахТовары.Сумма,
	|	ОтчетОРозничныхПродажахТовары.ЕдиницаИзмерения.Наименование КАК Единица,
	|	ОтчетОРозничныхПродажахТовары.Ссылка.ВидОперацииРозницы.Наименование КАК ВидВозврата
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Ссылка.Проведен = ИСТИНА
	|	И ОтчетОРозничныхПродажахТовары.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И ОтчетОРозничныхПродажахТовары.Ссылка.Организация.Код = &Организация";
	
	Запрос8.УстановитьПараметр("НачДата",НачалоДня(Период.ДатаНачала));
	Запрос8.УстановитьПараметр("КонДата",КонецДня(Период.ДатаОкончания));
	Запрос8.УстановитьПараметр("Организация","00021");
	
	Выборка = Запрос8.Выполнить().Выгрузить();
	
	Для каждого Стр из выборка цикл
		//список документов
		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.ДатаДок  = Стр.Ссылка.дата;
		СтрокаСпискаДокументов.НомерДок = Стр.Ссылка.номер;
		СтрокаСпискаДокументов.Контрагент = "Розница";
		СтрокаСпискаДокументов.Сумма = Стр.Сумма;
		СтрокаСпискаДокументов.СуммаНДС = Стр.СуммаНДС;
		СтрокаСпискаДокументов.Документа = "Отч. о розн. прод.";
		СтрокаСпискаДокументов.Флаг = истина;
		СтрокаСпискаДокументов.ПризнакПрихода = 2;
		СтрокаСпискаДокументов.ВидВозврата = Стр.ВидВозврата;
		//список номенклатуры
		СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
		СтрокаСпискаНоменклатуры._ДатаДок = Стр.Ссылка.дата;
		СтрокаСпискаНоменклатуры._КодНом  = Стр.Код;
		СтрокаСпискаНоменклатуры._Номенклатура = Стр.Номенклатура.Наименование;
		СтрокаСпискаНоменклатуры._НомерДок = Стр.ссылка.Номер;
		СтрокаСпискаНоменклатуры._Сумма    = Стр.Сумма;
		СтрокаСпискаНоменклатуры._СуммаНДС = Стр.СуммаНДС;
		СтрокаСпискаНоменклатуры._Цена     = Стр.Цена;
		СтрокаСпискаНоменклатуры._Количество = Стр.Количество;
		СтрокаСпискаНоменклатуры._Артикул    = Стр.Артикул;
		СтрокаСпискаНоменклатуры._Единица    = Стр.Единица;
	КонецЦикла;	 
	
	Объект.СписокДокументов.Свернуть("ДатаДок,НомерДок,Контрагент,Документа,Флаг,ПризнакПрихода,ВидВозврата","Сумма,СуммаНДС");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварами(Запрос, СкладОтбор)
	
	Запрос.Текст =   
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка,
	|	ПоступлениеТоваровУслугТовары.Ссылка.ДатаВходящегоДокумента КАК ДатаВхДок,
	|	ПоступлениеТоваровУслугТовары.Ссылка.НомерВходящегоДокумента КАК НомерВхДок,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Код КАК Код,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК Единица,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапрос.НомерВходящегоДокумента,
	|	ВложенныйЗапрос.ДатаВходящегоДокумента,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Контрагент.Наименование,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Контрагент.Код КАК КодКонтрагента,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Контрагент.ИНН КАК ИНН,
	|	ПоступлениеТоваровУслугТовары.Ссылка.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	ПоступлениеТоваровУслугТовары.Ссылка.ДоговорКонтрагента.Код КАК ДоговорКод,
	|	ПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС,
	|	ВЫРАЗИТЬ(ПоступлениеТоваровУслугТовары.Ссылка.Комментарий КАК СТРОКА) КАК Комментарий,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Ответственный.Код КАК Ответственный,
	|	ПоступлениеТоваровУслугТовары.Ссылка.КурсВзаиморасчетов,
	|	ПоступлениеТоваровУслугТовары.Ссылка.КратностьВзаиморасчетов,
	|	ПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента.Код КАК ВалютаДокумента
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка,
	|			СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|			СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|			СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|		ИЗ
	|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования) КАК ВложенныйЗапрос
	|		ПО ПоступлениеТоваровУслугТовары.Ссылка = ВложенныйЗапрос.ДокументОснование.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	|	И ПоступлениеТоваровУслугТовары.Ссылка.СкладОрдер.Код = &КодСклада";
	
	Запрос.УстановитьПараметр("НачДата",	НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонДата",	КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("КодСклада", 	СкладОтбор);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для каждого Стр из выборка цикл
		//Заполнение списка документов
		СтрокаСпискаДокументов                          = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.ДатаДок                  = Стр.Ссылка.дата;
		СтрокаСпискаДокументов.НомерДок                 = Стр.Ссылка.номер;
		СтрокаСпискаДокументов.Контрагент               = Стр.КонтрагентНаименование;
		СтрокаСпискаДокументов.КодКонтрагента           = Стр.КодКонтрагента;
		СтрокаСпискаДокументов.ИНН                      = Стр.ИНН;
		СтрокаСпискаДокументов.Сумма                    = Стр.Сумма;
		СтрокаСпискаДокументов.СуммаНДС                 = Стр.СуммаНДС;
		СтрокаСпискаДокументов.Документа                = "Прих. накл.";
		СтрокаСпискаДокументов.Флаг                     = истина;
		СтрокаСпискаДокументов.ПризнакПрихода           = 1;
		СтрокаСпискаДокументов.ДатаДокументаПоставщика  = СокрЛП(Стр.ДатаВхДок);
		СтрокаСпискаДокументов.НомерДокументаПоставщика = СокрЛП(Стр.НомерВхДок);
		СтрокаСпискаДокументов.НаименованиеДоговора     = СокрЛП(Стр.ДоговорНаименование);
		СтрокаСпискаДокументов.Комментарий              = Стр.Комментарий;
		СтрокаСпискаДокументов.Ответственный            = стр.Ответственный;
		СтрокаСпискаДокументов.КонтрагентСсылка         = ПоискКонтрагентаПоИНН(стр.ИНН);
		СтрокаСпискаДокументов.ДоговорСсылка            = НайтиДоговорСПоставщиком(Стр.ДоговорНаименование,СтрокаСпискаДокументов.КонтрагентСсылка);
		СтрокаСпискаДокументов.СуммаВключаетНДС         = стр.СуммаВключаетНДС;
		СтрокаСпискаДокументов.НомерСчФактурыВх         = стр.НомерВходящегоДокумента;
		СтрокаСпискаДокументов.ДатаСчФактурыВх          = стр.ДатаВходящегоДокумента;
		//Заполнение списка номенклатуры
		СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
		СтрокаСпискаНоменклатуры._ДатаДок 				= Стр.Ссылка.дата;
		СтрокаСпискаНоменклатуры._КодНом  				= Стр.Код;
		СтрокаСпискаНоменклатуры._Номенклатура 			= Стр.Номенклатура.Наименование;
		СтрокаСпискаНоменклатуры._НомерДок 				= Стр.ссылка.Номер;
		СтрокаСпискаНоменклатуры._Сумма    				= Стр.Сумма;
		СтрокаСпискаНоменклатуры._СуммаНДС 				= Стр.СуммаНДС;
		СтрокаСпискаНоменклатуры._Цена     				= Стр.Цена;
		СтрокаСпискаНоменклатуры._Количество 			= Стр.Количество;
		СтрокаСпискаНоменклатуры._Артикул    			= Стр.Артикул;
		СтрокаСпискаНоменклатуры._Единица    			= Стр.Единица;
	КонецЦикла;	 
	
КонецПроцедуры	 

Процедура ЗаполнитьУслугами(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Содержание,
	|	ПоступлениеТоваровУслугУслуги.Количество,
	|	ПоступлениеТоваровУслугУслуги.Ссылка,
	|	ПоступлениеТоваровУслугУслуги.Цена,
	|	ПоступлениеТоваровУслугУслуги.Сумма,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура.Код КАК Код,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.НомерВходящегоДокумента КАК НомерВхДок,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.ДатаВходящегоДокумента КАК ДатаВхДок,
	|	ВложенныйЗапрос.НомерВходящегоДокумента,
	|	ВложенныйЗапрос.ДатаВходящегоДокумента,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент.Наименование,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент.Код КАК КодКонтрагента,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент.ИНН КАК ИНН,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.Код КАК ДоговорКод,
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Ответственный.Код КАК Ответственный
	//|	ПоступлениеТоваровУслугУслуги.СчетЗатрат.Код КАК счетЗатрат,
	//|	ПоступлениеТоваровУслугУслуги.Ссылка.ПредъявленСчетФактура,
	//|	ПоступлениеТоваровУслугУслуги.Ссылка.НомерВходящегоСчетаФактуры,
	//|	ПоступлениеТоваровУслугУслуги.Ссылка.ДатаВходящегоСчетаФактуры,
	//|	ПоступлениеТоваровУслугУслуги.Субконто1.Код как Субконто1,
	//|	ПоступлениеТоваровУслугУслуги.Субконто2.Код как Субконто2,
	//|	ПоступлениеТоваровУслугУслуги.Субконто3.Код как Субконто3
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка,
	|			СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|			СчетФактураПолученныйДокументыОснования.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|			СчетФактураПолученныйДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|		ИЗ
	|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования) КАК ВложенныйЗапрос
	|		ПО ПоступлениеТоваровУслугУслуги.Ссылка = ВложенныйЗапрос.ДокументОснование.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Организация.Код = &Технолайн
	|	И ПоступлениеТоваровУслугУслуги.Ссылка.Проведен = ИСТИНА";
	
	
	
	Запрос.УстановитьПараметр("НачДата",НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонДата",КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Технолайн",Объект.Организация.Код);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр из выборка цикл
		
		СтрокаСпискаУслуг = Объект.СписокУслуг.Добавить();
		СтрокаСпискаУслуг.ДатаДок_  = Стр.Ссылка.Дата;
		СтрокаСпискаУслуг.НомерДок_ = Стр.Ссылка.Номер;
		СтрокаСпискаУслуг.КодУсл_   = Стр.Код;
		СтрокаСпискаУслуг.Сумма_    = Стр.Сумма;
		СтрокаСпискаУслуг.СуммаНДС_ = Стр.СуммаНДС;
		СтрокаСпискаУслуг.Услуга_   = Стр.Содержание;
		
		
		
		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.ДатаДок  = Стр.Ссылка.дата;
		СтрокаСпискаДокументов.НомерДок = Стр.Ссылка.номер;
		СтрокаСпискаДокументов.Контрагент = Стр.КонтрагентНаименование;
		СтрокаСпискаДокументов.КодКонтрагента = Стр.КодКонтрагента;
		СтрокаСпискаДокументов.ИНН  = Стр.ИНН;
		СтрокаСпискаДокументов.Сумма      = Стр.Сумма;
		СтрокаСпискаДокументов.СуммаНДС   = Стр.СуммаНДС;
		СтрокаСпискаДокументов.Документа  = "Прих. накл.";
		СтрокаСпискаДокументов.Флаг = истина;
		СтрокаСпискаДокументов.ПризнакПрихода = 1;
		СтрокаСпискаДокументов.ДатаДокументаПоставщика  = СокрЛП(Стр.ДатаВхДок);
		СтрокаСпискаДокументов.НомерДокументаПоставщика = СокрЛП(Стр.НомерВхДок);
		СтрокаСпискаДокументов.НаименованиеДоговора     = СокрЛП(Стр.ДоговорНаименование);
		СтрокаСпискаДокументов.Ответственный            = стр.Ответственный;
		СтрокаСпискаДокументов.КонтрагентСсылка         = ПоискКонтрагентаПоИНН(стр.ИНН);
		СтрокаСпискаДокументов.ДоговорСсылка            = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(Стр.ДоговорНаименование);
		
	КонецЦикла;
	
	
Конецпроцедуры	 

Процедура РеализацияУслуг(Запрос,КодСклада,ПризнакПрихода,КодКомплекта,Ном)
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Ссылка.Номер,
	|	РеализацияТоваровУслугУслуги.Ссылка.Дата,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Наименование КАК Услуга,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.Сумма,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Код КАК КодУслуги,
	|	РеализацияТоваровУслугУслуги.Ссылка.Контрагент.Код КАК КодКонтрагента,
	|	РеализацияТоваровУслугУслуги.Ссылка.Контрагент.Наименование КАК Контрагент,
	|	РеализацияТоваровУслугУслуги.Ссылка.Контрагент.ИНН КАК ИНН,
	|	ВложенныйЗапрос.Номер КАК НомерСчФ,
	|	ВложенныйЗапрос.Дата КАК ДатаСчФ,
	|	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.Код КАК ДоговорКод,
	|	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.ВидДоговора.Порядок КАК ВидДоговора,
	|	РеализацияТоваровУслугУслуги.Ссылка.Склад.Код КАК КодСклада,
	|	РеализацияТоваровУслугУслуги.Ссылка.Комментарий,
	|	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.Наименование КАК ДоговорНаименование
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	|			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|			СчетФактураВыданныйДокументыОснования.Ссылка.Номер КАК Номер,
	|			СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования) КАК ВложенныйЗапрос
	|		ПО РеализацияТоваровУслугУслуги.Ссылка = ВложенныйЗапрос.ДокументОснование
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И РеализацияТоваровУслугУслуги.Ссылка.Склад.Код = &КодСклада
	|	И РеализацияТоваровУслугУслуги.Ссылка.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("НачДата",НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонДата",КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("КодСклада",КодСклада);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр из выборка цикл
		
		СтрокаСпискаУслуг            = Объект.СписокУслуг.Добавить();
		СтрокаСпискаУслуг.ДатаДок_   = Стр.дата;
		СтрокаСпискаУслуг.НомерДок_  = Стр.номер;
		СтрокаСпискаУслуг.КодУсл_    = Стр.КодУслуги;
		СтрокаСпискаУслуг.Услуга_    = Стр.Услуга;
		СтрокаСпискаУслуг.Сумма_     = Стр.Сумма;
		СтрокаСпискаУслуг.СуммаНДС_  = Стр.СуммаНДС;
		
		
		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.ДатаДок  = Стр.дата;
		СтрокаСпискаДокументов.НомерДок = Стр.номер;
		СтрокаСпискаДокументов.Контрагент = Стр.Контрагент;
		СтрокаСпискаДокументов.КодКонтрагента = СокрЛП(Стр.КодКонтрагента);
		Если ЗначениеЗаполнено(стр.ИНН) тогда
			ТекКонтрагент = ПоискКонтрагентаПоИНН(стр.ИНН);
		Иначе
			ТекКонтрагент = справочники.Контрагенты.НайтиПоКоду("000000304");
		КонецЕсли;
		СтрокаСпискаДокументов.КонтрагентСсылка = ТекКонтрагент;
		
		СтрокаСпискаДокументов.ДоговорСсылка    = ?(ЗначениеЗаполнено(ТекКонтрагент),СтрокаСпискаДокументов.КонтрагентСсылка.ОсновнойДоговорКонтрагента, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());//СтрокаСпискаДокументов.КонтрагентСсылка.ОсновнойДоговорКонтрагента;
		
		//СтрокаСпискаДокументов.ДоговорСсылка    = СтрокаСпискаДокументов.КонтрагентСсылка.ОсновнойДоговорКонтрагента;
		
		СтрокаСпискаДокументов.Сумма = Стр.Сумма;
		СтрокаСпискаДокументов.СуммаНДС = Стр.СуммаНДС;
		СтрокаСпискаДокументов.Документа = "Реализация";
		СтрокаСпискаДокументов.Флаг = истина;
		СтрокаСпискаДокументов.ПризнакПрихода = ПризнакПрихода;
		СтрокаСпискаДокументов.инн = Стр.инн;
		СтрокаСпискаДокументов.НомерСчФактурыВх = Стр.НомерСчФ;
		СтрокаСпискаДокументов.ДатаСчФактурыВх  = Стр.ДатаСчФ;
		СтрокаСпискаДокументов.КодДоговора      = Стр.ДоговорКод;
		СтрокаСпискаДокументов.НаименованиеДоговора = Стр.ДоговорНаименование;
		СтрокаСпискаДокументов.ТипДоговора          = Стр.ВидДоговора;
		СтрокаСпискаДокументов.ВалютаДоговора       = Справочники.Валюты.НайтиПоКоду("643");
		СтрокаСпискаДокументов.КодСклада            = Стр.КодСклада;
		СтрокаСпискаДокументов.КодНоменклатуры      = КодКомплекта;
		СтрокаСпискаДокументов.Номенклатура         = Ном;
		
		
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура РеализацияБезНалУслуги()
КонецПроцедуры	 


Процедура ЗаполнитьСчетамиПоТоварам(Запрос)
	//   
	//   	Запрос.Текст = "ВЫБРАТЬ
	//				   |	СчетНаОплатуПокупателюТовары.Ссылка,
	//				   |	СчетНаОплатуПокупателюТовары.НомерСтроки,
	//				   |	СчетНаОплатуПокупателюТовары.Номенклатура,
	//				   |	СчетНаОплатуПокупателюТовары.Номенклатура.Артикул КАК Артикул,
	//				   |	СчетНаОплатуПокупателюТовары.Цена,
	//				   |	СчетНаОплатуПокупателюТовары.Сумма,
	//				   |	СчетНаОплатуПокупателюТовары.СтавкаНДС,
	//				   |	СчетНаОплатуПокупателюТовары.СуммаНДС,
	//				   |	СчетНаОплатуПокупателюТовары.Количество,
	//				   |	СчетНаОплатуПокупателюТовары.Номенклатура.Код КАК КодНом,
	//				   |	СчетНаОплатуПокупателюТовары.Ссылка.Контрагент.Наименование,
	//				   |	СчетНаОплатуПокупателюТовары.Ссылка.Контрагент.Код КАК КодКонтрагента,
	//				   |	СчетНаОплатуПокупателюТовары.Ссылка.Контрагент.ИНН КАК ИНН,
	//				   |	СчетНаОплатуПокупателюТовары.Ссылка.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	//				   |	СчетНаОплатуПокупателюТовары.Ссылка.ДоговорКонтрагента.Код КАК ДоговорКод,
	//				   |	СчетНаОплатуПокупателюТовары.Ссылка.ДоговорКонтрагента.ВидДоговора.Порядок КАК ВидДоговора,
	//				   |	СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС,
	//				   |	СчетНаОплатуПокупателюТовары.Ссылка.УчитыватьНДС,
	//				   |	СчетНаОплатуПокупателюТовары.Ссылка.ВалютаДокумента.Код КАК КодВалюты,
	//				   |	СчетНаОплатуПокупателюТовары.Ссылка.Склад.Код КАК КодСклада
	//				   |ИЗ
	//				   |	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	//				   |ГДЕ
	//				   |	СчетНаОплатуПокупателюТовары.Ссылка.Дата МЕЖДУ &Период.ДатаНачала И &Период.ДатаОкончания
	//				   |	И СчетНаОплатуПокупателюТовары.Ссылка.Объект.Организация.Код = &КодОрганизации
	//				   |	И СчетНаОплатуПокупателюТовары.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	
	
	//	 Запрос.УстановитьПараметр("Период.ДатаНачала",НачалоДня(Период.ДатаНачала));
	//	Запрос.УстановитьПараметр("Период.ДатаОкончания",КонецДня(Период.ДатаОкончания));
	//	Запрос.УстановитьПараметр("КодОрганизации",КодОрганизации);
	//
	//	Выборка = Запрос.Выполнить().Выгрузить();
	//	
	//	Для каждого Стр из выборка цикл
	//   	 
	//   	СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
	//   	СтрокаСпискаДокументов.ДатаДок  = Стр.Ссылка.дата;
	//   	СтрокаСпискаДокументов.НомерДок = Стр.Ссылка.номер;
	//   	СтрокаСпискаДокументов.Контрагент = Стр.КонтрагентНаименование;
	//   	СтрокаСпискаДокументов.Сумма = Стр.Сумма;
	//   	СтрокаСпискаДокументов.СуммаНДС = Стр.СуммаНДС;
	//   	СтрокаСпискаДокументов.Документа = "Счет на оплату пок.";
	//   	СтрокаСпискаДокументов.Флаг = истина;
	//   	СтрокаСпискаДокументов.ПризнакПрихода = 4;
	//   	СтрокаСпискаДокументов.КодКонтрагента = Стр.КодКонтрагента;
	//   	СтрокаСпискаДокументов.ИНН  = Стр.ИНН;
	//   	СтрокаСпискаДокументов.НаименованиеДоговора  = Стр.ДоговорНаименование;
	//   	СтрокаСпискаДокументов.КодДоговора      = Стр.ДоговорКод;
	//   	СтрокаСпискаДокументов.ТипДоговора      = Стр.ВидДоговора;
	//   	СтрокаСпискаДокументов.СуммаВключаетНДС = Стр.СуммаВключаетНДС;
	//   	СтрокаСпискаДокументов.УчитыватьНДС     = Стр.УчитыватьНДС;
	//	   СтрокаСпискаДокументов.ВалютаДоговора   = Стр.КодВалюты;
	//   	СтрокаСпискаДокументов.КодСклада        = Стр.КодСклада;	
	//   	
	
	// 
	//   	СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
	//   	СтрокаСпискаНоменклатуры._ДатаДок = Стр.Ссылка.дата;
	//   	СтрокаСпискаНоменклатуры._КодНом  = Стр.КодНом;
	//   	СтрокаСпискаНоменклатуры._Номенклатура = Стр.Номенклатура.Наименование;
	//   	СтрокаСпискаНоменклатуры._НомерДок = Стр.ссылка.Номер;
	//   	СтрокаСпискаНоменклатуры._Сумма    = Стр.Сумма;
	//   	СтрокаСпискаНоменклатуры._СуммаНДС = Стр.СуммаНДС;
	//   	СтрокаСпискаНоменклатуры._Цена     = Стр.Цена;
	//   	СтрокаСпискаНоменклатуры._Количество = Стр.Количество;
	//   	СтрокаСпискаНоменклатуры._Артикул    = Стр.Артикул;
	//   	
	//   КонецЦикла;	 
	
	//   
	
	
КонецПроцедуры	

Процедура ЗаказыПокупателей(Команда)
	
	//   Если Объект.СписокДокументов.Количество()>0 тогда
	//   	Объект.СписокДокументов.Очистить();
	//   КонецЕсли;	
	//   
	//   Если Объект.СписокНоменклатуры.Количество()>0 тогда
	//   	Объект.СписокНоменклатуры.Очистить();
	//   КонецЕсли;	
	
	//   
	//   сообщить("начало подключения:"+ТекущаяДата());	
	//   V81 = Новый COMОбъект("V82.Application");
	//   Попытка 
	//   	//Открытие = V81.Connect("Srvr="""+"ndc02"+""";Ref="""+"UTAPL"+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//   	//Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//	  	//Открытие = V81.Connect("File="""+ИмяСервера+""";Usr="""+ИмяБазы+""";Pwd="""+Пароль+""";");
	//   	//Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	
	
	//   Исключение
	//   	Предупреждение("База данных не открыта!");
	//   	возврат;
	//   КонецПопытки;
	//   
	//   Попытка
	//   	Запрос8 = V81.NewObject("Запрос");
	//   Исключение
	//   	Сообщить(ОписаниеОшибки());
	//   	Возврат;
	//   КонецПопытки;
	//   
	//   		  
	//   Запрос8.Текст = "ВЫБРАТЬ
	//				   |	СчетНаОплатуПокупателюУслуги.Ссылка.Дата,
	//				   |	СчетНаОплатуПокупателюУслуги.Ссылка.Номер,
	//				   |	СчетНаОплатуПокупателюУслуги.Содержание,
	//				   |	СчетНаОплатуПокупателюУслуги.Номенклатура.Наименование,
	//				   |	СчетНаОплатуПокупателюУслуги.Количество,
	//				   |	СчетНаОплатуПокупателюУслуги.Цена,
	//				   |	СчетНаОплатуПокупателюУслуги.Сумма,
	//				   |	СчетНаОплатуПокупателюУслуги.СуммаНДС,
	//				   |	СчетНаОплатуПокупателюУслуги.Ссылка.СуммаВключаетНДС,
	//				   |	СчетНаОплатуПокупателюУслуги.Ссылка.УчитыватьНДС,
	//				   |	СчетНаОплатуПокупателюУслуги.Номенклатура.Код,
	//				   |	СчетНаОплатуПокупателюУслуги.Ссылка.Контрагент.Наименование,
	//				   |	СчетНаОплатуПокупателюУслуги.Ссылка.Контрагент.Код,
	//				   |	СчетНаОплатуПокупателюУслуги.Ссылка.ДоговорКонтрагента.Код КАК ДоговорКод,
	//				   |	СчетНаОплатуПокупателюУслуги.Ссылка.ДоговорКонтрагента.Наименование КАК ДоговорНаименование
	//				   |ИЗ
	//				   |	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуПокупателюУслуги
	//				   |ГДЕ
	//				   |	СчетНаОплатуПокупателюУслуги.Ссылка.Дата МЕЖДУ &Начдата И &Период.ДатаОкончания";
	
	
	
	//	 Запрос8.УстановитьПараметр("Период.ДатаНачала",НачалоДня(Период.ДатаНачала));
	//	Запрос8.УстановитьПараметр("Период.ДатаОкончания",КонецДня(Период.ДатаОкончания));
	//	Запрос8.УстановитьПараметр("КодОрганизации",КодОрганизации);
	//
	//	Выборка = Запрос8.Выполнить().Выгрузить();
	//	
	//	Для каждого Стр из выборка цикл
	//   	 
	//   	СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
	//   	СтрокаСпискаДокументов.ДатаДок  = Стр.дата;
	//   	СтрокаСпискаДокументов.НомерДок = Стр.номер;
	//   	СтрокаСпискаДокументов.Контрагент = Стр.КонтрагентНаименование;
	//   	СтрокаСпискаДокументов.Сумма = Стр.Сумма;
	//   	СтрокаСпискаДокументов.СуммаНДС = Стр.СуммаНДС;
	//   	СтрокаСпискаДокументов.Документа = "Счет на оплату пок.";
	//   	СтрокаСпискаДокументов.Флаг           = истина;
	//   	СтрокаСпискаДокументов.ПризнакПрихода = 4;
	//   	СтрокаСпискаДокументов.КодКонтрагента        = Стр.КонтрагентКод;
	//   	СтрокаСпискаДокументов.НаименованиеДоговора  = Стр.ДоговорНаименование;
	//   	СтрокаСпискаДокументов.КодДоговора      = Стр.ДоговорКод;
	//   	СтрокаСпискаДокументов.СуммаВключаетНДС = Стр.СуммаВключаетНДС;
	//   	СтрокаСпискаДокументов.УчитыватьНДС     = Стр.УчитыватьНДС;
	//   	
	
	// 
	//   	СтрокаСпискаНоменклатуры          = Объект.СписокУслуг.Добавить();
	//   	СтрокаСпискаНоменклатуры.ДатаДок_ = Стр.дата;
	//   	СтрокаСпискаНоменклатуры.КодУсл_  = Стр.НоменклатураКод;
	//   	СтрокаСпискаНоменклатуры.Услуга_  = Стр.НоменклатураНаименование;
	//   	СтрокаСпискаНоменклатуры.НомерДок_ = Стр.Номер;
	//   	СтрокаСпискаНоменклатуры.Сумма_    = Стр.Сумма;
	//   	СтрокаСпискаНоменклатуры.СуммаНДС_ = Стр.СуммаНДС;
	//   	
	//   КонецЦикла;
	//   
	//   ЗаполнитьСчетамиПоТоварам(Запрос8);
	//	
	//   Объект.СписокДокументов.Свернуть("ДатаДок,НомерДок,Контрагент,Документа,Флаг,ПризнакПрихода,КодКонтрагента, ИНН,НаименованиеДоговора,КодДоговора,ТипДоговора,СуммаВключаетНДС,УчитыватьНДС,ВалютаДоговора,КодСклада","Сумма,СуммаНДС");
	//   
КонецПроцедуры

Процедура ЗаполнитьПеремещениями()
	//   
	//   Если Объект.СписокДокументов.Количество()>0 тогда
	//   	Объект.СписокДокументов.Очистить();
	//   КонецЕсли;	
	//   
	//   Если Объект.СписокНоменклатуры.Количество()>0 тогда
	//   	Объект.СписокНоменклатуры.Очистить();
	//   КонецЕсли;	
	
	//   
	//   сообщить("начало подключения:"+ТекущаяДата());	
	//   V81 = Новый COMОбъект("V82.Application");
	//   Попытка 
	//   	//Открытие = V81.Connect("Srvr="""+"ndc02"+""";Ref="""+"UTAPL"+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//   	//Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//   	//Открытие = V81.Connect("File="""+ИмяСервера+""";Usr="""+ИмяБазы+""";Pwd="""+Пароль+""";");
	//   	//  Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	//   Исключение
	//   	Предупреждение("База данных не открыта!");
	//   	возврат;
	//   КонецПопытки;
	//   
	//   Попытка
	//   	Запрос8 = V81.NewObject("Запрос");
	//   Исключение
	//   	Сообщить(ОписаниеОшибки());
	//   	Возврат;
	//   КонецПопытки;
	//   
	//   		  
	//   Запрос8.Текст = "ВЫБРАТЬ
	//				   |	ПеремещениеТоваровТовары.Ссылка.Номер,
	//				   |	ПеремещениеТоваровТовары.Ссылка.Дата,
	//				   |	ПеремещениеТоваровТовары.Номенклатура.Код КАК КодНом,
	//				   |	ПеремещениеТоваровТовары.Номенклатура.Наименование КАК Номенклатура,
	//				   |	ПеремещениеТоваровТовары.Номенклатура.Артикул КАК Артикул,
	//				   |	ПеремещениеТоваровТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	//				   |	ПеремещениеТоваровТовары.Коэффициент,
	//				   |	ПеремещениеТоваровТовары.Количество,
	//				   |	ПеремещениеТоваровТовары.Ссылка.СкладПолучатель.Код КАК КодСкладаПолучателя,
	//				   |	ПеремещениеТоваровТовары.Ссылка.СкладОтправитель.Код КАК КодСкладаОтправителя,
	//				   |	ВЫРАЗИТЬ(ПеремещениеТоваровТовары.Ссылка.Комментарий КАК СТРОКА) КАК Комментарий
	//				   |ИЗ
	//				   |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	//				   |ГДЕ
	//				   |	ПеремещениеТоваровТовары.Ссылка.Дата МЕЖДУ &Начдата И &Период.ДатаОкончания
	//				   |	И ПеремещениеТоваровТовары.Ссылка.Проведен = ИСТИНА";
	
	//   				
	
	//	 Запрос8.УстановитьПараметр("Период.ДатаНачала",НачалоДня(Период.ДатаНачала));
	//	Запрос8.УстановитьПараметр("Период.ДатаОкончания",КонецДня(Период.ДатаОкончания));
	//	Запрос8.УстановитьПараметр("КодОрганизации",КодОрганизации);
	//
	//	Выборка = Запрос8.Выполнить().Выгрузить();
	//	
	//	Для каждого Стр из выборка цикл
	//   	 
	//   	СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
	//   	СтрокаСпискаДокументов.ДатаДок  = Стр.дата;
	//   	СтрокаСпискаДокументов.НомерДок = Стр.номер;
	//   	СтрокаСпискаДокументов.Документа = "Перемещение ТМЦ";
	//   	СтрокаСпискаДокументов.Флаг = истина;
	//   	СтрокаСпискаДокументов.ПризнакПрихода = 6;
	//   	СтрокаСпискаДокументов.КодСклада     = Стр.КодСкладаОтправителя;
	//   	СтрокаСпискаДокументов.КодСкладаПолучателя =  Стр.КодСкладаПолучателя ;
	//   	СтрокаСпискаДокументов.Комментарий  =  Стр.Комментарий;
	
	// 
	//   	СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
	//   	СтрокаСпискаНоменклатуры._ДатаДок = Стр.Дата;
	//   	СтрокаСпискаНоменклатуры._КодНом  = Стр.КодНом;
	//   	СтрокаСпискаНоменклатуры._Номенклатура = Стр.Номенклатура;
	//   	СтрокаСпискаНоменклатуры._НомерДок = Стр.Номер;
	//   	СтрокаСпискаНоменклатуры._Количество = Стр.Количество;
	//   	СтрокаСпискаНоменклатуры._Артикул    = Стр.Артикул;
	//   	
	//   КонецЦикла;	 
	//	
	//   Объект.СписокДокументов.Свернуть("ДатаДок,НомерДок,Контрагент,Документа,Флаг,ПризнакПрихода,КодКонтрагента, ИНН,НаименованиеДоговора,КодДоговора,КодСклада,КодСкладаПолучателя,Комментарий","Сумма,СуммаНДС");
	//   
	//   //ЗагрузитьКомплектацииТМЦ();
	//   //ЗагрузитьСписанияТМЦ();
	//	
КонецПроцедуры

Процедура ЗагрузитьКомплектацииТМЦ()
	
	//	//Если Объект.СписокДокументов.Количество()>0 тогда
	//	//	Объект.СписокДокументов.Очистить();
	//	//КонецЕсли;	
	//	//
	//	//Если Объект.СписокНоменклатуры.Количество()>0 тогда
	//	//	Объект.СписокНоменклатуры.Очистить();
	//	//КонецЕсли;	
	
	//	
	//	сообщить("начало подключения:"+ТекущаяДата());	
	//	V81 = Новый COMОбъект("V82.Application");
	//	Попытка 
	//		//Открытие = V81.Connect("Srvr="""+"ndc02"+""";Ref="""+"UTAPL"+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//		//Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//		//Открытие = V81.Connect("File="""+ИмяСервера+""";Usr="""+ИмяБазы+""";Pwd="""+Пароль+""";");
	//		//Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	
	//	Исключение
	//		Предупреждение("База данных не открыта!");
	//		возврат;
	//	КонецПопытки;
	//	
	//	Попытка
	//		Запрос8 = V81.NewObject("Запрос");
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//		Возврат;
	//	КонецПопытки;
	//	
	//			  
	//	Запрос8.Текст = "ВЫБРАТЬ
	//					|	КомплектацияНоменклатурыКомплектующие.Номенклатура.Код КАК МатериалКод,
	//					|	КомплектацияНоменклатурыКомплектующие.Номенклатура.Наименование КАК МатериалНаименование,
	//					|	КомплектацияНоменклатурыКомплектующие.Количество КАК КолМат,
	//					|	КомплектацияНоменклатурыКомплектующие.Ссылка.Номер,
	//					|	КомплектацияНоменклатурыКомплектующие.Ссылка.Дата,
	//					|	КомплектацияНоменклатурыКомплектующие.Ссылка.Объект.Организация.Код,
	//					|	КомплектацияНоменклатурыКомплектующие.Ссылка.Номенклатура.Код КАК НоменклатураКод,
	//					|	КомплектацияНоменклатурыКомплектующие.Ссылка.Количество КАК Количество,
	//					|	КомплектацияНоменклатурыКомплектующие.Ссылка.Склад.Код КАК КодСклада,
	//					|	КомплектацияНоменклатурыКомплектующие.Номенклатура.Артикул КАК Артикул,
	//					|	КомплектацияНоменклатурыКомплектующие.Ссылка.Номенклатура.Наименование
	//					|ИЗ
	//					|	Документ.КомплектацияНоменклатуры.Комплектующие КАК КомплектацияНоменклатурыКомплектующие
	//					|ГДЕ
	//					|	КомплектацияНоменклатурыКомплектующие.Ссылка.Проведен = ИСТИНА
	//					|	И КомплектацияНоменклатурыКомплектующие.Ссылка.Дата МЕЖДУ &Период.ДатаНачала И &Период.ДатаОкончания
	//					|	И КомплектацияНоменклатурыКомплектующие.Ссылка.Объект.Организация.Код = &КодОрганизации";
	
	
	
	// 	 Запрос8.УстановитьПараметр("Период.ДатаНачала",НачалоДня(Период.ДатаНачала));
	//	 Запрос8.УстановитьПараметр("Период.ДатаОкончания",КонецДня(Период.ДатаОкончания));
	//	 Запрос8.УстановитьПараметр("КодОрганизации",КодОрганизации);
	// 
	//	 Выборка = Запрос8.Выполнить().Выгрузить();
	//	 
	//	 Для каждого Стр из выборка цикл
	//		 
	//		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
	//		СтрокаСпискаДокументов.ДатаДок   = Стр.дата;
	//		СтрокаСпискаДокументов.НомерДок  = Стр.номер;
	//		СтрокаСпискаДокументов.Документа = "Комплектация ТМЦ";
	//		СтрокаСпискаДокументов.Флаг      = истина;
	//		СтрокаСпискаДокументов.ПризнакПрихода = 7; //это комплектации
	//		СтрокаСпискаДокументов.КодСклада       = Стр.КодСклада;
	//		СтрокаСпискаДокументов.КодНоменклатуры = Стр.НоменклатураКод;
	//		СтрокаСпискаДокументов.КолНом          = Стр.Количество;
	//		//СтрокаСпискаДокументов.ЕдИзмНом        = Стр.ЕдиницаИзмерения;
	//		СтрокаСпискаДокументов.Номенклатура    = Стр.НоменклатураНаименование;
	
	//  
	//		СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
	//		СтрокаСпискаНоменклатуры._ДатаДок      = Стр.Дата;
	//		СтрокаСпискаНоменклатуры._КодНом       = Стр.МатериалКод;
	//		СтрокаСпискаНоменклатуры._Номенклатура = Стр.МатериалНаименование;
	//		СтрокаСпискаНоменклатуры._НомерДок     = Стр.Номер;
	//		СтрокаСпискаНоменклатуры._Количество   = Стр.КолМат;
	//		СтрокаСпискаНоменклатуры._Артикул      = Стр.Артикул;
	//		//СтрокаСпискаНоменклатуры._Единица      = Стр.ЕдИзмМатериала;
	// 		
	//	КонецЦикла;	 
	//	 
	//	 Объект.СписокДокументов.Свернуть("ДатаДок,НомерДок,Контрагент,Документа,Флаг,ПризнакПрихода,КодКонтрагента, ИНН,НаименованиеДоговора,КодДоговора,КодСклада,КодСкладаПолучателя,КодНоменклатуры,КолНом,ЕдИзмНом,Номенклатура","Сумма,СуммаНДС");
	// 	
КонецПроцедуры

Процедура ЗагрузитьСписанияТМЦ()
	//	
	//   сообщить("начало подключения:"+ТекущаяДата());	
	//   
	//   Объект.СписокДокументов.Очистить();
	//   Объект.СписокНоменклатуры.Очистить();
	//   
	//   V81 = Новый COMОбъект("V82.Application");
	//   Попытка 
	//   	//Открытие = V81.Connect("Srvr="""+"ndc02"+""";Ref="""+"UTAPL"+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//   	//Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//   Исключение
	//   	Предупреждение("База данных не открыта!");
	//   	возврат;
	//   КонецПопытки;
	//   
	//   Попытка
	//   	Запрос8 = V81.NewObject("Запрос");
	//   Исключение
	//   	Сообщить(ОписаниеОшибки());
	//   	Возврат;
	//   КонецПопытки;
	//   
	//   		  
	//   Запрос8.Текст = "ВЫБРАТЬ
	//				   |	СписаниеТоваровТовары.Ссылка.Номер,
	//				   |	СписаниеТоваровТовары.Ссылка.Дата,
	//				   |	СписаниеТоваровТовары.Номенклатура.Код,
	//				   |	СписаниеТоваровТовары.Номенклатура.Наименование,
	//				   |	СписаниеТоваровТовары.Количество,
	//				   |	СписаниеТоваровТовары.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	//				   |	СписаниеТоваровТовары.Ссылка.Склад.Код КАК КодСклада,
	//				   |	СписаниеТоваровТовары.Номенклатура.Артикул КАК Артикул,
	//				   |	ВЫРАЗИТЬ(СписаниеТоваровТовары.Ссылка.Комментарий КАК СТРОКА) КАК Комментарий
	//				   |ИЗ
	//				   |	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	//				   |ГДЕ
	//				   |	СписаниеТоваровТовары.Ссылка.Проведен = ИСТИНА
	//				   |	И СписаниеТоваровТовары.Ссылка.Дата МЕЖДУ &Период.ДатаНачала И &Период.ДатаОкончания
	//				   |	И СписаниеТоваровТовары.Ссылка.ОтражатьВБухгалтерскомУчете = ИСТИНА";
	
	
	//	 Запрос8.УстановитьПараметр("Период.ДатаНачала",НачалоДня(Период.ДатаНачала));
	//	Запрос8.УстановитьПараметр("Период.ДатаОкончания",КонецДня(Период.ДатаОкончания));
	//
	//	Выборка = Запрос8.Выполнить().Выгрузить();
	//	
	//	Для каждого Стр из выборка цикл
	//   	 
	//   	СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
	//   	СтрокаСпискаДокументов.ДатаДок   = Стр.дата;
	//   	СтрокаСпискаДокументов.НомерДок  = Стр.номер;
	//   	СтрокаСпискаДокументов.Документа = "Списание ТМЦ";
	//   	СтрокаСпискаДокументов.Флаг      = истина;
	//   	СтрокаСпискаДокументов.ПризнакПрихода = 8; //это списание
	//   	СтрокаСпискаДокументов.КодСклада       = Стр.КодСклада;
	//   	СтрокаСпискаДокументов.Комментарий     =  Стр.Комментарий;
	//   	
	//   	
	//   	СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
	//   	СтрокаСпискаНоменклатуры._ДатаДок      = Стр.Дата;
	//   	СтрокаСпискаНоменклатуры._КодНом       = Стр.НоменклатураКод;
	//   	СтрокаСпискаНоменклатуры._Номенклатура = Стр.НоменклатураНаименование;
	//   	СтрокаСпискаНоменклатуры._НомерДок     = Стр.Номер;
	//   	СтрокаСпискаНоменклатуры._Количество   = Стр.Количество;
	//   	СтрокаСпискаНоменклатуры._Артикул      = Стр.Артикул;
	//   	СтрокаСпискаНоменклатуры._Единица      = Стр.ЕдиницаИзмерения;
	//		
	//   КонецЦикла;	 
	//	
	//	Объект.СписокДокументов.Свернуть("ДатаДок,НомерДок,Контрагент,Документа,Флаг,ПризнакПрихода,КодКонтрагента, ИНН,НаименованиеДоговора,КодДоговора,КодСклада,КодСкладаПолучателя,КодНоменклатуры,КолНом,ЕдИзмНом,Номенклатура,Комментарий","Сумма,СуммаНДС");
	//	
	
КонецПроцедуры

Процедура ЗагрузкаВозвратовОтПокупателя()
	
	//   сообщить("начало подключения:"+ТекущаяДата());	
	//   
	//   Объект.СписокДокументов.Очистить();
	//   Объект.СписокНоменклатуры.Очистить();
	//   
	//   V81 = Новый COMОбъект("V82.Application");
	//   Попытка 
	//   	//Открытие = V81.Connect("Srvr="""+"ndc02"+""";Ref="""+"UTAPL"+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//   	Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//   Исключение
	//   	Предупреждение("База данных не открыта!");
	//   	возврат;
	//   КонецПопытки;
	//   
	//   Попытка
	//   	Запрос8 = V81.NewObject("Запрос");
	//   Исключение
	//   	Сообщить(ОписаниеОшибки());
	//   	Возврат;
	//   КонецПопытки;
	//   
	//   		  
	//   Запрос8.Текст = "ВЫБРАТЬ
	//				   |	ВозвратТоваровОтПокупателяТовары.Ссылка.Номер,
	//				   |	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата,
	//				   |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование КАК Номенклатура,
	//				   |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Код,
	//				   |	ВозвратТоваровОтПокупателяТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование КАК ЕдиницаИзмерения,
	//				   |	ВозвратТоваровОтПокупателяТовары.Количество,
	//				   |	ВозвратТоваровОтПокупателяТовары.Цена,
	//				   |	ВозвратТоваровОтПокупателяТовары.Сумма,
	//				   |	ВозвратТоваровОтПокупателяТовары.СуммаНДС,
	//				   |	ВозвратТоваровОтПокупателяТовары.Ссылка.СуммаВключаетНДС,
	//				   |	ВозвратТоваровОтПокупателяТовары.Ссылка.УчитыватьНДС,
	//				   |	ВозвратТоваровОтПокупателяТовары.Ссылка.Контрагент.Наименование КАК Контрагент,
	//				   |	ВозвратТоваровОтПокупателяТовары.Ссылка.Контрагент.Код,
	//				   |	ВозвратТоваровОтПокупателяТовары.Ссылка.ДоговорКонтрагента.Наименование КАК ДоговорКонтрагента,
	//				   |	ВозвратТоваровОтПокупателяТовары.Склад.Код,
	//				   |	ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул КАК Артикул,
	//				   |	ВозвратТоваровОтПокупателяТовары.Ссылка.Контрагент.ИНН КАК ИНН,
	//				  // |	ВозвратТоваровОтПокупателяТовары.РеализованКомиссионером КАК РеалКомисс,					
	//				   |	ВозвратТоваровОтПокупателяТовары.Ссылка.Комментарий
	//				   |ИЗ
	//				   |	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	//				   |ГДЕ
	//				   |	ВозвратТоваровОтПокупателяТовары.Ссылка.Дата МЕЖДУ &Период.ДатаНачала И &Период.ДатаОкончания
	//				   |	И ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен = ИСТИНА";
	
	
	
	
	//	 Запрос8.УстановитьПараметр("Период.ДатаНачала",НачалоДня(Период.ДатаНачала));
	//	Запрос8.УстановитьПараметр("Период.ДатаОкончания",КонецДня(Период.ДатаОкончания));
	//
	//	Выборка = Запрос8.Выполнить().Выгрузить();
	//	
	//	Для каждого Стр из выборка цикл           
	//   	 
	//   	СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
	//   	СтрокаСпискаДокументов.ДатаДок   = Стр.дата;
	//   	СтрокаСпискаДокументов.НомерДок  = Стр.номер;
	//   	СтрокаСпискаДокументов.Документа = "Возврат товара пок.";
	//   	СтрокаСпискаДокументов.Флаг      = истина;
	//   	СтрокаСпискаДокументов.ПризнакПрихода = 9; //это возврат
	//   	СтрокаСпискаДокументов.КодСклада            = Стр.СкладКод;
	//   	СтрокаСпискаДокументов.Контрагент           = Стр.Контрагент;
	//   	СтрокаСпискаДокументов.КодКонтрагента       = Стр.КонтрагентКод;
	//   	СтрокаСпискаДокументов.инн                  = Стр.ИНН;
	//   	СтрокаСпискаДокументов.Комментарий          = Стр.Комментарий;
	//   	СтрокаСпискаДокументов.УчитыватьНДС         = Стр.УчитыватьНДС;
	//   	СтрокаСпискаДокументов.СуммаВключаетНДС     = Стр.СуммаВключаетНДС;
	//   	СтрокаСпискаДокументов.НаименованиеДоговора = Стр.ДоговорКонтрагента;
	//   	СтрокаСпискаДокументов.Сумма                = Стр.Сумма;
	//   	СтрокаСпискаДокументов.СуммаНДС             = Стр.суммаНДС;
	//   	
	//   	
	//   	СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
	//   	СтрокаСпискаНоменклатуры._ДатаДок      = Стр.Дата;
	//   	СтрокаСпискаНоменклатуры._КодНом       = Стр.НоменклатураКод;
	//   	СтрокаСпискаНоменклатуры._Номенклатура = Стр.Номенклатура;
	//   	СтрокаСпискаНоменклатуры._НомерДок     = Стр.Номер;
	//   	СтрокаСпискаНоменклатуры._Количество   = Стр.Количество;
	//   	СтрокаСпискаНоменклатуры._Артикул      = Стр.Артикул;
	//   	СтрокаСпискаНоменклатуры._Единица      = Стр.ЕдиницаИзмерения;
	//   	СтрокаСпискаНоменклатуры._Сумма        = Стр.Сумма;
	//   	СтрокаСпискаНоменклатуры._Цена         = Стр.Цена;
	//   	СтрокаСпискаНоменклатуры._СуммаНДС     = Стр.СуммаНДС;
	//   	//СтрокаСпискаНоменклатуры._РеалКомиссионером = Стр.РеалКомисс;
	//		
	//   КонецЦикла;	 
	//	
	//	Объект.СписокДокументов.Свернуть("ДатаДок,НомерДок,Контрагент,Документа,Флаг,ПризнакПрихода,КодКонтрагента, ИНН,НаименованиеДоговора,КодДоговора,КодСклада,КодСкладаПолучателя,КодНоменклатуры,КолНом,ЕдИзмНом,Номенклатура,Комментарий,СуммаВключаетНДС,УчитыватьНДС","Сумма,СуммаНДС");
	//	
	
	//   
	
КонецПроцедуры

//-----------------------------------------
//процедуры заполнения табличный частей документов

Процедура ЗаполнениеТабличнойЧастиПоступления(ТекДок, НомерДокумента)
	
	Для каждого Стр из Объект.СписокНоменклатуры цикл
		
		Если СокрЛП(НомерДокумента) = СокрЛП(Стр._НомерДок) тогда
			
			
			
			Ном = НайтиСоздатьНоменклатуру(Стр._КодНом,Стр._Номенклатура,Стр._Единица,Стр._Артикул);
			
			
			СтрокаТЧ = ТекДок.Товары.Добавить();
			СтрокаТЧ.Номенклатура = Ном;
			СтрокаТЧ.ЕдиницаИзмерения = Ном.БазоваяЕдиницаИзмерения;
			СтрокаТЧ.Цена = Стр._Цена;
			строкаТЧ.Сумма = Стр._Сумма;
			СтрокаТЧ.СуммаНДС = Стр._СуммаНДС;
			СтрокаТЧ.Количество = Стр._Количество;
			СтрокаТЧ.Коэффициент = 1;
			Если стр._СуммаНДС = 0 тогда
				СтрокаТЧ.СтавкаНДС = перечисления.СтавкиНДС.БезНДС;
			Иначе	
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ;
			КонецЕсли;
			Если Объект.Склад = справочники.Склады.НайтиПоКоду("000000001") тогда
				СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
			Иначе
				СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
			КонецЕсли;
			
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
			СтрокаТЧ.ОтражениеВУСН = перечисления.ОтражениеВУСН.Принимаются;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	
	
КонецПроцедуры	

Процедура ЗаполнениеТабличнойЧастиПоступленияУслуги(ТекДок, НомерДокумента)
	
	Для каждого Стр из Объект.СписокУслуг цикл
		
		Если СокрЛП(НомерДокумента) = СокрЛП(Стр.НомерДок_) тогда
			
			РезНом = ПоискНоменклатуры(Стр.КодУсл_);
			
			Если НЕ ЗначениеЗаполнено(РезНом) тогда
				сообщить("номенклатура // "+Стр.Услуга_+"\\ не найдена в справочнике!");
				НовыйЭлНом = Справочники.Номенклатура.СоздатьЭлемент();
				НовыйЭлНом.ID  = Стр.КодУсл_;
				НовыйЭлНом.Родитель = Справочники.Номенклатура.НайтиПоКоду("00000000081");
				НовыйЭлНом.Наименование = Стр.Услуга_;
				НовыйЭлНом.Услуга       = истина;
				НовыйЭлНом.НаименованиеПолное = Стр.Услуга_;
				НовыйЭлНом.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				НовыйЭлНом.Комментарий = "#автоматически загружено из УТ";
				НовыйЭлНом.Записать();
				сообщить("записана как новый элемент!");
				Ном = НовыйЭлНом.Ссылка ;
			Иначе
				Ном = РезНом  ;
				сообщить("найдена номенклатура:"+Ном);
			КонецЕсли;	
			
			
			СтрокаТЧ              = ТекДок.Услуги.Добавить();
			СтрокаТЧ.Номенклатура = Ном;
			СтрокаТЧ.Содержание   = Стр.Услуга_;
			СтрокаТЧ.Цена         = Стр.Сумма_;
			СтрокаТЧ.Сумма        = Стр.Сумма_;
			СтрокаТЧ.СуммаНДС     = Стр.СуммаНДС_;
			СтрокаТЧ.Количество   = 1;
			Если стр.СуммаНДС_ = 0 тогда
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе	
				СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			КонецЕсли;
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
			СтрокаТЧ.СчетЗатрат   = ПланыСчетов.Хозрасчетный.РасходыНаПродажу;
			
			
		КонецЕсли;
		
	КонецЦикла;	
	
	
	
КонецПроцедуры	

#region old
//Процедура ЗаполнениеТабличнойЧастиПеремещения(ТекДок,НомерДокумента)
//	
//	Для каждого Стр из Объект.СписокНоменклатуры цикл
//		
//		Если СокрЛП(НомерДокумента) = СокрЛП(Стр._НомерДок) тогда
//			
//			//РезНом = ПоискНоменклатуры(Стр._КодНом);
//			//
//			//Если НЕ ЗначениеЗаполнено(РезНом) тогда
//			//	сообщить("номенклатура // "+Стр._Номенклатура+"\\ не найдена в справочнике!");
//			//	НовыйЭлНом = Справочники.Номенклатура.СоздатьЭлемент();
//			//	НовыйЭлНом.ID = Стр._КодНом;
//			//	
//			//	Если ЗначениеЗаполнено(КодГруппыНоменклатуры)  тогда
//			//		НовыйЭлНом.Родитель = Справочники.Номенклатура.НайтиПоКоду(КодГруппыНоменклатуры);
//			//	КонецЕсли;

//			//	НовыйЭлНом.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(СокрЛП(Стр._Единица));
//			//	НовыйЭлНом.Наименование = Стр._Номенклатура+""+"арт."+Стр._Артикул;
//			//	НовыйЭлНом.НаименованиеПолное = Стр._Номенклатура+""+"арт."+Стр._Артикул;
//			//	НовыйЭлНом.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
//			//	НовыйЭлНом.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
//			//	НовыйЭлНом.Комментарий = СокрЛП(СтрЗаменить(Стр._Артикул," ",""));
//			//	НовыйЭлНом.Записать();
//			//	сообщить("записана как новый элемент!");
//			//	Ном = НовыйЭлНом.Ссылка ;
//			//Иначе
//			//	Ном = РезНом  ;
//			//	сообщить("найдена номенклатура:"+Ном);
//			//КонецЕсли;	
//			
//			Ном = НайтиСоздатьНоменклатуру(Стр._КодНом,Стр._Номенклатура,Стр._Единица,Стр._Артикул);
//			
//			СтрокаТЧ = ТекДок.Товары.Добавить();
//			СтрокаТЧ.Номенклатура      = Ном;
//			СтрокаТЧ.ЕдиницаИзмерения  = Ном.БазоваяЕдиницаИзмерения;
//			СтрокаТЧ.Количество        = Стр._Количество;
//			СтрокаТЧ.Коэффициент       = 1;
//			СтрокаТЧ.СчетУчета         = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
//			СтрокаТЧ.НовыйСчетУчета    = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;

//			
//		КонецЕсли;
//		
//	КонецЦикла;	
//	
//КонецПроцедуры	

//Процедура ЗаполнениеТабличнойЧастиСписания(ТекДок,НомерДокумента)
//	
//	Для каждого Стр из Объект.СписокНоменклатуры цикл
//		
//		Если СокрЛП(НомерДокумента) = СокрЛП(Стр._НомерДок) тогда
//			
//			РезНом = ПоискНоменклатуры(Стр._КодНом);
//			
//			Если НЕ ЗначениеЗаполнено(РезНом) тогда
//				сообщить("номенклатура // "+Стр._Номенклатура+"\\ не найдена в справочнике!");
//				НовыйЭлНом = Справочники.Номенклатура.СоздатьЭлемент();
//				НовыйЭлНом.ID = Стр._КодНом;
//				
//				Если ЗначениеЗаполнено(КодГруппыНоменклатуры)  тогда
//					НовыйЭлНом.Родитель = Справочники.Номенклатура.НайтиПоКоду(КодГруппыНоменклатуры);
//				КонецЕсли;

//				НовыйЭлНом.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(СокрЛП(Стр._Единица));
//				НовыйЭлНом.Наименование = Стр._Номенклатура+""+"арт."+Стр._Артикул;
//				НовыйЭлНом.НаименованиеПолное = Стр._Номенклатура+""+"арт."+Стр._Артикул;
//				НовыйЭлНом.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
//				НовыйЭлНом.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
//				НовыйЭлНом.Комментарий = СокрЛП(СтрЗаменить(Стр._Артикул," ",""));
//				НовыйЭлНом.Записать();
//				сообщить("записана как новый элемент!");
//				Ном = НовыйЭлНом.Ссылка ;
//			Иначе
//				Ном = РезНом  ;
//				сообщить("найдена номенклатура:"+Ном);
//			КонецЕсли;	
//			
//			СтрокаТЧ = ТекДок.Товары.Добавить();
//			СтрокаТЧ.Номенклатура      = Ном;
//			СтрокаТЧ.Количество        = Стр._Количество;
//			СтрокаТЧ.СчетУчета         = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
//			
//		КонецЕсли;
//		
//	КонецЦикла;	

//	
//КонецПроцедуры	

//Процедура ЗаполнениеТабличнойЧастиКомплектации(ТекДок,НомерДокумента)
//	
//	Для каждого Стр из Объект.СписокНоменклатуры цикл
//		
//		Если СокрЛП(НомерДокумента) = СокрЛП(Стр._НомерДок) тогда
//			
//			//РезНом = ПоискНоменклатуры(Стр._КодНом);
//			//
//			//Если НЕ ЗначениеЗаполнено(РезНом) тогда
//			//	сообщить("номенклатура // "+Стр._Номенклатура+"\\ не найдена в справочнике!");
//			//	НовыйЭлНом = Справочники.Номенклатура.СоздатьЭлемент();
//			//	НовыйЭлНом.ID = Стр._КодНом;
//			//	
//			//	Если ЗначениеЗаполнено(КодГруппыНоменклатуры)  тогда
//			//		НовыйЭлНом.Родитель = Справочники.Номенклатура.НайтиПоКоду(КодГруппыНоменклатуры);
//			//	КонецЕсли;

//			//	НовыйЭлНом.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(СокрЛП(Стр._Единица));
//			//	НовыйЭлНом.Наименование = Стр._Номенклатура+""+"арт."+Стр._Артикул;
//			//	НовыйЭлНом.НаименованиеПолное = Стр._Номенклатура+""+"арт."+Стр._Артикул;
//			//	НовыйЭлНом.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
//			//	НовыйЭлНом.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
//			//	НовыйЭлНом.Комментарий = СокрЛП(СтрЗаменить(Стр._Артикул," ",""));
//			//	НовыйЭлНом.Записать();
//			//	сообщить("записана как новый элемент!");
//			//	Ном = НовыйЭлНом.Ссылка ;
//			//Иначе
//			//	Ном = РезНом  ;
//			//	сообщить("найдена номенклатура:"+Ном);
//			//КонецЕсли;	
//			
//			Ном = НайтиСоздатьНоменклатуру(Стр._КодНом,Стр._Номенклатура,Стр._Единица,Стр._Артикул);
//			
//			СтрокаТЧ = ТекДок.Комплектующие.Добавить();
//			СтрокаТЧ.Номенклатура      = Ном;
//			СтрокаТЧ.Количество        = Стр._Количество;
//			СтрокаТЧ.СчетУчета         = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;

//			
//		КонецЕсли;
//		
//	КонецЦикла;	
//	
//КонецПроцедуры	
#endregion

Процедура ЗаполнениеТабличнойЧастиРеализации(ТекДок, НомерДокумента, ТипДоговора, Склад)
	
	ТекДок.Товары.Очистить();
	
	Для каждого Стр из Объект.СписокНоменклатуры цикл
		
		Если СокрЛП(НомерДокумента) = СокрЛП(Стр._НомерДок) тогда
			
			Ном = НайтиСоздатьНоменклатуру(Стр._КодНом,Стр._Номенклатура,Стр._Единица,Стр._Артикул) ;
			
			СтрокаТЧ = ТекДок.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Ном;
			СтрокаТЧ.ЕдиницаИзмерения = Ном.БазоваяЕдиницаИзмерения;
			СтрокаТЧ.Цена             = Стр._Цена;
			строкаТЧ.Сумма            = Стр._Сумма;
			СтрокаТЧ.СуммаНДС         = Стр._СуммаНДС;
			СтрокаТЧ.Количество       = Стр._Количество;
			СтрокаТЧ.СтавкаНДС        = Перечисления.СтавкиНДС.БезНДС;
			СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
			СтрокаТЧ.СчетДоходов              = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
			СтрокаТЧ.Субконто                 = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000005");
			СтрокаТЧ.СчетРасходов    = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
			СтрокаТЧ.СчетУчета       = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;			
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

#region old
//Процедура ЗаполнениеТабличнойЧастиРеализацииКомплектом(ТекДок, НомерДокумента, ТипДоговора, Склад)
//	
//	ТекДок.Товары.Очистить();
//	
//	Для каждого Стр из Объект.СписокНоменклатуры цикл
//		
//		Если СокрЛП(НомерДокумента) = СокрЛП(Стр._НомерДок) тогда
//			
//			Ном = НайтиСоздатьНоменклатуру(Стр._КодНом,Стр._Номенклатура,Стр._Единица,Стр._Артикул) ;
//			
//			СтрокаТЧ = ТекДок.Товары.Добавить();
//			СтрокаТЧ.Номенклатура     = Ном;
//			СтрокаТЧ.ЕдиницаИзмерения = Ном.БазоваяЕдиницаИзмерения;
//			СтрокаТЧ.Цена             = Стр._Цена;
//			строкаТЧ.Сумма            = Стр._Сумма;
//			СтрокаТЧ.СуммаНДС         = Стр._СуммаНДС;
//			СтрокаТЧ.Количество       = Стр._Количество;
//			СтрокаТЧ.СтавкаНДС        = Перечисления.СтавкиНДС.БезНДС;
//			СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
//			СтрокаТЧ.СчетДоходов              = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
//			СтрокаТЧ.Субконто                 = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
//			СтрокаТЧ.СчетРасходов    = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
//			СтрокаТЧ.СчетУчета       = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;			
//		
//		КонецЕсли;
//		
//	КонецЦикла;	
//	
//КонецПроцедуры	
#endregion

Процедура ЗаполнениеТабличнойЧастиВозвратаОтПокупателя(ТекДок, НомерДокумента, ТипДоговора, Склад)
	
	Для каждого Стр из Объект.СписокНоменклатуры цикл
		
		//Если СокрЛП(НомерДокумента) = СокрЛП(Стр._НомерДок) тогда
		//	
		//	Ном = НайтиСоздатьНоменклатуру(Стр._КодНом,Стр._Номенклатура,Стр._Единица,Стр._Артикул) ;
		//	
		//	СтрокаТЧ = ТекДок.Товары.Добавить();
		//	СтрокаТЧ.Номенклатура     = Ном;
		//	СтрокаТЧ.Цена             = Стр._Цена;
		//	строкаТЧ.Сумма            = Стр._Сумма;
		//	СтрокаТЧ.СуммаНДС         = Стр._СуммаНДС;
		//	СтрокаТЧ.Количество       = Стр._Количество;
		//	СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		//	СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		//	СтрокаТЧ.СчетДоходов     = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
		//	
		//	ЦенаСеб = НайтиСебестоимостьНоменклатуры(Ном,Склад);
		//	
		//	СтрокаТЧ.Себестоимость   = ЦенаСеб*СтрокаТЧ.Количество;
		//	СтрокаТЧ.Субконто        = ОпределениеНоменклатурнойГруппы(Склад,СтрокаТЧ.СтавкаНДС);
		//	СтрокаТЧ.СчетРасходов    = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
		//	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Товары", истина, истина);
		//
		//КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	


Процедура ЗаполнениеТабличнойЧастиОтчетаКомиссионера(ТекДок, НомерДокумента, ТипДоговора)
	
	Для каждого Стр из Объект.СписокНоменклатуры цикл
		
		Если СокрЛП(НомерДокумента) = СокрЛП(Стр._НомерДок) тогда
			
			Ном = НайтиСоздатьНоменклатуру(Стр._КодНом,Стр._Номенклатура,Стр._Единица,Стр._Артикул) ;
			
			
			СтрокаТЧ = ТекДок.Товары.Добавить();
			СтрокаТЧ.Номенклатура     = Ном;
			СтрокаТЧ.ЕдиницаИзмерения = Ном.БазоваяЕдиницаИзмерения;
			СтрокаТЧ.Цена             = Стр._Цена;
			строкаТЧ.Сумма            = Стр._Сумма;
			СтрокаТЧ.СуммаНДС         = Стр._СуммаНДС;
			СтрокаТЧ.ЦенаПередачи     = Стр._ЦенаПередачи;
			СтрокаТЧ.СуммаПередачи    = Стр._СуммаПередачи;
			СтрокаТЧ.Количество       = Стр._Количество;
			СтрокаТЧ.Коэффициент      = 1;
			СтрокаТЧ.СтавкаНДС        = Перечисления.СтавкиНДС.НДС18 ;
			СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
			СтрокаТЧ.СчетДоходов         = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
			СтрокаТЧ.СуммаВознаграждения = Стр._Вознаграждение;
			СтрокаТЧ.СуммаНДСВознаграждения = Стр._НДСвознагрждения;
			СтрокаТЧ.Субконто        = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
			СтрокаТЧ.СчетРасходов    = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
			СтрокаТЧ.СчетУчета       = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные;
			//ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Товары", истина, истина);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	


Процедура ЗаполнениеТабличнойЧастиУслуг(ТекДок, НомерДокумента)
	
	ТекДок.Услуги.Очистить();	
	
	Для каждого Стр из Объект.СписокУслуг цикл
		
		Если СокрЛП(НомерДокумента) = СокрЛП(Стр.НомерДок_) тогда
			
			РезНом = ПоискНоменклатуры(Стр.КодУсл_);
			//
			//Если НЕ ЗначениеЗаполнено(РезНом) тогда
			//	сообщить("номенклатура // "+Стр._Номенклатура+"\\ не найдена в справочнике!");
			//	НовыйЭлНом = Справочники.Номенклатура.СоздатьЭлемент();
			//	НовыйЭлНом.IDut = Стр._КодНом;
			//	Если ЗначениеЗаполнено(ГруппаУслуг)  тогда
			//		НовыйЭлНом.Родитель = Справочники.Номенклатура.НайтиПоКоду(ГруппаУслуг);
			//	КонецЕсли;
			//	НовыйЭлНом.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт.");
			//	НовыйЭлНом.Наименование = Стр.Услуга_;
			//	НовыйЭлНом.Услуга = истина;
			//	НовыйЭлНом.НаименованиеПолное = Стр.Услуга_;
			//	НовыйЭлНом.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			//	НовыйЭлНом.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
			//	НовыйЭлНом.Комментарий = СокрЛП(СтрЗаменить(Стр._Артикул," ",""));
			//	НовыйЭлНом.Записать();
			//	сообщить("записана как новый элемент!");
			//	Ном = НовыйЭлНом.Ссылка ;
			//Иначе
			Ном = РезНом  ;
			сообщить("найдена номенклатура:"+Ном);
			//КонецЕсли;	
			
			
			СтрокаТЧ = ТекДок.Услуги.Добавить();
			СтрокаТЧ.Содержание    = Ном.Наименование;
			СтрокаТЧ.Номенклатура  = Ном;
			СтрокаТЧ.Цена            = Стр.Сумма_;
			строкаТЧ.Сумма           = Стр.Сумма_;
			СтрокаТЧ.СуммаНДС        = стр.СуммаНДС_;
			СтрокаТЧ.Количество      = 1;
			//СтрокаТЧ.СтавкаНДС       = Перечисления.СтавкиНДС.НДС18;
			СтрокаТЧ.СтавкаНДС       = Перечисления.СтавкиНДС.БезНДС;
			СтрокаТЧ.СчетДоходов     = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
			//СтрокаТЧ.Субконто        = Справочники.НоменклатурныеГруппы.НайтиПоКоду(стр.Субконто1);
			СтрокаТЧ.Субконто        = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000005");
			СтрокаТЧ.СчетРасходов    = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
			СтрокаТЧ.СчетУчетаНДСПоРеализации    = ПланыСчетов.Хозрасчетный.Продажи_НДС;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	
	
КонецПроцедуры	

Процедура ЗаполнениеТабличнойЧастиСчета(ТекДок, НомерДокумента)
	
	Для каждого Стр из Объект.СписокНоменклатуры цикл
		
		Если СокрЛП(НомерДокумента) = СокрЛП(Стр._НомерДок) тогда
			
			ТекНом = НайтиСоздатьНоменклатуру(Стр._КодНом,Стр._Номенклатура,Стр._Единица,Стр._Артикул);
			
			СтрокаТЧ = ТекДок.Товары.Добавить();
			СтрокаТЧ.Номенклатура = ТекНом;
			СтрокаТЧ.Цена = Стр._Цена;
			строкаТЧ.Сумма = Стр._Сумма;
			СтрокаТЧ.СуммаНДС = Стр._СуммаНДС;
			СтрокаТЧ.Количество = Стр._Количество;
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	


Процедура ЗаполнениеТабличнойЧастиСчетаУслуги(ТекДок, НомерДокумента)
	
	Для каждого Стр из Объект.СписокУслуг цикл
		
		Если СокрЛП(НомерДокумента) = СокрЛП(Стр.НомерДок_) тогда
			
			ТекНом = НайтиСоздатьНоменклатуру(Стр.КодУсл_,Стр.Услуга_,"","");
			
			СтрокаТЧ = ТекДок.услуги.Добавить();
			СтрокаТЧ.Номенклатура = ТекНом;
			СтрокаТЧ.Цена = Стр.Сумма_;
			строкаТЧ.Сумма = Стр.Сумма_;
			СтрокаТЧ.СуммаНДС = Стр.СуммаНДС_;
			//СтрокаТЧ.Количество = Стр._Количество;
			СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 ;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

Процедура ТаблицнаяЧастьВозвратов(ТекДок,НомерДокумента)
	//	
	//	Для каждого Стр из Объект.СписокНоменклатуры цикл
	//		
	//		Если СокрЛП(НомерДокумента) = СокрЛП(Стр._НомерДок) тогда
	//			
	//			РезНом = ПоискНоменклатуры(Стр._КодНом);
	
	//			Если НЕ ЗначениеЗаполнено(РезНом) тогда
	//				сообщить("номенклатура // "+Стр._Номенклатура+"\\ не найдена в справочнике!");
	//				НовыйЭлНом = Справочники.Номенклатура.СоздатьЭлемент();
	//				НовыйЭлНом.ID = Стр._КодНом;
	//				НовыйЭлНом.Родитель = Справочники.Номенклатура.НайтиПоКоду("00000013330");
	//				НовыйЭлНом.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(СокрЛП(Стр._Единица));
	//				НовыйЭлНом.Наименование = Стр._Номенклатура+""+"арт."+Стр._Артикул;
	//				НовыйЭлНом.НаименованиеПолное = Стр._Номенклатура+""+"арт."+Стр._Артикул;
	//				НовыйЭлНом.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	//				НовыйЭлНом.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	//				НовыйЭлНом.Комментарий = СокрЛП(СтрЗаменить(Стр._Артикул," ",""));
	//				НовыйЭлНом.Записать();
	//				сообщить("записана как новый элемент!");
	//				Ном = НовыйЭлНом.Ссылка ;
	//			Иначе
	//				Ном = РезНом  ;
	//				сообщить("найдена номенклатура:"+Ном);
	//			КонецЕсли;	
	//			
	//			СтрокаТЧ = ТекДок.Товары.Добавить();
	//			СтрокаТЧ.Номенклатура = Ном;
	//			СтрокаТЧ.Цена         = Стр._Цена;
	//			строкаТЧ.Сумма        = Стр._Сумма;
	//			СтрокаТЧ.СуммаНДС     = Стр._СуммаНДС;
	//			СтрокаТЧ.Количество   = Стр._Количество;
	//			СтрокаТЧ.СтавкаНДС    = Перечисления.СтавкиНДС.НДС18 ;
	//			СтрокаТЧ.СчетУчета    = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле;
	//			
	//		КонецЕсли;
	//	КонецЦикла;	
	//	
КонецПроцедуры	

Процедура ЗаполнениеТЧкорректировки(ТЧ, НомерДок)
	
	Для каждого стр из Объект.СписокНоменклатуры цикл
		
		Если СокрЛП(НомерДок) = СокрЛП(Стр._НомерДок) тогда
			
			ТекНом = НайтиСоздатьНоменклатуру(стр._КодНом,стр._Номенклатура,"шт.","");	
			
			СтрокаТЧ                  = ТЧ.добавить();
			СтрокаТЧ.Номенклатура     = ТекНом;
			СтрокаТЧ.Количество       = стр._Количество;
			//СтрокаТЧ.ЕдиницаИзмерения = ТекНом.БазоваяЕдиницаИзмерения;
			СтрокаТЧ.СтавкаНДС        = Перечисления.СтавкиНДС.НДС18;
			СтрокаТЧ.Цена             = стр._Цена;
			СтрокаТЧ.Сумма            = стр._Сумма;
			СтрокаТЧ.СуммаНДС         = стр._СуммаНДС;
			СтрокаТЧ.ЦенаДоИзменения  = стр._ЦенаДо;
			СтрокаТЧ.СуммаДоИзменения = стр._СуммаДо;
			СтрокаТЧ.СуммаНДСДоИзменения = стр._СуммаНДСДо;
			СтрокаТЧ.КоличествоДоИзменения = стр._КоличествоДо;
			СтрокаТЧ.СчетУчета             = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
			СтрокаТЧ.СчетДоходов           = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
			СтрокаТЧ.СчетРасходов          = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
			СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
			СтрокаТЧ.СтавкаНДСДоИзменения     = Перечисления.СтавкиНДС.НДС18;
			Если Объект.Организация = Справочники.Организации.НайтиПоКоду("00009") тогда
				СтрокаТЧ.субконто                 = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000002");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьТЧ_АО(ТЧ, НомерДок)
	
	Если Объект.СписокНоменклатуры.Количество()>0 тогда
		Для каждого Стр из Объект.СписокНоменклатуры цикл
			Если Стр._НомерДок = НомерДок тогда
				
				//ТекНом = ПоискНоменклатуры(стр._КодНом);
				//ВидНом = Справочники.ВидыНоменклатуры.НайтиПоКоду("000000002");
				ТекНом       = НайтиСоздатьНоменклатуру(стр._КодНом,стр._Номенклатура,стр._Единица,стр._Артикул);
				ТекКонтрагент = СоздатьНайтиКонтрагента(стр.КодКонтрагента);
				
				СтрокаТЧ = ТЧ.Добавить();
				СтрокаТЧ.Номенклатура    = ТекНом;
				СтрокаТЧ.Количество   = стр._Количество;
				СтрокаТЧ.Цена         = стр._Цена;
				СтрокаТЧ.Сумма        = стр._Сумма;
				//СтрокаТЧ.СчетУчетаБУ  = ПланыСчетов.Хозрасчетный.НайтиПоКоду(стр.СчетУчета);
				//СтрокаТЧ.СчетУчетаНУ  = ПланыСчетов.Налоговый.НайтиПоКоду(стр.СчетУчета);
				СтрокаТЧ.ВидДокВходящий          = стр.ВидДокВходящий;
				СтрокаТЧ.НомерВходящегоДокумента = стр.НомерВходящегоДокумента;
				СтрокаТЧ.ДатаВходящегоДокумента  = стр.ДатаВходящегоДокумента;
				СтрокаТЧ.СчетУчета               = ПланыСчетов.Хозрасчетный.НайтиПоКоду(стр.СчетУчета);
				СтрокаТЧ.счетУчетаНДС            = ПланыСчетов.Хозрасчетный.НайтиПоКоду(стр.СчетУчетаНДС);
				СтрокаТЧ.Поставщик               = ТекКонтрагент;
				
				
				
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура  ЗаполнитьТЧ_прочее_АО(ТЧ_прочее, НомерДок)
	
	
	Если Объект.ПрочееАО.Количество()>0 тогда
		Для каждого Стр из Объект.ПрочееАО цикл
			Если Стр.НомерДока = НомерДок тогда
				
				//ВидНом = Справочники.ВидыНоменклатуры.НайтиПоКоду("000000002");
				
				//ТекНом = НайтиСоздатьНоменклатуру(стр.,стр._Номенклатура,стр._Единица,стр._Артикул,стр.НоменклатурнаяГруппа,ложь, ВидНом);
				Если ЗначениеЗаполнено(стр.КодКонтрагента) тогда
					ТекКонтрагент = СоздатьНайтиКонтрагента(стр.КодКонтрагента);
				Иначе
					ТекКонтрагент = "";
				КонецЕсли;
				
				СтрокаТЧ = ТЧ_прочее.Добавить();
				СтрокаТЧ.ВидДокВходящий           = стр.ВидДокумента;
				СтрокаТЧ.НомерВходящегоДокумента  = стр.НомерДокаВходящего;
				СтрокаТЧ.ДатаВходящегоДокумента   = стр.ДатаДокВходящего;
				СтрокаТЧ.Поставщик                = ТекКонтрагент; 
				СтрокаТЧ.Содержание               = стр.Содержание;
				//СтрокаТЧ.количество               = стр.Количество;
				//СтрокаТЧ.Цена                     = стр.Цена;
				СтрокаТЧ.Сумма                    = стр.Сумма;
				СтрокаТЧ.СчетЗатрат               = ПланыСчетов.Хозрасчетный.НайтиПоКоду(стр.СчетЗатрат);
				СтрокаТЧ.СчетЗатратНУ             = ПланыСчетов.Хозрасчетный.НайтиПоКоду(стр.СчетЗатрат);
				СтрокаТЧ.ПодразделениеЗатрат      = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(стр.Подразделение);
				Если СтрокаТЧ.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство тогда
					СтрокаТЧ.Субконто2       = Справочники.СтатьиЗатрат.НайтиПоНаименованию(стр.СтатьяЗатрат);
					СтрокаТЧ.Субконто1       = справочники.НоменклатурныеГруппы.НайтиПоКоду(стр.НоменклатурнаяГруппа);
					СтрокаТЧ.СубконтоНУ2     = Справочники.СтатьиЗатрат.НайтиПоКоду(стр.СтатьяЗатрат);
					СтрокаТЧ.СубконтоНУ1     = справочники.НоменклатурныеГруппы.НайтиПоКоду(стр.НоменклатурнаяГруппа);
					
					
				Иначеесли СтрокаТЧ.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы тогда
					СтрокаТЧ.Субконто1     = Справочники.СтатьиЗатрат.НайтиПоКоду(стр.Субконто2);
					СтрокаТЧ.СубконтоНУ1     = Справочники.СтатьиЗатрат.НайтиПоКоду(стр.Субконто2);
					
				Иначеесли СтрокаТЧ.СчетЗатрат = ПланыСчетов.Хозрасчетный.ИздержкиОбращения тогда
					
					СтрокаТЧ.Субконто1       = Справочники.СтатьиЗатрат.НайтиПоКоду(стр.Субконто1);
					СтрокаТЧ.СубконтоНУ1     = Справочники.СтатьиЗатрат.НайтиПоКоду(стр.Субконто1);
					
				Иначеесли СтрокаТЧ.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПрочиеРасходы тогда
					
					СтрокаТЧ.Субконто1       = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду(стр.Субконто1);
					СтрокаТЧ.СубконтоНУ1     = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду(стр.Субконто1);					
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;		   
		
		
		
	КонецЕсли; 
КонецПроцедуры

Процедура ЗаполнитьТЧматериалыТребования(ТекДок,НомДок)
	
	Для каждого Стр из Объект.СписокНоменклатуры цикл
		Если Стр._НомерДок= НомДок тогда
			
			
			Ном = НайтиСоздатьНоменклатуру(стр._КодНом,стр._Номенклатура,"","");
			
			СтрокаТЧматериалов = ТекДок.Материалы.Добавить();
			СтрокаТЧматериалов.Номенклатура = Ном;
			СтрокаТЧматериалов.Количество   = Стр._Количество;
			СтрокаТЧматериалов.Коэффициент  = 1;
			СтрокаТЧматериалов.Счет =  ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
			СтрокаТЧматериалов.ОтражениеВУСН = перечисления.ОтражениеВУСН.Принимаются;
			
		КонецЕсли;	
	КонецЦикла;	
	
	//ТекДок.Материалы.Свернуть("ВидВыпуска,Номенклатура,Коэффициент,ЕдиницаИзмерения","Количество");
	
КонецПроцедуры	


//-------------------------------------------------------------
//процедуры формирования документов

Процедура СформироватьСчетФактуруПолученный(ДокПоступление,НомерДокаПостпления)
	
	
	Для каждого Стр из Объект.СписокДокументов цикл
		
		
		Если Стр.НомерДок = НомерДокаПостпления тогда 
			СчетФактураПолученный =	Документы.СчетФактураПолученный.СоздатьДокумент();
			СчетФактураПолученный.Дата = Стр.ДатаДок;
			СчетФактураПолученный.Организация = Объект.Организация;
			СчетФактураПолученный.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
			//Если стр.ПредъявленСчФ тогда
			//СчетФактураПолученный.ДатаВходящегоДокумента  = Стр.ДатаПредъявленногоСчФ;
			//СчетФактураПолученный.НомерВходящегоДокумента = Стр.НомерПредъявленногоСчФ;
			//Иначе
			СчетФактураПолученный.ДатаВходящегоДокумента  = Стр.ДатаСчФактурыВх; 
			СчетФактураПолученный.НомерВходящегоДокумента = Стр.НомерСчФактурыВх;
			//КонецЕсли;
			
			СчетФактураПолученный.Контрагент    = ДокПоступление.Контрагент;
			СчетФактураПолученный.ДоговорКонтрагента = Докпоступление.ДоговорКонтрагента;
			СчетФактураПолученный.ДокументОснование = ДокПоступление;
			СчетФактураПолученный.КодСпособаПолучения = 1;
			СчетФактураПолученный.ВидСчетаФактуры     = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			
			
			ТЧСчетаФактуры = СчетФактураПолученный.ДокументыОснования.Добавить();
			ТЧСчетаФактуры.ДокументОснование = ДокПоступление;
			
			Попытка
				СчетФактураПолученный.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				СчетФактураПолученный.Записать(РежимЗаписиДокумента.Запись);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		конецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура СформироватьСчетФактуруВыданный(ДокРеал,НомерДокаРел)
	
	
	Для каждого Стр из Объект.СписокДокументов цикл
		
		
		Если Стр.НомерДок = НомерДокаРел тогда 
			
			СчетФактура  =	Документы.СчетФактураВыданный.СоздатьДокумент();
			СчетФактура.Дата               = Стр.ДатаСчФактурыВх;
			СчетФактура.Организация        = Объект.Организация;
			СчетФактура.ВалютаДокумента    = Справочники.Валюты.НайтиПоКоду("643");
			СчетФактура.Номер              = Стр.НомерСчФактурыВх;   
			СчетФактура.Контрагент         = ДокРеал.Контрагент;
			СчетФактура.ДоговорКонтрагента = ДокРеал.ДоговорКонтрагента;
			СчетФактура.ДокументОснование  = ДокРеал;
			СчетФактура.ВидСчетаФактуры    = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
			СчетФактура.КодВидаОперации    = "01";
			СчетФактура.Выставлен          = истина;
			СчетФактура.ДатаВыставления    = Стр.ДатаСчФактурыВх;
			СчетФактура.КодСпособаВыставления = 1;
			
			
			ТЧСчетаФактуры = СчетФактура.ДокументыОснования.Добавить();
			ТЧСчетаФактуры.ДокументОснование = ДокРеал;
			
			Попытка
				СчетФактура.Записать(РежимЗаписиДокумента.Проведение);
				сообщить("записан и проведен сч-ф:"+СчетФактура.Ссылка);
			Исключение
				СчетФактура.Записать(РежимЗаписиДокумента.Запись);
				сообщить("записан сч-ф:"+СчетФактура.Ссылка);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		конецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура СформироватьДокументыПоступления(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Флаг тогда
		
		Поступление                                = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		Поступление.Дата                           = СтрокаТаблицы.ДатаДок;
		Поступление.ВидОперации                    = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		Поступление.УчитыватьНДС                   = истина;
		Если строкаТаблицы.СуммаВключаетНДС тогда
			Поступление.СуммаВключаетНДС               = истина;
		КонецЕсли;
		Поступление.Контрагент                     = строкаТаблицы.КонтрагентСсылка;
		Поступление.ДоговорКонтрагента             = строкаТаблицы.ДоговорСсылка;
		Поступление.ВалютаДокумента                = Справочники.Валюты.НайтиПоКоду("643");
		Поступление.Комментарий                    = "#загр. авт./в УТ №"+строкаТаблицы.НомерДок;
		Поступление.Организация                    = Объект.Организация;
		Поступление.Склад                          = Объект.Склад;
		Поступление.Ответственный                  = ПараметрыСеанса.ТекущийПользователь;//УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		Поступление.КурсВзаиморасчетов             = 1;
		Поступление.КратностьВзаиморасчетов        = 1;
		Поступление.ДатаВходящегоДокумента         = СтрокаТаблицы.ДатаДокументаПоставщика;
		Поступление.НомерВходящегоДокумента        = СтрокаТаблицы.НомерДокументаПоставщика;
		Поступление.СпособЗачетаАвансов            = Перечисления.СпособыЗачетаАвансов.Автоматически;
		Поступление.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		Поступление.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
		
		
		ЗаполнениеТабличнойЧастиПоступления(Поступление, СтрокаТаблицы.НомерДок);
		//ЗаполнениеТабличнойЧастиПоступленияУслуги(Поступление, СтрокаТаблицы.НомерДок);
		
		Поступление.Комментарий = "#"+СтрокаТаблицы.Комментарий;
		
		Попытка 
			Поступление.Записать(РежимЗаписиДокумента.Проведение);
			сообщить("записано и проведено поступление:"+Поступление.Ссылка);
		Исключение
			Поступление.Записать();
			Сообщить(ОписаниеОшибки());
			сообщить("записано поступление:"+Поступление.Ссылка);
			
		КонецПопытки;
		//
		Если ЗначениеЗаполнено(строкатаблицы.НомерСчФактурыВх) тогда
			СформироватьСчетФактуруПолученный(Поступление.Ссылка, СтрокаТаблицы.НомерДок);
		КонецЕсли;
		
		
	КонецЕсли;
	
	
КонецПроцедуры	

Процедура СформироватьДокументыПеремещения(СтрокаТаблицы)
	
	//Если СтрокаТаблицы.Флаг тогда
	//ТекПеремещение = НайтиДокументыПеремещения(СтрокаТаблицы.НомерДок);
	//
	//Если ЗначениеЗаполнено(ТекПеремещение) тогда
	//	сообщить("Перемещение №"+СтрокаТаблицы.НомерДок+"найдено. Будет перезаписано!");
	//	
	//	НайденноеПеремещение = ТекПеремещение.ПолучитьОбъект();
	//	НайденноеПеремещение.Товары.Очистить();
	//	НайденноеПеремещение.Дата  = СтрокаТаблицы.ДатаДок;
	//	НайденноеПеремещение.Номер = СтрокаТаблицы.НомерДок;
	//	НайденноеПеремещение.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	//	НайденноеПеремещение.СкладОтправитель = Справочники.Склады.НайтиПоКоду(СтрокаТаблицы.КодСклада);
	//	НайденноеПеремещение.СкладПолучатель  = Справочники.Склады.НайтиПоКоду(СтрокаТаблицы.КодСкладаПолучателя);
	//	НайденноеПеремещение.Ответственный    = ПараметрыСеанса.ТекущийПользователь;
	//	НайденноеПеремещение.Объект.Организация      = Объект.Организация;
	//	
	//	ЗаполнениеТабличнойЧастиПеремещения(НайденноеПеремещение, СтрокаТаблицы.НомерДок);
	//	НайденноеПеремещение.Комментарий = "#"+СтрокаТаблицы.Комментарий;
	//	
	//	Попытка
	//		НайденноеПеремещение.Записать(РежимЗаписиДокумента.Проведение);
	//		сообщить("записано и проведено перемещ.:"+НайденноеПеремещение.Ссылка);
	//	Исключение
	//		НайденноеПеремещение.Записать();
	//		Сообщить(ОписаниеОшибки());
	//		сообщить("сформировано перемещение:"+НайденноеПеремещение.Ссылка);
	//	КонецПопытки;
	//	
	//Иначе	
	//		
	//		НовоеПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
	//		НовоеПеремещение.Дата  = СтрокаТаблицы.ДатаДок;
	//		//НовоеПеремещение.Номер = СтрокаТаблицы.НомерДок;
	//		НовоеПеремещение.ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	//		НовоеПеремещение.СкладОтправитель = Справочники.Склады.НайтиПоКоду(СтрокаТаблицы.КодСклада);
	//		НовоеПеремещение.СкладПолучатель  = Справочники.Склады.НайтиПоКоду(СтрокаТаблицы.КодСкладаПолучателя);
	//		НовоеПеремещение.Ответственный    = ПараметрыСеанса.ТекущийПользователь;
	//		НовоеПеремещение.Объект.Организация      = Объект.Организация;
	//		
	//		//ЗаполнениеТабличнойЧастиПеремещения(НовоеПеремещение, СтрокаТаблицы.НомерДок);
	//		НовоеПеремещение.Комментарий = "#"+СтрокаТаблицы.Комментарий+",номер в ут:"+строкаТаблицы.НомерДок;
	//		
	//		Попытка
	//			НовоеПеремещение.Записать(РежимЗаписиДокумента.Проведение);
	//			сообщить("записано и проведено перемещ.:"+НовоеПеремещение.Ссылка);
	//		Исключение
	//			НовоеПеремещение.Записать();
	//			Сообщить(ОписаниеОшибки());
	//			сообщить("сформировано перемещение:"+НовоеПеремещение.Ссылка);
	//		КонецПопытки;
	//	//КонецЕсли;
	//КонецЕсли;
	
	
КонецПроцедуры	

Процедура СформироватьДокументыКомплектации(СтрокаТаблицы)
	//
	//	Если СтрокаТаблицы.Флаг тогда
	//		
	//		ТекКомплектация = НайтиДокументыКомплектации(СтрокаТаблицы.НомерДок);
	//		
	//		Если ЗначениеЗаполнено(ТекКомплектация) тогда
	//			сообщить("Комплектация №"+СтрокаТаблицы.НомерДок+"загружена в программу ранее. Будет перезаписана. ");
	//			
	//			ТекущаяКомплектация = ТекКомплектация.ПолучитьОбъект();
	//			ТекущаяКомплектация.Дата  = СтрокаТаблицы.ДатаДок;
	//			ТекущаяКомплектация.Номер = СтрокаТаблицы.НомерДок;
	//			ТекущаяКомплектация.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
	//			ТекущаяКомплектация.Склад       = Справочники.Склады.НайтиПоКоду(СтрокаТаблицы.КодСклада);
	//			ТекущаяКомплектация.Количество  = СтрокаТаблицы.КолНом;
	//			ТекущаяКомплектация.Ответственный    = ПараметрыСеанса.ТекущийПользователь;
	//			ТекущаяКомплектация.Объект.Организация      = Объект.Организация;
	//			
	//			Ном = НайтиСоздатьНоменклатуру(СтрокаТаблицы.КодНоменклатуры,СтрокаТаблицы.Номенклатура,СтрокаТаблицы.ЕдИзмНом,"");
	//			
	//			
	//			ТекущаяКомплектация.Номенклатура = Ном ;
	//			ТекущаяКомплектация.СчетУчета    = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
	//			ТекущаяКомплектация.НДСвСтоимостиТоваров    = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	//			
	//			
	//			
	//			//ЗаполнениеТабличнойЧастиКомплектации(ТекущаяКомплектация, СтрокаТаблицы.НомерДок);
	//			ТекущаяКомплектация.Комментарий = "#загружено авт. из у.т.";
	//			
	//			Попытка
	//				ТекущаяКомплектация.Записать(РежимЗаписиДокумента.Проведение);
	//				сообщить("записано и проведено перемещ.:"+ТекущаяКомплектация.Ссылка);
	//			Исключение
	//				ТекущаяКомплектация.Записать();
	//				Сообщить(ОписаниеОшибки());
	//				сообщить("сформировано перемещение:"+ТекущаяКомплектация.Ссылка);
	//			КонецПопытки;
	//			
	//			
	//		Иначе	
	//			
	//			НоваяКомплектация = Документы.КомплектацияНоменклатуры.СоздатьДокумент();
	//			НоваяКомплектация.Дата  = СтрокаТаблицы.ДатаДок;
	//			НоваяКомплектация.Номер = СтрокаТаблицы.НомерДок;
	//			НоваяКомплектация.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
	//			НоваяКомплектация.Склад       = Справочники.Склады.НайтиПоКоду(СтрокаТаблицы.КодСклада);
	//			НоваяКомплектация.Количество  = СтрокаТаблицы.КолНом;
	//			НоваяКомплектация.Ответственный    = ПараметрыСеанса.ТекущийПользователь;
	//			НоваяКомплектация.Объект.Организация      = Объект.Организация;
	//			
	//			Ном = НайтиСоздатьНоменклатуру(СтрокаТаблицы.КодНоменклатуры,СтрокаТаблицы.Номенклатура,СтрокаТаблицы.ЕдИзмНом,"");
	//			
	//			
	//			НоваяКомплектация.Номенклатура = Ном ;
	//			НоваяКомплектация.СчетУчета    = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
	//			НоваяКомплектация.НДСвСтоимостиТоваров    = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	//			
	//			
	//			
	//			ЗаполнениеТабличнойЧастиКомплектации(НоваяКомплектация, СтрокаТаблицы.НомерДок);
	//			НоваяКомплектация.Комментарий = "#загружено авт. из у.т.";
	//			
	//			Попытка
	//				НоваяКомплектация.Записать(РежимЗаписиДокумента.Проведение);
	//				сообщить("записано и проведено перемещ.:"+НоваяКомплектация.Ссылка);
	//			Исключение
	//				НоваяКомплектация.Записать();
	//				Сообщить(ОписаниеОшибки());
	//				сообщить("сформировано перемещение:"+НоваяКомплектация.Ссылка);
	//			КонецПопытки;
	//		КонецЕсли;
	//	КонецЕсли;
	//
	
КонецПроцедуры	

Процедура СформироватьДокументыСписания(СтрокаТаблицы)
	
	//	Если СтрокаТаблицы.Флаг тогда
	//		
	//		ТекСписание = НайтиДокументыСписания(СтрокаТаблицы.НомерДок);
	//		
	//		//Если ЗначениеЗаполнено(ТекСписание) тогда
	//		//	сообщить("Списание №"+СтрокаТаблицы.НомерДок+"загружено в программу ранее.Будет перезаписано");
	//			//
	//			//ТекущееСписание = ТекСписание.ПолучитьОбъект();
	//			//ТекущееСписание.Дата  = СтрокаТаблицы.ДатаДок;
	//			////ТекущееСписание.Номер = СтрокаТаблицы.НомерДок;
	//			//ТекущееСписание.ВидОперации      = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;
	//			//ТекущееСписание.Склад            = Справочники.Склады.НайтиПоКоду(СтрокаТаблицы.КодСклада);
	//			//ТекущееСписание.Ответственный    = ПараметрыСеанса.ТекущийПользователь;
	//			//ТекущееСписание.Объект.Организация      = Объект.Организация;
	//			//
	//			//ЗаполнениеТабличнойЧастиСписания(ТекущееСписание, СтрокаТаблицы.НомерДок);
	//			//ТекущееСписание.Комментарий = "#"+СтрокаТаблицы.Комментарий;
	//			//
	//			//Попытка
	//			//	ТекущееСписание.Записать(РежимЗаписиДокумента.Проведение);
	//			//	сообщить("записано и проведено перемещ.:"+ТекущееСписание.Ссылка);
	//			//Исключение
	//			//	ТекущееСписание.Записать();
	//			//	Сообщить(ОписаниеОшибки());
	//			//	сообщить("сформировано списание:"+ТекущееСписание.Ссылка);
	//			//КонецПопытки;
	
	//			
	//		//Иначе	
	//			
	//			НовоеСписание = Документы.СписаниеТоваров.СоздатьДокумент();
	//			НовоеСписание.Дата  = СтрокаТаблицы.ДатаДок;
	//			//НовоеСписание.Номер = СтрокаТаблицы.НомерДок;
	//			НовоеСписание.ВидОперации      = Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;
	//			НовоеСписание.Склад            = Справочники.Склады.НайтиПоКоду(СтрокаТаблицы.КодСклада);
	//			НовоеСписание.Ответственный    = ПараметрыСеанса.ТекущийПользователь;
	//			НовоеСписание.Объект.Организация      = Объект.Организация;
	//			
	//			//ЗаполнениеТабличнойЧастиСписания(НовоеСписание, СтрокаТаблицы.НомерДок);
	//			НовоеСписание.Комментарий = "#"+СтрокаТаблицы.Комментарий;
	//			
	//			Попытка
	//				НовоеСписание.Записать(РежимЗаписиДокумента.Проведение);
	//				сообщить("записано и проведено перемещ.:"+НовоеСписание.Ссылка);
	//			Исключение
	//				НовоеСписание.Записать();
	//				Сообщить(ОписаниеОшибки());
	//				сообщить("сформировано списание:"+НовоеСписание.Ссылка);
	//			КонецПопытки;
	//		//КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры	

Процедура СформироватьДокументыРеализации(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Флаг тогда
		
		ТекДок     = НайтиДокументыРеализации(СтрокаТаблицы.НомерДок);		 
		
		Если ЗначениеЗаполнено(ТекДок) тогда
			ТекРеализация                 = ТекДок.ПолучитьОбъект();
			сообщить("***реал.№"+СтрокаТаблицы.НомерДок+" найдена. Будет перезаписана!");
		Иначе
			ТекРеализация                 = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			сообщить("***реал.№"+СтрокаТаблицы.НомерДок+"не найдена. Будет записана как новая!");
		КонецЕсли;	
		
		ТекРеализация.Дата            = СтрокаТаблицы.ДатаДок;
		ТекРеализация.Номер           = СтрокаТаблицы.НомерДок;
		ТекРеализация.ВидОперации     = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ТекРеализация.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
		
		Если СтрокаТаблицы.СуммаВключаетНДС = истина тогда
			ТекРеализация.СуммаВключаетНДС = истина;
		КонецЕсли;
		Если СтрокаТаблицы.УчитыватьНДС = истина тогда
			ТекРеализация.УчитыватьНДС = истина;
		КонецЕсли;	
		
		
		
		ТекРеализация.Организация = Объект.Организация;
		ТекРеализация.Склад         = Справочники.Склады.НайтиПоКоду("000000001");
		ТекРеализация.Ответственный = ПараметрыСеанса.ТекущийПользователь;//УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		ТекРеализация.БанковскийСчетОрганизации  = Объект.Организация.ОсновнойБанковскийСчет;
		ТекРеализация.Контрагент                 = строкаТаблицы.КонтрагентСсылка;
		ТекРеализация.ДоговорКонтрагента         = строкаТаблицы.ДоговорСсылка;
		ТекРеализация.СпособЗачетаАвансов        = Перечисления.СпособыЗачетаАвансов.Автоматически;
		ТекРеализация.СчетУчетаРасчетовСКонтрагентом  = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		ТекРеализация.СчетУчетаРасчетовПоАвансам      = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
		ТекРеализация.КурсВзаиморасчетов =1;
		ТекРеализация.КратностьВзаиморасчетов =1;
		ТекРеализация.Комментарий = "#"+СтрокаТаблицы.Комментарий+"/"+строкаТаблицы.Контрагент;
		
		ЗаполнениеТабличнойЧастиРеализации(ТекРеализация, СтрокаТаблицы.НомерДок, СтрокаТаблицы.ТипДоговора, ТекРеализация.Склад);
		ЗаполнениеТабличнойЧастиУслуг(ТекРеализация, СтрокаТаблицы.НомерДок);
		
		Попытка 
			ТекРеализация.Записать(РежимЗаписиДокумента.Проведение);
			сообщить("перезаписана и проведена реализация:"+ТекРеализация.Ссылка);
			
		Исключение
			ТекРеализация.Записать();
			сообщить("перезаписана реализация:"+ТекРеализация.Ссылка);
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		//		
		//Если ЗначениеЗаполнено(СтрокаТаблицы.НомерСчФактурыВх) тогда
		//	СформироватьСчетФактуруВыданный(ТекРеализация.Ссылка,СтрокаТаблицы.НомерДок);
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДокументыРеализацииСклМонт(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Флаг и не СтрокаТаблицы.ЭтоУслугиМ тогда
		
		
		ТекДок     = НайтиДокументыРеализации(СтрокаТаблицы.НомерДок);		 
		
		Если ЗначениеЗаполнено(ТекДок) тогда
			ТекРеализация                 = ТекДок.ПолучитьОбъект();
			ТекРеализация.товары.Очистить();
			сообщить("***реал.№"+СтрокаТаблицы.НомерДок+" найдена. Будет перезаписана!");
		Иначе
			ТекРеализация                 = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			сообщить("***реал.№"+СтрокаТаблицы.НомерДок+"не найдена. Будет записана как новая!");
		КонецЕсли;	
		
		ТекРеализация.Дата            = СтрокаТаблицы.ДатаДок;
		ТекРеализация.Номер           = СтрокаТаблицы.НомерДок;
		ТекРеализация.ВидОперации     = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ТекРеализация.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
		
		Если СтрокаТаблицы.СуммаВключаетНДС = истина тогда
			ТекРеализация.СуммаВключаетНДС = истина;
		КонецЕсли;
		Если СтрокаТаблицы.УчитыватьНДС = истина тогда
			ТекРеализация.УчитыватьНДС = истина;
		КонецЕсли;	
		
		ТекРеализация.Организация = Объект.Организация;
		ТекРеализация.Склад         = Справочники.Склады.НайтиПоКоду("000000003");
		ТекРеализация.Ответственный = ПараметрыСеанса.ТекущийПользователь;//УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		ТекРеализация.БанковскийСчетОрганизации  = Объект.Организация.ОсновнойБанковскийСчет;
		ТекРеализация.Контрагент                 = строкаТаблицы.КонтрагентСсылка;
		ТекРеализация.ДоговорКонтрагента         = строкаТаблицы.ДоговорСсылка;
		ТекРеализация.СпособЗачетаАвансов        = Перечисления.СпособыЗачетаАвансов.Автоматически;
		ТекРеализация.СчетУчетаРасчетовСКонтрагентом  = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		ТекРеализация.СчетУчетаРасчетовПоАвансам      = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
		ТекРеализация.КурсВзаиморасчетов =1;
		ТекРеализация.КратностьВзаиморасчетов =1;
		ТекРеализация.Комментарий = "#"+СтрокаТаблицы.Комментарий+"/"+строкаТаблицы.Контрагент;
		
		ТЧтовары = ТекРеализация.Товары;
		Ном = НайтиСоздатьНоменклатуру(СтрокаТаблицы.КодНоменклатуры,СтрокаТаблицы.Номенклатура,"шт","");
		
		СтрокаТЧ                  = ТЧтовары.Добавить();
		СтрокаТЧ.Номенклатура     = Ном;
		
		Если строкаТаблицы.КолКомплекта=0 тогда
			СтрокаТЧ.Количество       = 1;
		Иначе
			СтрокаТЧ.Количество       = строкаТаблицы.КолКомплекта;
		КонецЕсли;
		
		СтрокаТЧ.ЕдиницаИзмерения = Ном.БазоваяЕдиницаИзмерения;
		строкаТЧ.Сумма            = СтрокаТаблицы.Сумма+НайтиСуммуУслуг(строкаТаблицы.НомерДок);
		СтрокаТЧ.Цена             = строкаТЧ.Сумма/СтрокаТЧ.Количество ;
		СтрокаТЧ.СуммаНДС         = СтрокаТаблицы.СуммаНДС;
		СтрокаТЧ.СтавкаНДС        = Перечисления.СтавкиНДС.БезНДС;
		СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		СтрокаТЧ.СчетДоходов              = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
		СтрокаТЧ.Субконто                 = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000003");
		СтрокаТЧ.СчетРасходов    = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
		СтрокаТЧ.СчетУчета       = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
		
		//ЗаполнениеТабличнойЧастиРеализацииКомплектом(ТекРеализация, СтрокаТаблицы.НомерДок, СтрокаТаблицы.ТипДоговора, ТекРеализация.Склад);
		//ЗаполнениеТабличнойЧастиУслуг(ТекРеализация, СтрокаТаблицы.НомерДок);
		
		Попытка 
			ТекРеализация.Записать(РежимЗаписиДокумента.Проведение);
			сообщить("перезаписана и проведена реализация:"+ТекРеализация.Ссылка);
			
		Исключение
			ТекРеализация.Записать();
			сообщить("перезаписана реализация:"+ТекРеализация.Ссылка);
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерСчФактурыВх) тогда
			СформироватьСчетФактуруВыданный(ТекРеализация.Ссылка,СтрокаТаблицы.НомерДок);
		КонецЕсли;
		
	ИначеЕсли СтрокаТаблицы.Флаг и СтрокаТаблицы.ЭтоУслугиМ тогда
		ТекДок     = НайтиДокументыРеализации(СтрокаТаблицы.НомерДок);		 
		
		Если ЗначениеЗаполнено(ТекДок) тогда
			ТекРеализация    = ТекДок.ПолучитьОбъект();
			ТекРеализация.товары.Очистить();
			ТекРеализация.Услуги.Очистить();
			сообщить("***реал.№"+СтрокаТаблицы.НомерДок+" найдена. Будет перезаписана!");
		Иначе
			ТекРеализация    = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			сообщить("***реал.№"+СтрокаТаблицы.НомерДок+"не найдена. Будет записана как новая!");
		КонецЕсли;	
		
		ТекРеализация.Дата            = СтрокаТаблицы.ДатаДок;
		ТекРеализация.Номер           = СтрокаТаблицы.НомерДок;
		ТекРеализация.ВидОперации     = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ТекРеализация.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
		
		Если СтрокаТаблицы.СуммаВключаетНДС = истина тогда
			ТекРеализация.СуммаВключаетНДС = истина;
		КонецЕсли;
		Если СтрокаТаблицы.УчитыватьНДС = истина тогда
			ТекРеализация.УчитыватьНДС = истина;
		КонецЕсли;	
		
		ТекРеализация.Организация = Объект.Организация;
		ТекРеализация.Склад         = Справочники.Склады.НайтиПоКоду("000000003");
		ТекРеализация.Ответственный = ПараметрыСеанса.ТекущийПользователь;//УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		ТекРеализация.БанковскийСчетОрганизации  = Объект.Организация.ОсновнойБанковскийСчет;
		ТекРеализация.Контрагент                 = строкаТаблицы.КонтрагентСсылка;
		ТекРеализация.ДоговорКонтрагента         = строкаТаблицы.ДоговорСсылка;
		ТекРеализация.СпособЗачетаАвансов        = Перечисления.СпособыЗачетаАвансов.Автоматически;
		ТекРеализация.СчетУчетаРасчетовСКонтрагентом  = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		ТекРеализация.СчетУчетаРасчетовПоАвансам      = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
		ТекРеализация.КурсВзаиморасчетов =1;
		ТекРеализация.КратностьВзаиморасчетов =1;
		ТекРеализация.Комментарий = "#"+СтрокаТаблицы.Комментарий+"/"+строкаТаблицы.Контрагент;
		
		ТЧтовары = ТекРеализация.Услуги;
		
		//Ном = НайтиСоздатьНоменклатуру(СтрокаТаблицы.КодНоменклатуры,СтрокаТаблицы.Номенклатура,"шт","");
		Ном = Справочники.Номенклатура.НайтиПоКоду("00000001613");
		
		СтрокаТЧ                  = ТЧтовары.Добавить();
		СтрокаТЧ.Номенклатура     = Ном;
		СтрокаТЧ.Содержание       = "Монтаж натяжного потолка  по договору";
		СтрокаТЧ.Количество       = 1;
		строкаТЧ.Сумма            = СтрокаТаблицы.Сумма+НайтиСуммуУслуг(строкаТаблицы.НомерДок);
		СтрокаТЧ.Цена             = строкаТЧ.Сумма/СтрокаТЧ.Количество ;
		СтрокаТЧ.СуммаНДС         = СтрокаТаблицы.СуммаНДС;
		СтрокаТЧ.СтавкаНДС        = Перечисления.СтавкиНДС.БезНДС;
		СтрокаТЧ.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		СтрокаТЧ.СчетДоходов              = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
		СтрокаТЧ.Субконто                 = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000006");
		СтрокаТЧ.СчетРасходов    = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
		
		Попытка 
			ТекРеализация.Записать(РежимЗаписиДокумента.Проведение);
			сообщить("перезаписана и проведена реализация:"+ТекРеализация.Ссылка);
			
		Исключение
			ТекРеализация.Записать();
			сообщить("перезаписана реализация:"+ТекРеализация.Ссылка);
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерСчФактурыВх) тогда
			СформироватьСчетФактуруВыданный(ТекРеализация.Ссылка,СтрокаТаблицы.НомерДок);
		КонецЕсли;
		
		КомментТН = "#для реализации №"+строкаТаблицы.НомерДок;
		СформироватьТН(СтрокаТаблицы,КомментТН);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчетыКомиссионеров(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Флаг тогда
		
		ТекКонтрагент = СоздатьНайтиКонтрагента(СтрокаТаблицы.КодКонтрагента);
		ТекДоговор    = СоздатьНайтиДоговор(ТекКонтрагент,СтрокаТаблицы.НаименованиеДоговора,Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,СтрокаТаблицы.ВалютаДоговора,СтрокаТаблицы.КодДоговора);
		ТекДок        = НайтиОтчетКомиссионера(СтрокаТаблицы.НомерДок);		 
		
		Если ЗначениеЗаполнено(ТекДок) тогда
			
			сообщить("***отчет комиссионера №"+СтрокаТаблицы.НомерДок+" найден. Будет перезаписан!");
			ТекОтчет = ТекДок.ПолучитьОбъект();
			ТекОтчет.Товары.Очистить();
			ТекОтчет.Дата  = СтрокаТаблицы.ДатаДок;
			ТекОтчет.Номер = СтрокаТаблицы.НомерДок;
			//ТекОтчет.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
			ТекОтчет.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(СтрокаТаблицы.ВалютаДоговора);
			
			Если СтрокаТаблицы.СуммаВключаетНДС = истина тогда
				ТекОтчет.СуммаВключаетНДС = истина;
			КонецЕсли;
			Если СтрокаТаблицы.УчитыватьНДС = истина тогда
				ТекОтчет.УчитыватьНДС = истина;
			КонецЕсли;	
			
			ТекОтчет.Организация = Объект.Организация;
			ТекОтчет.Ответственный = ПараметрыСеанса.ТекущийПользователь;//УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
			//ТекОтчет.БанковскийСчетОрганизации  = Объект.Организация.ОсновнойБанковскийСчет;
			ТекОтчет.Контрагент = ТекКонтрагент;
			ТекОтчет.ДоговорКонтрагента = ТекДоговор;
			ТекОтчет.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			
			ТекОтчет.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается;
			ТекОтчет.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.НДС18;
			
			ТекОтчет.СчетУчетаРасчетовСКонтрагентом  = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			ТекОтчет.СчетУчетаРасчетовПоАвансамПолученным = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
			ТекОтчет.СчетУчетаРасчетовЗаПосредническиеУслуги = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
			ТекОтчет.СчетУчетаРасчетовПоАвансамВыданным = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
			ТекОтчет.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
			
			ТекОтчет.КурсВзаиморасчетов =1;
			ТекОтчет.КратностьВзаиморасчетов =1;
			ТекОтчет.УчитыватьНДС = истина;
			ТекОтчет.СуммаВключаетНДС = истина;
			ТекОтчет.УдержатьВознаграждение = истина;
			ТекОтчет.СчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
			ТекОтчет.Субконто1       = Справочники.СтатьиЗатрат.НайтиПоКоду("ЗП0000002");
			
			
			ТекОтчет.Комментарий = "#"+СтрокаТаблицы.Комментарий;
			ЗаполнениеТабличнойЧастиОтчетаКомиссионера(ТекОтчет, СтрокаТаблицы.НомерДок, СтрокаТаблицы.ТипДоговора);
			Попытка 
				ТекОтчет.Записать(РежимЗаписиДокумента.Проведение);
				сообщить("перезаписана и проведена реализация:"+ТекОтчет.Ссылка);
				
			Исключение
				ТекОтчет.Записать();
				сообщить("перезаписана реализация:"+ТекОтчет.Ссылка);
				Сообщить(ОписаниеОшибки());
				
			КонецПопытки;
			
		Иначе
			Отчет = Документы.ОтчетКомиссионераОПродажах.СоздатьДокумент();
			Отчет.Дата  = СтрокаТаблицы.ДатаДок;
			Отчет.Номер = СтрокаТаблицы.НомерДок;
			//Отчет.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
			Отчет.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(СтрокаТаблицы.ВалютаДоговора);
			
			Если СтрокаТаблицы.СуммаВключаетНДС = истина тогда
				Отчет.СуммаВключаетНДС = истина;
			КонецЕсли;
			Если СтрокаТаблицы.УчитыватьНДС = истина тогда
				Отчет.УчитыватьНДС = истина;
			КонецЕсли;	
			
			Отчет.Организация = Объект.Организация;
			Отчет.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается;
			Отчет.СтавкаНДСВознаграждения = Перечисления.СтавкиНДС.НДС18;
			Отчет.Ответственный = ПараметрыСеанса.ТекущийПользователь;//УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
			Отчет.Контрагент = ТекКонтрагент;
			Отчет.ДоговорКонтрагента = ТекДоговор;
			Отчет.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Отчет.СчетУчетаРасчетовСКонтрагентом  = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
			Отчет.СчетУчетаРасчетовПоАвансамПолученным = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
			Отчет.СчетУчетаРасчетовЗаПосредническиеУслуги = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
			Отчет.СчетУчетаРасчетовПоАвансамВыданным = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
			Отчет.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
			Отчет.КурсВзаиморасчетов =1;
			Отчет.КратностьВзаиморасчетов =1;
			Отчет.Комментарий = "#"+СтрокаТаблицы.Комментарий;
			Отчет.УчитыватьНДС = истина;
			Отчет.СуммаВключаетНДС = истина;
			Отчет.УдержатьВознаграждение = истина;
			Отчет.СчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
			Отчет.Субконто1       = Справочники.СтатьиЗатрат.НайтиПоКоду("ЗП0000002");
			
			
			ЗаполнениеТабличнойЧастиОтчетаКомиссионера(Отчет, СтрокаТаблицы.НомерДок, СтрокаТаблицы.ТипДоговора);
			
			Попытка 
				Отчет.Записать(РежимЗаписиДокумента.Проведение);
				сообщить("записана и проведена реализация:"+Отчет.Ссылка);
				
			Исключение
				Отчет.Записать();
				сообщить("записана реализация:"+Отчет.Ссылка);
				Сообщить(ОписаниеОшибки());
				
			КонецПопытки;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерСчФактурыВх) тогда
				СформироватьСчетФактуруВыданный(Отчет.Ссылка,СтрокаТаблицы.НомерДок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьВозвратыОтПокупателя(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Флаг тогда
		
		ТекКонтрагент = СоздатьНайтиКонтрагента(СтрокаТаблицы.КодКонтрагента);
		ТекДоговор    = СоздатьНайтиДоговор(ТекКонтрагент,СтрокаТаблицы.НаименованиеДоговора,Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,СтрокаТаблицы.ВалютаДоговора,СтрокаТаблицы.КодДоговора);
		//ТекДок        = НайтиВозвраты(СтрокаТаблицы.НомерДок);		 
		
		//Если ЗначениеЗаполнено(ТекДок) тогда
		//	
		//	сообщить("***реал.№"+СтрокаТаблицы.НомерДок+" найдена. Будет перезаписана!");
		//	ТекРеализация = ТекДок.ПолучитьОбъект();
		//	ТекРеализация.Товары.Очистить();
		//Иначе
		ТекРеализация = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		ТекРеализация.Дата  = СтрокаТаблицы.ДатаДок;
		//ТекРеализация.Номер = СтрокаТаблицы.НомерДок;
		
		//КонецЕсли;	
		
		
		
		ТекРеализация.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
		ТекРеализация.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(СтрокаТаблицы.ВалютаДоговора);
		
		Если СтрокаТаблицы.СуммаВключаетНДС = истина тогда
			ТекРеализация.СуммаВключаетНДС = истина;
		КонецЕсли;
		Если СтрокаТаблицы.УчитыватьНДС = истина тогда
			ТекРеализация.УчитыватьНДС = истина;
		КонецЕсли;	
		
		ТекРеализация.Организация = Объект.Организация;
		ТекРеализация.Склад = Справочники.Склады.НайтиПоКоду(СтрокаТаблицы.КодСклада);
		ТекРеализация.Ответственный = ПараметрыСеанса.ТекущийПользователь;//УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		//ТекРеализация.БанковскийСчетОрганизации  = Объект.Организация.ОсновнойБанковскийСчет;
		ТекРеализация.Контрагент = ТекКонтрагент;
		ТекРеализация.ДоговорКонтрагента = ТекДоговор;
		//ТекРеализация.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		
		ТекРеализация.ВалютаДокумента  = Справочники.Валюты.НайтиПоКоду("643");
		ТекРеализация.СчетУчетаРасчетовСКонтрагентом  = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
		ТекРеализация.СчетУчетаРасчетовПоАвансам      = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
		ТекРеализация.КурсВзаиморасчетов =1;
		ТекРеализация.КратностьВзаиморасчетов =1;
		
		ТекРеализация.Комментарий = "#"+СтрокаТаблицы.Комментарий;
		
		ЗаполнениеТабличнойЧастиВозвратаОтПокупателя(ТекРеализация, СтрокаТаблицы.НомерДок, СтрокаТаблицы.ТипДоговора, ТекРеализация.Склад);
		//ЗаполнениеТабличнойЧастиУслуг(ТекРеализация, СтрокаТаблицы.НомерДок);
		
		Попытка 
			ТекРеализация.Записать(РежимЗаписиДокумента.Проведение);
			сообщить("перезаписана и проведена реализация:"+ТекРеализация.Ссылка);
			
		Исключение
			ТекРеализация.Записать();
			сообщить("перезаписана реализация:"+ТекРеализация.Ссылка);
			Сообщить(ОписаниеОшибки());
			
		КонецПопытки;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерСчФактурыВх) тогда
			СформироватьСчетФактуруВыданный(ТекРеализация.Ссылка,СтрокаТаблицы.НомерДок);
		КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
	
	
	
КонецПРоцедуры	

Процедура СформироватьСчета()
	
	Для каждого Стр из Объект.СписокДокументов цикл	
		Если Стр.ПризнакПрихода = 4 тогда
			Если Стр.Флаг тогда
				
				НайденныйСчет = НайтиСчет(Стр.НомерДок);
				ТекПокупатель = СоздатьНайтиКонтрагента(Стр.КодКонтрагента);
				ТекДоговор    = СоздатьНайтиДоговор(ТекПокупатель,Стр.НаименованиеДоговора,Перечисления.ВидыДоговоровКонтрагентов.СПокупателем,Стр.ВалютаДоговора,Стр.КодДоговора);
				
				Счет       = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
				Счет.Дата  = Стр.ДатаДок;
				Счет.Номер = Стр.НомерДок;
				
				Счет.СуммаВключаетНДС = истина;
				Счет.УчитыватьНДС = истина;
				Счет.Контрагент = ТекПокупатель; //покупатель
				Счет.ДоговорКонтрагента = ТекДоговор;
				Счет.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(стр.ВалютаДоговора);
				Счет.ОрганизацияПолучатель = Объект.Организация;
				
				Счет.Комментарий = "#загружен авт."+ТекущаяДата();
				Счет.Организация = Объект.Организация;
				Счет.Склад = Справочники.Склады.НайтиПоКоду(Стр.КодСклада);
				Счет.Ответственный = ПараметрыСеанса.ТекущийПользователь;//УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
				
				
				ЗаполнениеТабличнойЧастиСчета(Счет, Стр.НомерДок);
				ЗаполнениеТабличнойЧастиСчетаУслуги(Счет, стр.НомерДок);
				
				сообщить("записан счет:"+Стр.НомерДок);
				Счет.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьСчФактуруДляКорректровки(ТекДок,НомерСчФ,ДатаСчФ,НомерИсправления,ДатаИсправления,СуммаУвелич,СуммаНДСУвел,СуммаУменьш,СуммаНДСУуменьш, Датаоснования, СчФоснования)
	
	Если ЗначениеЗаполнено(ДатаСчФ) тогда	
		СчетФактура                    =	Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.Дата               = ДатаСчФ;
		СчетФактура.Организация        = Объект.Организация;
		СчетФактура.ВалютаДокумента    = Справочники.Валюты.НайтиПоКоду("643");
		СчетФактура.Номер              = НомерСчФ;   
		СчетФактура.Контрагент         = ТекДок.Контрагент;
		СчетФактура.ДоговорКонтрагента = ТекДок.ДоговорКонтрагента;
		СчетФактура.ДокументОснование  = ТекДок;
		СчетФактура.Исправление        = истина;
		СчетФактура.НомерИсправления                     = НомерИсправления;
		СчетФактура.ДатаИсправленияИсходногоДокумента    = ДатаИсправления;
		СчетФактура.Выставлен          = истина;
		СчетФактура.ДатаВыставления    = ДатаСчФ;
		СчетФактура.КодСпособаВыставления  = 1;
		СчетФактура.КодВидаОперации        = "01";
		СчетФактура.ВидСчетаФактуры        = перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
		//СчетФактура.СуммаУвеличение        = СуммаУвелич;
		//СчетФактура.СуммаУменьшение        = СуммаУменьш;
		//СчетФактура.СуммаНДСУвеличение     = СуммаНДСУвел;
		//СчетФактура.СуммаНДСУменьшение     = СуммаНДСУуменьш;
		
		
		
		СчетФактура.НомерИсходногоДокумента = СчФоснования;
		СчетФактура.ДатаИсходногоДокумента  = ДатаОснования;
		
		ТЧСчетаФактуры = СчетФактура.ДокументыОснования.Добавить();
		ТЧСчетаФактуры.ДокументОснование = ТекДок;
		
		//СчетФактура.Записать(РежимЗаписиДокумента.Запись);
		
		//СчетФактура.НомерИсправляемогоКорректировочногоДокумента = СчетФактура.Ссылка.Номер;
		//СчетФактура.ДатаИсправляемогоКорректировочногоДокумента  = СчетФактура.Ссылка.Дата;
		
		Попытка
			СчетФактура.Записать(РежимЗаписиДокумента.Проведение);
			сообщить("записан и проведен сч-ф:"+СчетФактура.Ссылка);
		Исключение
			СчетФактура.Записать(РежимЗаписиДокумента.Запись);
			сообщить("записан сч-ф:"+СчетФактура.Ссылка);
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры	

Процедура СформироватьКорректировкуРеализации(СтрокаТаблицы)
	
	ДокОсн = НайтиДокументыРеализации(СтрокаТаблицы.НомерДокОснования);
	
	РазницаСумма    = 0;
	РазницаСуммаНДС = 0;
	
	
	Если СтрокаТаблицы.Флаг тогда	
		Корректировка = Документы.КорректировкаРеализации.СоздатьДокумент();
		Корректировка.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
		Корректировка.Контрагент     = ДокОсн.Контрагент;
		Корректировка.ДокументРеализации = ДокОсн;
		Корректировка.ДоговорКонтрагента = ДокОсн.ДоговорКонтрагента;
		Корректировка.Дата               = строкаТаблицы.ДатаДок;
		Корректировка.УчитыватьНДС       = истина;
		//Корректировка.крат = 1;
		//Корректировка.КурсВзаиморасчетов      = 1;
		Корректировка.Организация             = Объект.Организация;
		Корректировка.СуммаВключаетНДС        = строкаТаблицы.СуммаВключаетНДС;
		Корректировка.КорректироватьБУиНУ     = истина;
		Корректировка.ВидОперации             = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
		
		ЗаполнениеТЧкорректировки(Корректировка.Товары, СтрокаТаблицы.НомерДок);
		
		Попытка
			Корректировка.Записать(РежимЗаписиДокумента.Проведение);
			сообщить("Записана и проведена корректировка:"+Корректировка.Номер);
			
		Исключение
			Корректировка.Записать();
			сообщить("Записана корректировка:"+Корректировка.Номер);
		КонецПопытки;
		
		РазницаСумма    = Корректировка.товары.Итог("СуммаДоИзменения")-Корректировка.товары.Итог("Сумма");
		РазницаСуммаНДС = Корректировка.товары.Итог("СуммаНДСДоИзменения")-Корректировка.товары.Итог("СуммаНДС");
		
		Если РазницаСумма>0 тогда
			
			СуммаУвеличения    = РазницаСумма;
			СуммаНДСувеличения = РазницаСуммаНДС;
			СуммаУменьшения    = 0;
			СуммаНДСуменьшения = 0;
			
		Иначе
			
			СуммаУвеличения    = 0;
			СуммаНДСувеличения = 0;
			СуммаУменьшения    = -РазницаСумма;
			СуммаНДСуменьшения = -РазницаСуммаНДС;
			
		КонецЕсли;	
		
		СчФномер = НайтиНомерИсправляемойСчФ(ДокОсн);
		
		СформироватьСчФактуруДляКорректровки(Корректировка.Ссылка, строкаТаблицы.НомерСчФактурыВх, строкаТаблицы.ДатаСчФактурыВх, строкаТаблицы.НомерИсправления, строкаТаблицы.ДатаИсправления,СуммаУвеличения ,СуммаНДСУвеличения,СуммаУменьшения,СуммаНДСуменьшения,ДокОсн.Дата,СчФномер );
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура СформироватьАО(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Флаг тогда
		
		НовыйАО                 = Документы.АвансовыйОтчет.СоздатьДокумент();
		НовыйАО.Дата            = СтрокаТаблицы.ДатаДок;
		НовыйАО.Организация     = Объект.Организация;
		НовыйАО.Номер           = СтрокаТаблицы.НомерДок;
		НовыйАО.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
		НовыйАО.ФизЛицо         = Справочники.ФизическиеЛица.НайтиПоКоду(СтрокаТаблицы.НаименованиеФЛ);
		НовыйАО.Склад           = Справочники.Склады.НайтиПоКоду(СтрокаТаблицы.КодСклада);
		
		
		ЗаполнитьТЧ_АО(НовыйАО.Товары, СтрокаТаблицы.НомерДок);
		ЗаполнитьТЧ_прочее_АО(НовыйАО.Прочее, СтрокаТаблицы.НомерДок);
		
		НовыйАО.Записать();
		сообщить("записан ав. отч"+НовыйАО.Ссылка);
		
		Попытка 
			НовыйАО.Записать(РежимЗаписиДокумента.Проведение);
			сообщить("перезаписана и проведена реализация:"+НовыйАО.Ссылка);
			
		Исключение
			НовыйАО.Записать();
			сообщить("перезаписана реализация:"+НовыйАО.Ссылка);
			Сообщить(ОписаниеОшибки());
			
		КонецПопытки;
		
		
		
	КонецЕсли;	
	
	
КонецПроцедуры	

Процедура СформироватьТН(СтрокаТаблицы,Коммент)
	
	Если СтрокаТаблицы.Флаг тогда
		
		НовоеТребование = Документы.ТребованиеНакладная.СоздатьДокумент();
		НовоеТребование.Дата        = СтрокаТаблицы.ДатаДок;
		НовоеТребование.Организация = Объект.Организация;
		//НовоеТребование.Номер       = СтрокаТаблицы.НомерДок;
		НовоеТребование.Склад                       = Справочники.Склады.НайтиПоКоду("000000003");
		НовоеТребование.НДСвСтоимостиТоваров        = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		НовоеТребование.Ответственный               = справочники.Пользователи.НайтиПоНаименованию(строкаТаблицы.Ответственный);
		НовоеТребование.СчетЗатрат                  = ПланыСчетов.Хозрасчетный.КоммерческиеРасходы;
		НовоеТребование.Субконто1                   = Справочники.СтатьиЗатрат.НайтиПоКоду("000000036");
		НовоеТребование.Комментарий	                = Коммент;
		
		ЗаполнитьТЧматериалыТребования(НовоеТребование,СтрокаТаблицы.НомерДок);
		НовоеТребование.Записать();
		сообщить("записано тр.-накл"+СтрокаТаблицы.НомерДок);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьПродукцией(ТекДок,НомДок)
	
	Для каждого Стр из Объект.СписокНоменклатуры цикл
		Если Стр._НомерДок = НомДок тогда
			
			ТекНом = НайтиСоздатьНоменклатуру(стр._КодНом,стр._Номенклатура,"","");
			
			СтрокаТЧпродукция = ТекДок.Продукция.Добавить();
			
			СтрокаТЧпродукция.Номенклатура = ТекНом;
			СтрокаТЧпродукция.Количество   = стр._Количество;
			СтрокаТЧпродукция.Коэффициент  = 1;
			СтрокаТЧпродукция.ЕдиницаИзмерения =  ТекНом.БазоваяЕдиницаИзмерения;
			СтрокаТЧпродукция.Счет = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
			СтрокаТЧпродукция.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
			СтрокаТЧпродукция.ПлановаяСтоимость = стр._Цена;
			СтрокаТЧпродукция.суммаПлановая     = стр._Сумма;
			СтрокаТЧпродукция.НоменклатурнаяГруппа = справочники.НоменклатурныеГруппы.НайтиПоКоду(стр.Субконто);
			
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьМатериалами(ТекДок,НомДок)
	
	Для каждого Стр из Объект.СписокНоменклатуры цикл
		Если Стр._НомерДок = НомДок тогда
			
			//ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоКоду("000000002");
			ТекНом  = НайтиСоздатьНоменклатуру(стр._КодНом,стр._Номенклатура,стр._Единица,стр._Артикул);
			
			СтрокаТЧматериалов              = ТекДок.Материалы.Добавить();
			СтрокаТЧматериалов.Номенклатура = ТекНом;
			СтрокаТЧматериалов.Количество   = Стр._Количество;
			СтрокаТЧматериалов.Коэффициент  = 1;
			СтрокаТЧматериалов.ЕдиницаИзмерения =  ТекНом.БазоваяЕдиницаИзмерения;
			СтрокаТЧматериалов.СтатьяЗатрат     = Справочники.СтатьиЗатрат.НайтиПоКоду("000000036");
			СтрокаТЧматериалов.Счет             = планыСчетов.Хозрасчетный.СырьеИМатериалы;
			СтрокаТЧматериалов.ОтражениеВУСН    = перечисления.ОтражениеВУСН.Принимаются;
			СтрокаТЧматериалов.НоменклатурнаяГруппа  = справочники.НоменклатурныеГруппы.НайтиПоКоду("000000003");
			
		КонецЕсли;	
	КонецЦикла;	
	
	//ТекДок.Материалы.Свернуть("Номенклатура,Коэффициент,ЕдиницаИзмерения","Количество");
	
КонецПроцедуры	

Функция НайтиСуммуУслуг(НомерДок)
	
	СуммаУслуги = 0;
	
	Для каждого стр из Объект.СписокУслуг цикл
		Если стр.НомерДок_ = НомерДок тогда
			СуммаУслуги = СуммаУслуги + стр.Сумма_;
		КонецЕсли;	
		
	КонецЦикла;	
	
	возврат СуммаУслуги;
	
КонецФункции	

Процедура СформироватьОП(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Флаг тогда
		ОтчетПроизводства       = Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();
		ОтчетПроизводства.Дата                  = СтрокаТаблицы.ДатаДок;
		ОтчетПроизводства.Организация           = Объект.Организация;
		ОтчетПроизводства.Склад                 = Объект.Склад;
		ОтчетПроизводства.ПодразделениеЗатрат   = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000002");
		ОтчетПроизводства.ИспользоватьМатериалы = истина;
		ОтчетПроизводства.Комментарий           = СтрокаТаблицы.Комментарий;  //расх. по мат-м
		ОтчетПроизводства.СчетЗатрат            = ПланыСчетов.Хозрасчетный.КоммерческиеРасходы;
		
		ТекНом = НайтиСоздатьНоменклатуру(строкаТаблицы.КодНоменклатуры,строкаТаблицы.Номенклатура,"шт","");
		
		СтрокаТЧпродукция = ОтчетПроизводства.Продукция.Добавить();
		
		СтрокаТЧпродукция.Номенклатура = ТекНом;
		Если строкаТаблицы.КолКомплекта=0 тогда
			СтрокаТЧпродукция.Количество   = 1;
		Иначе
			СтрокаТЧпродукция.Количество   = строкаТаблицы.КолКомплекта;
		КонецЕсли;
		
		СтрокаТЧпродукция.Коэффициент          = 1;
		СтрокаТЧпродукция.ЕдиницаИзмерения     =  ТекНом.БазоваяЕдиницаИзмерения;
		СтрокаТЧпродукция.Счет                 = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
		СтрокаТЧпродукция.СчетЗатрат           = ПланыСчетов.Хозрасчетный.КоммерческиеРасходы;
		СтрокаТЧпродукция.ПлановаяСтоимость    = СтрокаТаблицы.Сумма+НайтиСуммуУслуг(строкаТаблицы.НомерДок);
		СтрокаТЧпродукция.суммаПлановая        = СтрокаТаблицы.Сумма+НайтиСуммуУслуг(строкаТаблицы.НомерДок);
		СтрокаТЧпродукция.НоменклатурнаяГруппа = справочники.НоменклатурныеГруппы.НайтиПоКоду("000000003");
		
		//ЗаполнитьПродукцией(ОтчетПроизводства,СтрокаТаблицы.НомерДок);
		ЗаполнитьМатериалами(ОтчетПроизводства,СтрокаТаблицы.НомерДок);
		
		ОтчетПроизводства.Комментарий = "#для реал №"+СтрокаТаблицы.НомерДок;
		ОтчетПроизводства.Записать();
		сообщить("записан ОП:"+Отчетпроизводства.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры		

Процедура ТЧрасшифровкиППвход(ТЧ, НомерДок, Вал, Пер,Договор)
	
	Для каждого стр из Объект.РасшифровкаПлатежа цикл
		
		Если стр.НомерДок = НомерДок тогда
			СтрокаТч = ТЧ.добавить();
			СтрокаТЧ.ДоговорКонтрагента       = Договор;
			СтрокаТЧ.КурсВзаиморасчетов       = стр.КурсВзаиморасчетов;
			СтрокаТЧ.КратностьВзаиморасчетов  = стр.КратностьВзаиморасчетов;
			СтрокаТЧ.СуммаНДС                 = стр.СуммаНДС;
			СтрокаТЧ.суммаПлатежа                   = стр.СуммаПлатежа;
			СтрокаТЧ.СуммаВзаиморасчетов            = стр.СуммаВзаиморасчетов;
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(стр.СчетРасчетовСКонтрагентами);
			СтрокаТЧ.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.НайтиПоКоду(стр.СчетРасчетовПоАвансам);
			СтрокаТЧ.СтавкаНДС                      = перечисления.СтавкиНДС.НДС18;
			СтрокаТЧ.СпособПогашенияЗадолженности   = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СтрокаТЧ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(стр.СтатьяДДС);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ТЧрасшифровкиППисх_прочий_расход(ТЧ, НомерДок, Вал, Пер,Договор,Сумма,СуммаНДС, СтатьяДДС)
	
	//Для каждого стр из РасшифровкаПлатежа цикл
	//Если стр.НомерДок = НомерДок тогда
	
	СтрокаТч = ТЧ.добавить();
	СтрокаТЧ.ДоговорКонтрагента       = Договор;
	СтрокаТЧ.КурсВзаиморасчетов       = 1;
	СтрокаТЧ.КратностьВзаиморасчетов  = 1;
	СтрокаТЧ.СуммаНДС                       = СуммаНДС;
	//СтрокаТЧ.суммаПлатежа                   = Сумма;
	СтрокаТЧ.СуммаВзаиморасчетов            = Сумма;
	СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	СтрокаТЧ.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
	СтрокаТЧ.СтавкаНДС                      = перечисления.СтавкиНДС.НДС18;
	СтрокаТЧ.СпособПогашенияЗадолженности   = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	СтрокаТЧ.СтатьяДвиженияДенежныхСредств  = СтатьяДДС;
	
	
	//	КонецЕсли;	
	//	КонецЦикла;	
	
КонецПроцедуры	

Процедура СформироватьППвходящие(СтрокаТаблицы)
	
	//Для каждого стр из Объект.СписокДокументов цикл
	
	Если СтрокаТаблицы.Флаг тогда
		
		НовоеПП = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
		
		Если СтрокаТаблицы.ВидОперацииПП = 0 тогда
			
			Договор    = ПоискДоговора("","","",СтрокаТаблицы.КодДоговора);
			Контрагент = ПоискКонтрагента(СтрокаТаблицы.КодКонтрагента) ;
			
			НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
			НовоеПП.СчетБанк    = строкаТаблицы.БанкСчет;
			НовоеПП.Дата        = строкаТаблицы.ДатаДок;
			НовоеПП.ДатаВходящегоДокумента = строкаТаблицы.ДатаДокументаПоставщика;
			НовоеПП.ДоговорКонтрагента     = Договор;
			НовоеПП.Контрагент             = Контрагент;
			НовоеПП.ЕстьРасчетыСКонтрагентами = истина;
			НовоеПП.ЕстьУчетПоСтатьямДДС      = истина;
			НовоеПП.ВалютаДокумента           = Справочники.Валюты.НайтиПоКоду(СтрокаТаблицы.ВалютаДоговора);
			НовоеПП.КратностьДокумента        = ПолучитьКратностьВал(СтрокаТаблицы.ВалютаДоговора,СтрокаТаблицы.ДатаДок);
			НовоеПП.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(СтрокаТаблицы.СтатьяДДС);
			НовоеПП.НазначениеПлатежа             = СтрокаТаблицы.НазначениеПлатежа;
			НовоеПП.СчетКонтрагента               = НайтиБанковскийСчет(СтрокаТаблицы.СчетКонтрагента);
			НовоеПП.СчетБанк                      = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.БанкСчет);
			НовоеПП.СчетОрганизации               = НайтиБанковскийСчет(СтрокаТаблицы.СчетОрганизации);
			НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.ПпСчетРасчетовСКонтрагентами);
			НовоеПП.НомерВходящегоДокумента        = строкаТаблицы.НомерДокументаПоставщика;
			НовоеПП.Комментарий                    = ""+строкаТаблицы.Контрагент;
			НовоеПП.Организация                    = Объект.Организация;
			НовоеПП.СуммаДокумента                 = СтрокаТаблицы.Сумма;
			
			ТЧрасшифровкиППвход(НовоеПП.РасшифровкаПлатежа,СтрокаТаблицы.НомерДок,НовоеПП.ВалютаДокумента ,НовоеПП.Дата, Договор);
			
			НовоеПП.Записать();
			
			
		ИначеЕсли СтрокаТаблицы.ВидОперацииПП=1 тогда //возврат от поставщика
			
			Договор    = ПоискДоговора("","","",СтрокаТаблицы.КодДоговора);
			Контрагент = ПоискКонтрагента(СтрокаТаблицы.КодКонтрагента) ;
			
			
			НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
			НовоеПП.СчетБанк    = строкаТаблицы.БанкСчет;
			НовоеПП.Дата        = строкаТаблицы.ДатаДок;
			НовоеПП.ДатаВходящегоДокумента = строкаТаблицы.ДатаДокументаПоставщика;
			НовоеПП.ДоговорКонтрагента     = Договор;
			НовоеПП.Контрагент             = Контрагент;
			НовоеПП.ЕстьРасчетыСКонтрагентами = истина;
			НовоеПП.ЕстьУчетПоСтатьямДДС      = истина;
			НовоеПП.ВалютаДокумента           = Справочники.Валюты.НайтиПоКоду(СтрокаТаблицы.ВалютаДоговора);
			НовоеПП.КратностьДокумента        = ПолучитьКратностьВал(СтрокаТаблицы.ВалютаДоговора,СтрокаТаблицы.ДатаДок);
			НовоеПП.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(СтрокаТаблицы.СтатьяДДС);
			НовоеПП.НазначениеПлатежа             = СтрокаТаблицы.НазначениеПлатежа;
			НовоеПП.СчетКонтрагента               = НайтиБанковскийСчет(СтрокаТаблицы.СчетКонтрагента);
			НовоеПП.СчетБанк                      = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.БанкСчет);
			НовоеПП.СчетОрганизации               = НайтиБанковскийСчет(СтрокаТаблицы.СчетОрганизации);
			НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.ПпСчетРасчетовСКонтрагентами);
			НовоеПП.НомерВходящегоДокумента        = строкаТаблицы.НомерДокументаПоставщика;
			НовоеПП.Комментарий                    = ""+строкаТаблицы.Контрагент+",код дог."+строкаТаблицы.КодДоговора;
			НовоеПП.Организация                    = Объект.Организация;
			НовоеПП.СуммаДокумента                 = СтрокаТаблицы.Сумма;
			
			ТЧрасшифровкиППвход(НовоеПП.РасшифровкаПлатежа,СтрокаТаблицы.НомерДок,НовоеПП.ВалютаДокумента ,НовоеПП.Дата, Договор);
			
			НовоеПП.Записать();
			
			
			//ИначеЕсли СтрокаТаблицы.ВидОперацииПП=3 тогда //расчеты по займам
			//	НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам;
			
			//ИначеЕсли СтрокаТаблицы.ВидОперацииПП=4 тогда //прочие рас
			//	НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			//ИначеЕсли СтрокаТаблицы.ВидОперацииПП=5 тогда //инкассация
			//	НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация;
			//ИначеЕсли СтрокаТаблицы.ВидОперацииПП=6 тогда //приобретение ин. валюты
			//	НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты;
			
			//ИначеЕсли СтрокаТаблицы.ВидОперацииПП=7 тогда //поступление от продажи вал.
			//	НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты;
			
			//ИначеЕсли СтрокаТаблицы.ВидОперацииПП=8 тогда //
			//	НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
			
		ИначеЕсли СтрокаТаблицы.ВидОперацииПП=8 тогда 
			
			Контрагент = ПоискКонтрагента(СтрокаТаблицы.КодКонтрагента) ;
			
			НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
			НовоеПП.СчетБанк                = строкаТаблицы.БанкСчет;
			НовоеПП.Дата                   = строкаТаблицы.ДатаДок;
			НовоеПП.ДатаВходящегоДокумента = строкаТаблицы.ДатаДокументаПоставщика;
			НовоеПП.Контрагент             = Контрагент;
			НовоеПП.ЕстьУчетПоСтатьямДДС           = истина;
			НовоеПП.ВалютаДокумента                = Справочники.Валюты.НайтиПоКоду("643");
			НовоеПП.КратностьДокумента             = 1;
			//НовоеПП.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(СтрокаТаблицы.СтатьяДДС);
			НовоеПП.НазначениеПлатежа              = СтрокаТаблицы.НазначениеПлатежа;
			НовоеПП.СчетКонтрагента                = НайтиБанковскийСчет(СтрокаТаблицы.СчетКонтрагента);
			НовоеПП.СчетБанк                       = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.БанкСчет);
			НовоеПП.СчетОрганизации                = НайтиБанковскийСчет(СтрокаТаблицы.СчетОрганизации);
			НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.ПпСчетРасчетовСКонтрагентами);
			НовоеПП.НомерВходящегоДокумента        = строкаТаблицы.НомерДокументаПоставщика;
			НовоеПП.Комментарий                    = ""+строкаТаблицы.Контрагент+",код дог."+строкаТаблицы.КодДоговора;
			НовоеПП.Организация                    = Объект.Организация;
			НовоеПП.СуммаДокумента                 = СтрокаТаблицы.Сумма;
			
			
			
			ТЧрасшифровкиППвход(НовоеПП.РасшифровкаПлатежа,СтрокаТаблицы.НомерДок,НовоеПП.ВалютаДокумента ,НовоеПП.Дата, Договор); 
			НовоеПП.Записать();
			
		КонецЕсли;
		
		
		
		
		
		
	КонецЕсли;	
	
	//КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьСоставомВедомости(ТЧплатежки, Вед, СтатьяДДС)
	
	
	ВедТЧ = Вед.Зарплата;
	
	Для каждого стр из ВедТЧ цикл
		
		СтрокаТЧ = ТЧплатежки.Добавить();
		СтрокаТЧ.Ведомость                     = вед;
		СтрокаТЧ.Физлицо                       = стр.Физлицо;
		СтрокаТЧ.СуммаПлатежа                  = стр.Сумма;
		СтрокаТЧ.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
		
		сообщить("строка ведомости"+стр.Физлицо);
		
	КонецЦикла;
	
	
КонецПроцедуры	

Процедура ЗаполнитьТаблицуЗП(номер, СтатьяДДС, ТЧ)
	
	Для каждого стр из Объект.ПеречислениеЗП цикл
		Если стр.НомерПП = Номер тогда
			Ведомость = НайтиВедомость(стр.ВедомостьНомер);
			ЗаполнитьСоставомВедомости(ТЧ, Ведомость, СтатьяДДС);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура СформироватьППисходящие(СтрокаТаблицы)
	
	//Для каждого стр из Объект.СписокДокументов цикл
	
	Если СтрокаТаблицы.Флаг тогда
		
		НовоеПП = Документы.СписаниеСРасчетногоСчета.СоздатьДокумент();
		
		Если СтрокаТаблицы.ВидОперацииПП = 0 тогда  //оплата постащику
			
			Договор    = ПоискДоговора("","","",СтрокаТаблицы.КодДоговора);
			Контрагент = ПоискКонтрагента(СтрокаТаблицы.КодКонтрагента) ;
			
			НовоеПП.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
			НовоеПП.СчетБанк    = строкаТаблицы.БанкСчет;
			НовоеПП.Дата        = строкаТаблицы.ДатаДок;
			НовоеПП.ДоговорКонтрагента     = Договор;
			НовоеПП.Контрагент             = Контрагент;
			НовоеПП.ЕстьРасчетыСКонтрагентами = истина;
			НовоеПП.ЕстьУчетПоСтатьямДДС      = истина;
			НовоеПП.ВалютаДокумента           = Справочники.Валюты.НайтиПоКоду(СтрокаТаблицы.ВалютаДоговора);
			НовоеПП.КратностьДокумента            = 1;
			НовоеПП.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(СтрокаТаблицы.СтатьяДДС);
			НовоеПП.НазначениеПлатежа             = СтрокаТаблицы.НазначениеПлатежа;
			НовоеПП.СчетКонтрагента               = НайтиБанковскийСчет(СтрокаТаблицы.СчетКонтрагента);
			НовоеПП.СчетБанк                      = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.БанкСчет);
			НовоеПП.СчетОрганизации               = НайтиБанковскийСчет(СтрокаТаблицы.СчетОрганизации);
			НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.ПпСчетРасчетовСКонтрагентами);
			НовоеПП.Комментарий                    = ""+строкаТаблицы.Контрагент;
			НовоеПП.Организация                    = Объект.Организация;
			НовоеПП.СуммаДокумента                 = СтрокаТаблицы.Сумма;
			
			ТЧрасшифровкиППвход(НовоеПП.РасшифровкаПлатежа,СтрокаТаблицы.НомерДок,НовоеПП.ВалютаДокумента ,НовоеПП.Дата, Договор);
			
			НовоеПП.Записать();
			
			
		ИначеЕсли СтрокаТаблицы.ВидОперацииПП=1 тогда //возврат от покупателя
			//		
			Договор    = ПоискДоговора("","","",СтрокаТаблицы.КодДоговора);
			Контрагент = ПоискКонтрагента(СтрокаТаблицы.КодКонтрагента) ;
			
			
			НовоеПП.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
			НовоеПП.СчетБанк    = строкаТаблицы.БанкСчет;
			НовоеПП.Дата        = строкаТаблицы.ДатаДок;
			НовоеПП.ДатаВходящегоДокумента = строкаТаблицы.ДатаДокументаПоставщика;
			НовоеПП.ДоговорКонтрагента     = Договор;
			НовоеПП.Контрагент             = Контрагент;
			НовоеПП.ЕстьРасчетыСКонтрагентами = истина;
			НовоеПП.ЕстьУчетПоСтатьямДДС      = истина;
			НовоеПП.ВалютаДокумента           = Справочники.Валюты.НайтиПоКоду(СтрокаТаблицы.ВалютаДоговора);
			НовоеПП.КратностьДокумента        = ПолучитьКратностьВал(СтрокаТаблицы.ВалютаДоговора,СтрокаТаблицы.ДатаДок);
			НовоеПП.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(СтрокаТаблицы.СтатьяДДС);
			НовоеПП.НазначениеПлатежа             = СтрокаТаблицы.НазначениеПлатежа;
			НовоеПП.СчетКонтрагента               = НайтиБанковскийСчет(СтрокаТаблицы.СчетКонтрагента);
			НовоеПП.СчетБанк                      = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.БанкСчет);
			НовоеПП.СчетОрганизации               = НайтиБанковскийСчет(СтрокаТаблицы.СчетОрганизации);
			НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.ПпСчетРасчетовСКонтрагентами);
			НовоеПП.НомерВходящегоДокумента        = строкаТаблицы.НомерДокументаПоставщика;
			НовоеПП.Комментарий                    = ""+строкаТаблицы.Контрагент+",код дог."+строкаТаблицы.КодДоговора;
			НовоеПП.Организация                    = Объект.Организация;
			НовоеПП.СуммаДокумента                 = СтрокаТаблицы.Сумма;
			
			ТЧрасшифровкиППвход(НовоеПП.РасшифровкаПлатежа,СтрокаТаблицы.НомерДок,НовоеПП.ВалютаДокумента ,НовоеПП.Дата, Договор);
			
			НовоеПП.Записать();
			
			//		
			//	//ИначеЕсли СтрокаТаблицы.ВидОперацииПП=3 тогда //расчеты по займам
			//	//	НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам;
			
			//	//ИначеЕсли СтрокаТаблицы.ВидОперацииПП=4 тогда //прочие рас
			//	//	НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			//	//ИначеЕсли СтрокаТаблицы.ВидОперацииПП=5 тогда //инкассация
			//	//	НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация;
			//	//ИначеЕсли СтрокаТаблицы.ВидОперацииПП=6 тогда //приобретение ин. валюты
			//	//	НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты;
			
			//	//ИначеЕсли СтрокаТаблицы.ВидОперацииПП=7 тогда //поступление от продажи вал.
			//	//	НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты;
			
			//	//ИначеЕсли СтрокаТаблицы.ВидОперацииПП=8 тогда //
			//	//	НовоеПП.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
			
			
		ИначеЕсли СтрокаТаблицы.ВидОперацииПП = 2 тогда //перечисление налогов
			
			Контрагент = ПоискКонтрагента(СтрокаТаблицы.КодКонтрагента) ;
			Договор    = "";
			
			НовоеПП.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
			НовоеПП.СчетБанк               = строкаТаблицы.БанкСчет;
			НовоеПП.Дата                   = строкаТаблицы.ДатаДок;
			НовоеПП.ДатаВходящегоДокумента = строкаТаблицы.ДатаДокументаПоставщика;
			НовоеПП.Контрагент             = Контрагент;
			НовоеПП.ЕстьУчетПоСтатьямДДС           = истина;
			//НовоеПП.ЕстьРасчетыСКонтрагентами      = истина;
			
			НовоеПП.ВалютаДокумента                = Справочники.Валюты.НайтиПоКоду("643");
			НовоеПП.КратностьДокумента             = 1;
			НовоеПП.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000008");
			НовоеПП.НазначениеПлатежа              = СтрокаТаблицы.НазначениеПлатежа;
			НовоеПП.СчетКонтрагента                = НайтиБанковскийСчет(СтрокаТаблицы.СчетКонтрагента);
			НовоеПП.СчетБанк                       = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.БанкСчет);
			НовоеПП.СчетОрганизации                = НайтиБанковскийСчет(СтрокаТаблицы.СчетОрганизации);
			НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.ПпСчетРасчетовСКонтрагентами);
			Если НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы тогда
				НовоеПП.СубконтоДт1 = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду(строкаТаблицы.ППСубконтоКт1);
			ИначеЕсли НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом тогда
				НовоеПП.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
				НовоеПП.СубконтоДт2 = Перечисления.УровниБюджетов.РегиональныйБюджет;
			ИначеЕсли НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами тогда
				НовоеПП.СубконтоДт1 = Справочники.Контрагенты.НайтиПоКоду(строкатаблицы.ППСубконтоКт1);
				НовоеПП.СубконтоДт2 = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(строкатаблицы.ППСубконтоКт1);				   
			КонецЕсли;   
			НовоеПП.НомерВходящегоДокумента        = строкаТаблицы.НомерДокументаПоставщика;
			НовоеПП.Комментарий                    = ""+строкаТаблицы.Контрагент+"/"+СтрокаТаблицы.ППСубконтоКт1+"/"+СтрокаТаблицы.ППСубконтоКт2+"/"+СтрокаТаблицы.ППСубконтоКт3;
			НовоеПП.Организация                    = Объект.Организация;
			НовоеПП.СуммаДокумента                 = СтрокаТаблицы.Сумма;
			
			
			//ТЧрасшифровкиППвход(НовоеПП.РасшифровкаПлатежа,СтрокаТаблицы.НомерДок,НовоеПП.ВалютаДокумента ,НовоеПП.Дата, Договор); 
			//ТЧрасшифровкиППисх_прочий_расход(НовоеПП.РасшифровкаПлатежа,СтрокаТаблицы.НомерДок,НовоеПП.ВалютаДокумента ,НовоеПП.Дата, Договор, СтрокаТаблицы.Сумма,0,НовоеПП.СтатьяДвиженияДенежныхСредств);  
			
			СтрокаТч = НовоеПП.РасшифровкаПлатежа.добавить();
			СтрокаТЧ.ДоговорКонтрагента      = Договор;
			СтрокаТЧ.КурсВзаиморасчетов       = 1;
			СтрокаТЧ.КратностьВзаиморасчетов  = 1;
			СтрокаТЧ.СуммаНДС                       = 0;
			СтрокаТЧ.суммаПлатежа                   = строкаТаблицы.Сумма;
			СтрокаТЧ.СуммаВзаиморасчетов            = строкаТаблицы.Сумма;
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
			СтрокаТЧ.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
			СтрокаТЧ.СтавкаНДС                      = перечисления.СтавкиНДС.НДС18;
			СтрокаТЧ.СпособПогашенияЗадолженности   = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СтрокаТЧ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000008");
			
			
			
			НовоеПП.Записать();
			
			
			
		ИначеЕсли СтрокаТаблицы.ВидОперацииПП = 8 тогда 
			
			Контрагент = ПоискКонтрагента(СтрокаТаблицы.КодКонтрагента) ;
			Договор    = "";
			
			НовоеПП.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			НовоеПП.СчетБанк               = строкаТаблицы.БанкСчет;
			НовоеПП.Дата                   = строкаТаблицы.ДатаДок;
			НовоеПП.ДатаВходящегоДокумента = строкаТаблицы.ДатаДокументаПоставщика;
			НовоеПП.Контрагент             = Контрагент;
			НовоеПП.ЕстьУчетПоСтатьямДДС           = истина;
			// НовоеПП.ЕстьРасчетыСКонтрагентами      = истина;
			
			НовоеПП.ВалютаДокумента                = Справочники.Валюты.НайтиПоКоду("643");
			НовоеПП.КратностьДокумента             = 1;
			НовоеПП.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(СтрокаТаблицы.СтатьяДДС);
			НовоеПП.НазначениеПлатежа              = СтрокаТаблицы.НазначениеПлатежа;
			НовоеПП.СчетКонтрагента                = НайтиБанковскийСчет(СтрокаТаблицы.СчетКонтрагента);
			НовоеПП.СчетБанк                       = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.БанкСчет);
			НовоеПП.СчетОрганизации                = НайтиБанковскийСчет(СтрокаТаблицы.СчетОрганизации);
			НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.ПпСчетРасчетовСКонтрагентами);
			Если НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы тогда
				НовоеПП.СубконтоДт1 = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду(строкаТаблицы.ППСубконтоКт1);
			ИначеЕсли НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом тогда
				НовоеПП.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
				НовоеПП.СубконтоДт2 = Перечисления.УровниБюджетов.РегиональныйБюджет;
			ИначеЕсли НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами тогда
				НовоеПП.СубконтоДт1 = Справочники.Контрагенты.НайтиПоКоду(строкатаблицы.ППСубконтоКт1);
				НовоеПП.СубконтоДт2 = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(строкатаблицы.ППСубконтоКт2);	
				
			ИначеЕсли НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты тогда
				НовоеПП.СубконтоДт1 = Справочники.Контрагенты.НайтиПоКоду(строкатаблицы.ППСубконтоКт1);
				НовоеПП.СубконтоДт2 = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(строкатаблицы.ППСубконтоКт2);					   
			КонецЕсли;   
			НовоеПП.НомерВходящегоДокумента        = строкаТаблицы.НомерДокументаПоставщика;
			НовоеПП.Комментарий                    = ""+строкаТаблицы.Контрагент+"/"+СтрокаТаблицы.ППСубконтоКт1+"/"+СтрокаТаблицы.ППСубконтоКт2+"/"+СтрокаТаблицы.ППСубконтоКт3;
			НовоеПП.Организация                    = Объект.Организация;
			НовоеПП.СуммаДокумента                 = СтрокаТаблицы.Сумма;
			
			
			//ТЧрасшифровкиППвход(НовоеПП.РасшифровкаПлатежа,СтрокаТаблицы.НомерДок,НовоеПП.ВалютаДокумента ,НовоеПП.Дата, Договор); 
			//ТЧрасшифровкиППисх_прочий_расход(НовоеПП.РасшифровкаПлатежа,СтрокаТаблицы.НомерДок,НовоеПП.ВалютаДокумента ,НовоеПП.Дата, Договор, СтрокаТаблицы.Сумма,0,НовоеПП.СтатьяДвиженияДенежныхСредств);  
			СтрокаТч = НовоеПП.РасшифровкаПлатежа.добавить();
			СтрокаТЧ.ДоговорКонтрагента      = Договор;
			СтрокаТЧ.КурсВзаиморасчетов       = 1;
			СтрокаТЧ.КратностьВзаиморасчетов  = 1;
			СтрокаТЧ.СуммаНДС                       = 0;
			//СтрокаТЧ.суммаПлатежа                   = Сумма;
			СтрокаТЧ.СуммаВзаиморасчетов            = строкаТаблицы.Сумма;
			СтрокаТЧ.СуммаПлатежа                   = строкаТаблицы.Сумма;
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
			СтрокаТЧ.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;
			СтрокаТЧ.СтавкаНДС                      = перечисления.СтавкиНДС.НДС18;
			СтрокаТЧ.СпособПогашенияЗадолженности   = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СтрокаТЧ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(СтрокаТаблицы.СтатьяДДС);
			
			
			НовоеПП.Записать();
			
		ИначеЕсли СтрокаТаблицы.ВидОперацииПП = 6 тогда  //зп
			
			Контрагент = ПоискКонтрагента(СтрокаТаблицы.КодКонтрагента) ;
			
			НовоеПП.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
			НовоеПП.СчетБанк                = строкаТаблицы.БанкСчет;
			НовоеПП.Дата                   = строкаТаблицы.ДатаДок;
			НовоеПП.ДатаВходящегоДокумента = строкаТаблицы.ДатаДокументаПоставщика;
			НовоеПП.Контрагент             = справочники.Контрагенты.НайтиПоКоду("000000005");
			НовоеПП.ЕстьУчетПоСтатьямДДС           = истина;
			НовоеПП.ВалютаДокумента                = Справочники.Валюты.НайтиПоКоду("643");
			НовоеПП.КратностьДокумента             = 1;
			НовоеПП.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000009");
			НовоеПП.НазначениеПлатежа              = СтрокаТаблицы.НазначениеПлатежа;
			НовоеПП.СчетКонтрагента                = НайтиБанковскийСчет(СтрокаТаблицы.СчетКонтрагента);
			НовоеПП.СчетБанк                       = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.БанкСчет);
			НовоеПП.СчетОрганизации                = НайтиБанковскийСчет(СтрокаТаблицы.СчетОрганизации);
			НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(СтрокаТаблицы.ПпСчетРасчетовСКонтрагентами);
			Если НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы тогда
				НовоеПП.СубконтоДт1 = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду(строкаТаблицы.ППСубконтоКт1);
			ИначеЕсли НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом тогда
				НовоеПП.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
				НовоеПП.СубконтоДт2 = Перечисления.УровниБюджетов.РегиональныйБюджет;
			ИначеЕсли НовоеПП.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами тогда
				НовоеПП.СубконтоДт1 = Справочники.Контрагенты.НайтиПоКоду(строкатаблицы.ППСубконтоКт1);
				НовоеПП.СубконтоДт2 = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(строкатаблицы.ППСубконтоКт1);				   
			КонецЕсли;   
			НовоеПП.НомерВходящегоДокумента        = строкаТаблицы.НомерДокументаПоставщика;
			НовоеПП.Комментарий                    = ""+строкаТаблицы.Контрагент+"/"+СтрокаТаблицы.ППСубконтоКт1+"/"+СтрокаТаблицы.ППСубконтоКт2+"/"+СтрокаТаблицы.ППСубконтоКт3;
			НовоеПП.Организация                    = Объект.Организация;
			НовоеПП.СуммаДокумента                 = СтрокаТаблицы.Сумма;
			
			
			//ТЧрасшифровкиППвход(НовоеПП.РасшифровкаПлатежа,СтрокаТаблицы.НомерДок,НовоеПП.ВалютаДокумента ,НовоеПП.Дата, Договор); 
			//ТЧрасшифровкиППисх_прочий_расход(НовоеПП.РасшифровкаПлатежа,СтрокаТаблицы.НомерДок,НовоеПП.ВалютаДокумента ,НовоеПП.Дата, Договор, СтрокаТаблицы.Сумма,0,НовоеПП.СтатьяДвиженияДенежныхСредств);  
			
			ЗаполнитьТаблицуЗП(строкаТаблицы.НомерДок,НовоеПП.СтатьяДвиженияДенежныхСредств,НовоеПП.ПеречислениеЗаработнойПлаты);
			
			НовоеПП.Записать();
			
			
			
		КонецЕсли;
		
		
		
		
		
		
	КонецЕсли;	
	
	//КонецЦикла;	
	
КонецПроцедуры	

Процедура СформироватьРКО(СтрокаТаблицы)
	Если СтрокаТаблицы.Флаг тогда
		
		НовыйРКО                               = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
		НовыйРКО.Дата                          = СтрокаТаблицы.ДатаДок;
		НовыйРКО.СчетКасса                     = планыСчетов.Хозрасчетный.КассаОрганизации;
		НовыйРКО.Организация                   = Объект.Организация;
		НовыйРКО.Номер                         = СокрЛП(СтрокаТаблицы.НомерДок);
		НовыйРКО.ВидОперации                   = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу;
		НовыйРКО.ВалютаДокумента               = Справочники.Валюты.НайтиПоКоду("643");
		НовыйРКО.Выдать                        = НайтиФЛ(СтрокаТаблицы.Контрагент);
		НовыйРКО.Контрагент                    = НайтиФЛ(СтрокаТаблицы.Контрагент);
		НовыйРКО.СуммаДокумента                = СтрокаТаблицы.Сумма;
		НовыйРКО.ЕстьУчетПоСтатьямДДС          = истина;
		НовыйРКО.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000011");
		НовыйРКО.Приложение                    = СтрокаТаблицы.Приложение ;
		НовыйРКО.ПоДокументу                   = СтрокаТаблицы.ПоДокументу;
		НовыйРКО.СчетУчетаРасчетовСКонтрагентом =   ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
		
		СтрокаРасшифровки  = НовыйРКО.РасшифровкаПлатежа.Добавить();
		СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000011");
		СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
		СтрокаРасшифровки.СуммаВзаиморасчетов            = СтрокаТаблицы.Сумма;
		СтрокаРасшифровки.СуммаПлатежа                   = Строкатаблицы.Сумма;
		
		//Попытка
		//сообщить(""+СокрЛП(НовыйРКО.Номер));
		
		НовыйРКО.Записать();
		//Исключение
		//КонецПопытки;
		
		
		
		
		
		
	КонецЕсли;	
КонецПроцедуры

Процедура СформироватьПКО(строкаТаблицы)
	
	//Для каждого стр из Объект.СписокДокументов цикл
	ДокПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	ДокПКО.Номер = "000"+строкаТаблицы.НомерДок;
	ДокПКО.Дата  = строкаТаблицы.ДатаДок;
	ДокПКО.ВидОперации = перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	ДокПКО.Организация = Объект.Организация;
	ДокПКО.ВалютаДокумента = справочники.Валюты.НайтиПоКоду("643");
	ДокПКО.Приложение  = строкаТаблицы.Приложение;
	ДокПКО.Основание   = строкаТаблицы.ОснованиеРКО;
	ДокПКО.ПринятоОт   = строкаТаблицы.ПринятоОт;
	ДокПКО.ЕстьРасчетыСКонтрагентами     = истина;
	ДокПКО.СчетУчетаРасчетовСКонтрагентом = Планысчетов.Хозрасчетный.РасчетыСПокупателями;
	ДокПКО.СуммаДокумента = строкаТаблицы.Сумма;
	ДокПКО.СчетКасса      = планысчетов.Хозрасчетный.КассаОрганизации;
	ДокПКО.Контрагент     = справочники.Контрагенты.НайтиПоКоду(Прав(строкаТаблицы.ППСубконтоКт1,9));
	
	ТЧрасшифровка = ДокПКО.РасшифровкаПлатежа.Добавить();
	ТЧрасшифровка.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	ТЧрасшифровка.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	ТЧрасшифровка.СуммаВзаиморасчетов            = строкаТаблицы.Сумма;
	ТЧрасшифровка.СуммаПлатежа                   = строкаТаблицы.Сумма;
	ТЧрасшифровка.СпособПогашенияЗадолженности = перечисления.СпособыПогашенияЗадолженности.Автоматически;
	ТЧрасшифровка.ДоговорКонтрагента   = справочники.ДоговорыКонтрагентов.НайтиПоКоду(строкаТаблицы.ППСубконтоКт2);
	
	ДокПКО.Записать();
	
	//КонецЦикла;
	
КонецПроцедуры	

//-------------------------------------------------------------------

Процедура ЗагрузитьОтчетыКомиссионера()
	
	//   
	//   Если Объект.СписокНоменклатуры.Количество()>0 тогда
	//   	Объект.СписокНоменклатуры.Очистить();
	//   КонецЕсли;	
	
	//   
	//   Если Объект.СписокДокументов.Количество()>0 тогда
	//   	Объект.СписокДокументов.Очистить();
	//   КонецЕсли;	
	//   
	//   сообщить("начало подключения:"+ТекущаяДата());	
	//   V81 = Новый COMОбъект("V82.Application");
	//   Попытка 
	//   	Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//   Исключение
	//   	Предупреждение("База данных не открыта!");
	//   	возврат;
	//   КонецПопытки;
	//   
	//   Попытка
	//   	Запрос8  = V81.NewObject("Запрос");
	//   	Запрос8_ = V81.NewObject("Запрос");
	
	//   Исключение
	//   	Сообщить(ОписаниеОшибки());
	//   	Возврат;
	//   КонецПопытки;
	//   
	//	Запрос8.Текст ="ВЫБРАТЬ
	//				   |	ОтчетКомиссионераОПродажахТовары.Ссылка КАК Ссылка,
	//				   |	ОтчетКомиссионераОПродажахТовары.Ссылка.Номер КАК Номер,
	//				   |	ОтчетКомиссионераОПродажахТовары.Ссылка.Дата КАК Дата,
	//				   |	ОтчетКомиссионераОПродажахТовары.Номенклатура КАК Номенклатура,
	//				   |	ОтчетКомиссионераОПродажахТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
	//				   |	ОтчетКомиссионераОПродажахТовары.Номенклатура.Артикул КАК Артикул,
	//				   |	ОтчетКомиссионераОПродажахТовары.Номенклатура.Код КАК НоменклатураКод,
	//				   |	ОтчетКомиссионераОПродажахТовары.Количество КАК Количество,
	//				   |	ОтчетКомиссионераОПродажахТовары.Цена КАК Цена,
	//				   |	ОтчетКомиссионераОПродажахТовары.СуммаНДС КАК СуммаНДС,
	//				   |	ОтчетКомиссионераОПродажахТовары.Сумма КАК Сумма,
	//				   |	ОтчетКомиссионераОПродажахТовары.Ссылка.Контрагент.Наименование КАК Контрагент,
	//				   |	ОтчетКомиссионераОПродажахТовары.Ссылка.Контрагент.Код КАК КодКонтрагента,
	//				   |	ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения.Наименование КАК Единица,
	//				   |	ОтчетКомиссионераОПродажахТовары.Ссылка.Контрагент.ИНН КАК ИНН,
	//				   |	ОтчетКомиссионераОПродажахТовары.Ссылка.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	//				   |	ОтчетКомиссионераОПродажахТовары.Ссылка.ДоговорКонтрагента.Код КАК ДоговорКод,
	//				   |	ОтчетКомиссионераОПродажахТовары.Ссылка.ДоговорКонтрагента.ВидДоговора.Порядок КАК ВидДоговора,
	//				   |	ОтчетКомиссионераОПродажахТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код КАК ВалютаДоговора,
	//				   |	ОтчетКомиссионераОПродажахТовары.ЦенаПередачи,
	//				   |	ОтчетКомиссионераОПродажахТовары.СуммаПередачи,
	//				   |	ОтчетКомиссионераОПродажахТовары.СуммаНДСПередачи,
	//				   |	ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения,
	//				   |	ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения
	//				   |ИЗ
	//				   |	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	//				   |ГДЕ
	//				   |	ОтчетКомиссионераОПродажахТовары.Ссылка.Проведен = ИСТИНА
	//				   |	И ОтчетКомиссионераОПродажахТовары.Ссылка.Объект.Организация.Код = &КодОрганизации
	//				   |	И ОтчетКомиссионераОПродажахТовары.Ссылка.Дата МЕЖДУ &Период.ДатаНачала И &Период.ДатаОкончания";	
	
	//
	//   
	//	Запрос8.УстановитьПараметр("Период.ДатаНачала",НачалоДня(Период.ДатаНачала));
	//	Запрос8.УстановитьПараметр("Период.ДатаОкончания",КонецДня(Период.ДатаОкончания));
	//	Запрос8.УстановитьПараметр("КодОрганизации",КодОрганизации);
	
	//	
	//	Выборка = Запрос8.Выполнить().Выгрузить();
	//	
	//	Для каждого Стр из выборка цикл
	//   	 
	//   	СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
	//   	СтрокаСпискаДокументов.ДатаДок  = Стр.дата;
	//   	СтрокаСпискаДокументов.НомерДок = Стр.номер;
	//   	СтрокаСпискаДокументов.Контрагент = Стр.Контрагент;
	//   	СтрокаСпискаДокументов.КодКонтрагента = СокрЛП(Стр.КодКонтрагента);
	//   	СтрокаСпискаДокументов.Сумма = Стр.Сумма;
	//   	СтрокаСпискаДокументов.СуммаНДС = Стр.СуммаНДС;
	//   	СтрокаСпискаДокументов.Документа = "Отчет комиссионера";
	//   	СтрокаСпискаДокументов.Флаг = истина;
	//   	СтрокаСпискаДокументов.ПризнакПрихода = 2;
	//   	СтрокаСпискаДокументов.инн = Стр.инн;
	//   	//СтрокаСпискаДокументов.НомерСчФактурыВх = Стр.НомерСчФ;
	//   	//СтрокаСпискаДокументов.ДатаСчФактурыВх  = Стр.ДатаСчФ;
	//   	СтрокаСпискаДокументов.КодДоговора          = Стр.ДоговорКод;
	//   	СтрокаСпискаДокументов.НаименованиеДоговора = Стр.ДоговорНаименование;
	//   	СтрокаСпискаДокументов.ТипДоговора          = Стр.ВидДоговора;
	//   	СтрокаСпискаДокументов.ВалютаДоговора       = Стр.ВалютаДоговора;
	//   	//СтрокаСпискаДокументов.КодСклада            = Стр.КодСклада;
	//   	//СтрокаСпискаДокументов.Комментарий          = Стр.Комментарий;
	//   	//СтрокаСпискаДокументов.СуммаВключаетНДС     = Стр.СуммаВключаетНДС;
	//   	//СтрокаСпискаДокументов.УчитыватьНДС         = Стр.УчитыватьНДС;
	
	
	//   	СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
	//   	СтрокаСпискаНоменклатуры._ДатаДок      = Стр.дата;
	//   	СтрокаСпискаНоменклатуры._КодНом       = Стр.НоменклатураКод;
	//   	СтрокаСпискаНоменклатуры._Номенклатура = Стр.НоменклатураНаименование;
	//   	СтрокаСпискаНоменклатуры._НомерДок     = Стр.Номер;
	//   	СтрокаСпискаНоменклатуры._Сумма        = Стр.Сумма;
	//   	СтрокаСпискаНоменклатуры._СуммаНДС     = Стр.СуммаНДС;
	//   	СтрокаСпискаНоменклатуры._Цена         = Стр.Цена;
	//   	СтрокаСпискаНоменклатуры._Количество   = Стр.Количество;
	//   	СтрокаСпискаНоменклатуры._Артикул      = Стр.Артикул;
	//   	СтрокаСпискаНоменклатуры._Единица      = Стр.Единица;
	//   	СтрокаСпискаНоменклатуры._ЦенаПередачи  = Стр.ЦенаПередачи;
	//   	СтрокаСпискаНоменклатуры._СуммаПередачи = Стр.СуммаПередачи;
	//   	СтрокаСпискаНоменклатуры._СуммаНДСпередачи = Стр.СуммаНДСПередачи;
	//   	СтрокаСпискаНоменклатуры._Вознаграждение   = Стр.СуммаВознаграждения;
	//   	СтрокаСпискаНоменклатуры._НДСвознагрждения = Стр.СуммаНДСВознаграждения;
	//   	
	//   КонецЦикла;
	//   
	//   	
	//   Объект.СписокДокументов.Свернуть("ДатаДок,НомерДок,Контрагент,Документа,Флаг,ПризнакПрихода,ВидВозврата,КодКонтрагента,ИНН,НомерСчФактурыВх,ДатаСчФактурыВх,КодДоговора,НаименованиеДоговора,ТипДоговора,ВалютаДоговора,КодСклада,Комментарий,СуммаВключаетНДС,УчитыватьНДС","Сумма,СуммаНДС");
	//   
КонецПроцедуры

Процедура АвтоЗапуск(Кнопка)
	// 
	// 
КонецПроцедуры

Процедура ЗагрузитьКорректировкиРеализации(Кнопка)
	
	//
	//Если Объект.СписокДокументов.Количество()>0 тогда
	//	Объект.СписокДокументов.Очистить();
	//КонецЕсли;	
	//
	//Если Объект.СписокНоменклатуры.Количество()>0 тогда
	//	Объект.СписокНоменклатуры.Очистить();
	//КонецЕсли;	
	//
	//
	//сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V81.Application");
	//Попытка 
	//	Открытие = V81.Connect("Srvr="""+"ndc02"+""";Ref="""+"ut2010"+""";Usr="""+"КоноваловаМ"+""";Pwd="""+"252118"+""";");
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	//
	//Попытка
	//	Запрос8  = V81.NewObject("Запрос");
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки;
	//
	//ЗаполнитьТоварамиКорректировок(Запрос8);
	////ЗаполнитьУслугами(Запрос8);
	//
	//
	//сообщить("окончание подключения:"+ТекущаяДата());
	//
	
	
КонецПроцедуры

Процедура ЗаполнитьТоварамиКорректировок(Запрос)
	
	Запрос.Текст =   "ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Ссылка.Дата КАК Дата,
	|	КорректировкаРеализацииТовары.Ссылка.Номер КАК Номер,
	|	КорректировкаРеализацииТовары.Ссылка.Контрагент.Код,
	|	КорректировкаРеализацииТовары.Ссылка.Контрагент.Наименование,
	|	КорректировкаРеализацииТовары.Ссылка.ДоговорКонтрагента.Код КАК ДоговорКод,
	|	КорректировкаРеализацииТовары.Ссылка.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	КорректировкаРеализацииТовары.Номенклатура.Наименование,
	|	КорректировкаРеализацииТовары.Номенклатура.Код,
	|	КорректировкаРеализацииТовары.Количество,
	|	КорректировкаРеализацииТовары.Ссылка.ДокументОснование.Номер,
	|	КорректировкаРеализацииТовары.Ссылка.ДокументОснование.Дата,
	|	КорректировкаРеализацииТовары.Цена,
	|	КорректировкаРеализацииТовары.Сумма,
	|	КорректировкаРеализацииТовары.СуммаНДС,
	|	КорректировкаРеализацииТовары.СуммаДоИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.ЦенаДоИзменения,
	|	КорректировкаРеализацииТовары.КоличествоДоИзменения,
	|	КорректировкаРеализацииТовары.Номенклатура.Артикул КАК Артикул,
	|	КорректировкаРеализацииТовары.Ссылка.СуммаВключаетНДС,
	|	ВложенныйЗапрос.Дата КАК ДатаСчФ,
	|	ВложенныйЗапрос.Номер КАК НомерСчФ,
	|	ВложенныйЗапрос.НомерИсправления,
	|	ВложенныйЗапрос.ДатаИсправления
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|			СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата,
	|			СчетФактураВыданныйДокументыОснования.Ссылка.Номер КАК Номер,
	|			СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
	|			СчетФактураВыданныйДокументыОснования.Ссылка.ДатаИсправления КАК ДатаИсправления
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования) КАК ВложенныйЗапрос
	|		ПО КорректировкаРеализацииТовары.Ссылка = ВложенныйЗапрос.ДокументОснование
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И КорректировкаРеализацииТовары.Ссылка.Проведен = ИСТИНА
	|	И КорректировкаРеализацииТовары.Ссылка.Организация.Код = &КодОрг";
	
	
	
	
	Запрос.УстановитьПараметр("НачДата",НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("конДата",КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("КодОрг",Объект.Организация.Код);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр из выборка цикл
		
		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.ДатаДок           = Стр.дата;
		СтрокаСпискаДокументов.НомерДок          = Стр.номер;
		СтрокаСпискаДокументов.Контрагент     = Стр.КонтрагентНаименование;
		СтрокаСпискаДокументов.КодКонтрагента = Стр.КонтрагентКод;
		СтрокаСпискаДокументов.Сумма = Стр.Сумма;
		СтрокаСпискаДокументов.СуммаНДС       = Стр.СуммаНДС;
		СтрокаСпискаДокументов.Документа                = "Корректир. реал.";
		СтрокаСпискаДокументов.Флаг                     = истина;
		СтрокаСпискаДокументов.НомерДокОснования        = стр.ДокументОснованиеНомер;
		СтрокаСпискаДокументов.СуммаВключаетНДС         = стр.СуммаВключаетНДС;
		СтрокаСпискаДокументов.НомерСчФактурыВх         = стр.НомерСчФ;
		СтрокаСпискаДокументов.ДатаСчФактурыВх          = стр.ДатаСчФ;
		СтрокаСпискаДокументов.НомерИсправления         = стр.НомерИсправления;
		СтрокаСпискаДокументов.ДатаИсправления          = стр.ДатаИсправления;
		СтрокаСпискаДокументов.ПризнакПрихода           = 88;
		
		
		
		//ТекКонтрагент = ПоискКонтрагента(стр.КонтрагентКод);
		//Если ЗначениеЗаполнено(ТекКонтрагент) тогда
		//	СтрокаСпискаДокументов.КонтрагентТекущий        = ТекКонтрагент;
		//Иначе
		//	сообщить("ВНИМАНИЕ! Не найден контрагент:"+стр.КонтрагентНаименование);
		//КонецЕсли;
		//
		//Докоснование = НайтиДокументыРеализации(стр.ДокументОснованиеНомер) ;
		
		
		
		СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
		СтрокаСпискаНоменклатуры._ДатаДок             = Стр.дата;
		СтрокаСпискаНоменклатуры._КодНом  = Стр.НоменклатураКод;
		СтрокаСпискаНоменклатуры._Номенклатура     = Стр.НоменклатураНаименование;
		СтрокаСпискаНоменклатуры._НомерДок            = Стр.Номер;
		СтрокаСпискаНоменклатуры._Сумма            = Стр.Сумма;
		СтрокаСпискаНоменклатуры._СуммаНДС         = Стр.СуммаНДС;
		СтрокаСпискаНоменклатуры._Цена             = Стр.Цена;
		СтрокаСпискаНоменклатуры._Количество       = Стр.Количество;
		СтрокаСпискаНоменклатуры._ЦенаДо           = стр.ЦенаДоИзменения;
		СтрокаСпискаНоменклатуры._СуммаДо          = стр.СуммаДоИзменения;
		СтрокаСпискаНоменклатуры._СуммаНДСДо       = стр.СуммаНДСдоИзменения;
		СтрокаСпискаНоменклатуры._КоличествоДо     = стр.КоличествоДоИзменения;
		
		//ТекНом = НайтиПоАртикулу(СокрЛП(стр.Артикул));
		//Если ЗначениеЗаполнено(ТекНом) тогда
		//	СтрокаСпискаНоменклатуры.НоменклатураТекущая  = ТекНом;
		//Иначе
		//	 сообщить("ВНИМАНИЕ! Артикул:"+стр.Артикул+"в базе не обнаружен!");
		//КонецЕсли;	
		
	КонецЦикла;	 
	
	Объект.СписокДокументов.Свернуть("ДатаДок,НомерДок,Контрагент,КодКонтрагента,Документа,Флаг,НомерСчФактурыВх,НомерИсправления,ДатаИсправления,ДатаСчФактурыВх,СуммаВключаетНДС,НомерДокОснования,ПризнакПрихода","Сумма,СуммаНДС");
	
КонецПроцедуры	

Процедура ЗапросПоТЧ_товарыАО(Запрос)
	
	Запрос.Текст =  "ВЫБРАТЬ
	|	АвансовыйОтчетТовары.Ссылка.Дата,
	|	АвансовыйОтчетТовары.Ссылка.Номер,
	|	АвансовыйОтчетТовары.НомерВходящегоДокумента,
	|	АвансовыйОтчетТовары.ДатаВходящегоДокумента,
	|	АвансовыйОтчетТовары.Поставщик.Код,
	|	АвансовыйОтчетТовары.Поставщик.Наименование,
	|	АвансовыйОтчетТовары.Количество,
	|	АвансовыйОтчетТовары.Цена,
	|	АвансовыйОтчетТовары.Сумма,
	|	АвансовыйОтчетТовары.СуммаНДС,
	|	АвансовыйОтчетТовары.Ссылка.СуммаВключаетНДС,
	|	АвансовыйОтчетТовары.Ссылка.УчитыватьНДС,
	|	АвансовыйОтчетТовары.Поставщик.ИНН,
	|	АвансовыйОтчетТовары.Ссылка.ФизЛицо.Наименование КАК ФизЛицо,
	|	АвансовыйОтчетТовары.ВидДокВходящий,
	|	АвансовыйОтчетТовары.Номенклатура.Наименование,
	|	АвансовыйОтчетТовары.Номенклатура.Код,
	|	АвансовыйОтчетТовары.Поставщик.Код КАК КодПоставщика,
	|	АвансовыйОтчетТовары.Поставщик.Наименование КАК НаименованиеПоставщика,
	|	АвансовыйОтчетТовары.Ссылка.ФизЛицо.Код,
	|	АвансовыйОтчетТовары.Ссылка.Склад.Код КАК Склад,
	|	АвансовыйОтчетТовары.СчетУчетаБУ.Код КАК СчетУчета,
	|	АвансовыйОтчетТовары.СчетУчетаНДС.Код КАК СчетУчетаНДС
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
	|ГДЕ
	|	АвансовыйОтчетТовары.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И АвансовыйОтчетТовары.Ссылка.Проведен = ИСТИНА
	|	И АвансовыйОтчетТовары.Ссылка.Организация.Код = &КодОрганизации";
	
	
	
	Запрос.УстановитьПараметр("НачДата",НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонДата",КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("КодОрганизации","000000001");
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр из выборка цикл
		
		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.ДатаДок  = Стр.Дата;
		СтрокаСпискаДокументов.НомерДок = Стр.Номер;
		//СтрокаСпискаДокументов.Контрагент              = Стр.КонтрагентНаименование;
		//СтрокаСпискаДокументов.КодКонтрагента           = Стр.КонтрагентКод;
		СтрокаСпискаДокументов.Документа                = "Авансовый отчет";
		СтрокаСпискаДокументов.Флаг = истина;
		СтрокаСпискаДокументов.ПризнакПрихода           = 15;
		СтрокаСпискаДокументов.СуммаВключаетНДС         = Стр.СуммаВключаетНДС;
		СтрокаСпискаДокументов.УчитыватьНДС             = Стр.УчитыватьНДС;
		//СтрокаСпискаДокументов.Подразделение            = стр.ПодразделениеОрганизации;
		//СтрокаСпискаДокументов.ПодразделениеУпр         = стр.Подразделение;
		//СтрокаСпискаДокументов.ДатаСчФактурыВх          = стр.ДатаВходящегоДокумента;
		//СтрокаСпискаДокументов.НомерСчФактурыВх         = стр.НомерВходящегоДокумента;
		//СтрокаСпискаДокументов.Сумма                    = стр.Сумма;
		//СтрокаСпискаДокументов.СуммаНДС                 = стр.СуммаНДС;
		//СтрокаСпискаДокументов.ИНН                      = стр.ПоставщикИНН;
		СтрокаСпискаДокументов.НаименованиеФЛ           = стр.ФизЛицоКод;
		СтрокаСпискаДокументов.КодСклада                = стр.Склад;
		
		
		СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
		СтрокаСпискаНоменклатуры._ДатаДок      = Стр.дата;
		СтрокаСпискаНоменклатуры._КодНом       = Стр.НоменклатураКод;
		СтрокаСпискаНоменклатуры._Номенклатура = Стр.НоменклатураНаименование;
		СтрокаСпискаНоменклатуры._НомерДок     = Стр.Номер;
		СтрокаСпискаНоменклатуры._Сумма        = Стр.Сумма;
		СтрокаСпискаНоменклатуры._СуммаНДС     = Стр.СуммаНДС;
		СтрокаСпискаНоменклатуры._Цена         = Стр.Цена;
		СтрокаСпискаНоменклатуры._Количество   = Стр.Количество;
		СтрокаСпискаНоменклатуры.ВидДокВходящий= стр.ВидДокВходящий;
		СтрокаСпискаНоменклатуры.НомерВходящегоДокумента = стр.НомерВходящегоДокумента;
		СтрокаСпискаНоменклатуры.ДатаВходящегоДокумента  = стр.ДатаВходящегоДокумента;
		СтрокаСпискаНоменклатуры.КодКонтрагента          = стр.КодПоставщика;
		СтрокаСпискаНоменклатуры.НаименованиеПоставщика  = стр.НаименованиеПоставщика;
		СтрокаСпискаНоменклатуры.СчетУчета                = стр.СчетУчета;
		СтрокаСпискаНоменклатуры.СчетУчетаНДС             = стр.СчетУчетаНДС;
		
		
	КонецЦикла;	 
	
	//	 Объект.СписокДокументов.Свернуть("ДатаДок,НомерДок,Документа,Флаг,ПризнакПрихода,СуммаВключаетНДС,УчитыватьНДС,КодСклада, НаименованиеФЛ","Сумма,СуммаНДС");
	
Конецпроцедуры	

Процедура ЗапросПоТЧ_прочееАО(Запрос)
	
	
	Запрос.Текст =  "ВЫБРАТЬ
	|	АвансовыйОтчетПрочее.Ссылка.Номер,
	|	АвансовыйОтчетПрочее.Ссылка.Дата,
	|	АвансовыйОтчетПрочее.Ссылка.ФизЛицо.Наименование КАК ФизЛицо,
	|	АвансовыйОтчетПрочее.ВидДокВходящий,
	|	АвансовыйОтчетПрочее.НомерВходящегоДокумента,
	|	АвансовыйОтчетПрочее.ДатаВходящегоДокумента,
	|	АвансовыйОтчетПрочее.Содержание,
	|	АвансовыйОтчетПрочее.Сумма,
	|	АвансовыйОтчетПрочее.СуммаНДС,
	|	АвансовыйОтчетПрочее.СчетЗатрат.Код КАК СчетЗатрат,
	|	АвансовыйОтчетПрочее.Ссылка.Организация.Код КАК КодОрганизации,
	|	АвансовыйОтчетПрочее.Поставщик.Код,
	|	АвансовыйОтчетПрочее.Поставщик.Наименование,
	|	АвансовыйОтчетПрочее.Поставщик.ИНН КАК ИНН,
	|	АвансовыйОтчетПрочее.СчетЗатратНУ.Код КАК СчетЗатратНУ,
	|	АвансовыйОтчетПрочее.Субконто1.Код КАК Субконто1,
	|	АвансовыйОтчетПрочее.Субконто2.Код КАК Субконто2,
	|	АвансовыйОтчетПрочее.Субконто3.Код КАК Субконто3,
	|	АвансовыйОтчетПрочее.ПредъявленСФ,
	|	АвансовыйОтчетПрочее.ДатаСФ,
	|	АвансовыйОтчетПрочее.НомерСФ,
	|	АвансовыйОтчетПрочее.СуммаНДС КАК СуммаНДС1,
	|	АвансовыйОтчетПрочее.Ссылка.Склад.Код КАК Склад,
	|	АвансовыйОтчетПрочее.Ссылка.СуммаВключаетНДС,
	|	АвансовыйОтчетПрочее.Ссылка.УчитыватьНДС,
	|	АвансовыйОтчетПрочее.Ссылка.ФизЛицо.Код
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
	|ГДЕ
	|	АвансовыйОтчетПрочее.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И АвансовыйОтчетПрочее.Ссылка.Проведен = ИСТИНА" ;
	//  |	И АвансовыйОтчетПрочее.Ссылка.ОтражатьВБухгалтерскомУчете = ИСТИНА";
	
	
	
	Запрос.УстановитьПараметр("НачДата",НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонДата",КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("КодОрганизации","000000001");
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр из выборка цикл
		
		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.ДатаДок  = Стр.Дата;
		СтрокаСпискаДокументов.НомерДок = Стр.Номер;
		//СтрокаСпискаДокументов.Контрагент              = Стр.КонтрагентНаименование;
		//СтрокаСпискаДокументов.КодКонтрагента           = Стр.КонтрагентКод;
		СтрокаСпискаДокументов.Документа                = "Авансовый отчет";
		СтрокаСпискаДокументов.Флаг = истина;
		СтрокаСпискаДокументов.ПризнакПрихода           = 15;
		СтрокаСпискаДокументов.СуммаВключаетНДС         = Стр.СуммаВключаетНДС;
		СтрокаСпискаДокументов.УчитыватьНДС             = Стр.УчитыватьНДС;
		//СтрокаСпискаДокументов.Подразделение            = стр.ПодразделениеОрганизации;
		//СтрокаСпискаДокументов.ПодразделениеУпр         = стр.Подразделение;
		//СтрокаСпискаДокументов.ДатаСчФактурыВх          = стр.ДатаВходящегоДокумента;
		//СтрокаСпискаДокументов.НомерСчФактурыВх         = стр.НомерВходящегоДокумента;
		//СтрокаСпискаДокументов.Сумма                    = стр.Сумма;
		//СтрокаСпискаДокументов.СуммаНДС                 = стр.СуммаНДС;
		//СтрокаСпискаДокументов.ИНН                      = стр.ПоставщикИНН;
		СтрокаСпискаДокументов.НаименованиеФЛ           = стр.ФизЛицоКод;
		СтрокаСпискаДокументов.КодСклада                = стр.Склад;
		
		
		
		
		СтрокаСпискаНоменклатуры                             = Объект.ПрочееАО.Добавить();
		СтрокаСпискаНоменклатуры.ДатаДока                    = Стр.Дата;
		СтрокаСпискаНоменклатуры.НомерДока                   = Стр.Номер;
		//		СтрокаСпискаНоменклатуры.Количество                  = Стр.Количество;
		//		СтрокаСпискаНоменклатуры.НоменклатурнаяГруппа        = Стр.НоменклатурнаяГруппа;
		//		СтрокаСпискаНоменклатуры.СтатьяЗатрат                = Стр.СтатьяЗатрат;
		//		СтрокаСпискаНоменклатуры.Подразделение               = Стр.Подразделение;
		СтрокаСпискаНоменклатуры.ВидДокумента                = стр.ВидДокВходящий;
		СтрокаСпискаНоменклатуры.НомерДокаВходящего          = стр.НомерВходящегоДокумента;
		СтрокаСпискаНоменклатуры.ДатаДокВходящего            = стр.ДатаВходящегоДокумента;
		СтрокаСпискаНоменклатуры.Содержание                  = стр.Содержание;
		СтрокаСпискаНоменклатуры.Сумма                       = стр.Сумма;
		СтрокаСпискаНоменклатуры.суммаНДС                    = стр.СуммаНДС;
		СтрокаСпискаНоменклатуры.СчетЗатрат                  = стр.СчетЗатрат;
		СтрокаСпискаНоменклатуры.КодКонтрагента              = стр.ПоставщикКод;
		СтрокаСпискаНоменклатуры.СчетЗатратНУ                = стр.СчетЗатратНУ;
		СтрокаСпискаНоменклатуры.Субконто1                   = стр.Субконто1;
		СтрокаСпискаНоменклатуры.Субконто2                   = стр.Субконто2;
		СтрокаСпискаНоменклатуры.Субконто3                   = стр.Субконто3;
		
		
		
	КонецЦикла;	 
	
	//Объект.СписокДокументов.Свернуть("ДатаДок,НомерДок,Флаг,ПризнакПрихода,НаименованиеФЛ,КодСклада","Сумма,СуммаНДС");
	
	
	
	
	
	
КонецПроцедуры	 

Процедура ЗагрузитьАО(Кнопка)
	//
	//Если Объект.СписокДокументов.Количество()>0 тогда
	//	Объект.СписокДокументов.Очистить();
	//КонецЕсли;	
	//
	//Если Объект.СписокНоменклатуры.Количество()>0 тогда
	//	Объект.СписокНоменклатуры.Очистить();
	//КонецЕсли;	
	//
	//Если Объект.СписокНоменклатуры.Количество()>0 тогда
	//	Объект.ПрочееАО.Очистить();
	//КонецЕсли;	
	//
	//
	//
	//сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V82.Application");
	//Попытка 
	//	//Открытие = V81.Connect("Srvr="""+"servant"+""";Ref="""+"tl_upp"+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//	//Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	//	//Открытие = V81.Connect("File="""+ИмяСервера+""";Usr="""+ИмяБазы+""";Pwd="""+Пароль+""";");
	
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	//
	//Попытка
	//	Запрос8  = V81.NewObject("Запрос");
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки;
	//
	//
	//ЗапросПоТЧ_товарыАО(Запрос8);
	//ЗапросПоТЧ_прочееАО(Запрос8);
	
	//Объект.СписокДокументов.Свернуть("ДатаДок,НомерДок,Документа,Флаг,ПризнакПрихода,СуммаВключаетНДС,УчитыватьНДС,КодСклада, НаименованиеФЛ","Сумма,СуммаНДС");
	
	
КонецПроцедуры

Процедура ЗагрузитьКомполектации(Кнопка)
	ЗагрузитьКомплектацииТМЦ();
КонецПроцедуры

Процедура ЗагрузитьТребованияНакладные(Кнопка)
	
	//
	// Если Объект.СписокНоменклатуры.Количество()>0 тогда
	//	Объект.СписокНоменклатуры.Очистить();
	//КонецЕсли;	
	
	//
	//Если Объект.СписокДокументов.Количество()>0 тогда
	//	Объект.СписокДокументов.Очистить();
	//КонецЕсли;	
	//
	//сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V82.Application");
	//Попытка 
	//	//Открытие = V81.Connect("Srvr="""+"servant"+""";Ref="""+"tl_upp"+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//	//Открытие = V81.Connect("File="""+ИмяСервера+""";Usr="""+ИмяБазы+""";Pwd="""+Пароль+""";");
	//	//Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	//
	//Попытка
	//	Запрос8  = V81.NewObject("Запрос");
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки;
	//
	//
	//запрос8.Текст ="ВЫБРАТЬ
	//			   |	ТребованиеНакладнаяМатериалы.Ссылка.Номер,
	//			   |	ТребованиеНакладнаяМатериалы.Ссылка.Дата,
	//			   |	ТребованиеНакладнаяМатериалы.Количество,
	//			   |	ТребованиеНакладнаяМатериалы.Номенклатура.Наименование КАК Номенклатура,
	//			   |	ТребованиеНакладнаяМатериалы.Номенклатура.Код,
	//			   |	ТребованиеНакладнаяМатериалы.Счет.Код КАК СчетУчета,
	//			   |	ТребованиеНакладнаяМатериалы.Ссылка.Склад.Код КАК Склад,
	//			   |	ТребованиеНакладнаяМатериалы.Ссылка.Ответственный.Наименование КАК Ответственный,
	//			   |	ТребованиеНакладнаяМатериалы.Ссылка.СчетЗатрат.Код КАК СчетЗатрат,
	//			   |	ТребованиеНакладнаяМатериалы.Ссылка.Субконто1.Код КАК Субконто1,
	//			   |	ТребованиеНакладнаяМатериалы.Ссылка.Субконто2.Код КАК Субконто2,
	//			   |	ТребованиеНакладнаяМатериалы.Ссылка.Субконто3.Код КАК Субконто3,
	//			   |	ТребованиеНакладнаяМатериалы.Ссылка.Комментарий
	//			   |ИЗ
	//			   |	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	//			   |ГДЕ
	//			   |	ТребованиеНакладнаяМатериалы.Ссылка.Дата МЕЖДУ &Период.ДатаНачала И &Период.ДатаОкончания
	//			   |	И ТребованиеНакладнаяМатериалы.Ссылка.Объект.Организация.Код = &Код" ;
	
	
	//		  
	//		  
	//запрос8.УстановитьПараметр("Код", "000000001");
	//запрос8.УстановитьПараметр("Период.ДатаНачала", Период.ДатаНачала);
	//запрос8.УстановитьПараметр("Период.ДатаОкончания", КонецДня(Период.ДатаОкончания));
	//
	//выборка = Запрос8.выполнить().выбрать();
	//
	//Пока Выборка.Следующий() цикл
	//	
	//	СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
	//	СтрокаСпискаДокументов.Документа = "Требование-накладная";
	//	СтрокаСпискаДокументов.НомерДок  = Выборка.Номер;
	//	СтрокаСпискаДокументов.ДатаДок   = Выборка.Дата;
	//	СтрокаСпискаДокументов.ПризнакПрихода = 13;
	//	СтрокаСпискаДокументов.Флаг      = истина;
	//	СтрокаСпискаДокументов.КодСклада           = Выборка.Склад;
	//	СтрокаСпискаДокументов.Ответственный        = Выборка.Ответственный;
	//	СтрокаСпискаДокументов.СчетЗатрат           = Выборка.СчетЗатрат;
	//	СтрокаСпискаДокументов.Субконто1            = Выборка.Субконто1;
	//	СтрокаСпискаДокументов.Субконто2            = Выборка.субконто2;
	//	СтрокаСпискаДокументов.Субконто3            = Выборка.субконто3;
	//	СтрокаСпискаДокументов.Комментарий          = Выборка.Комментарий;
	
	
	
	
	
	//	
	//	
	//	СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
	//	СтрокаСпискаНоменклатуры._ДатаДок        = Выборка.Дата;
	//	СтрокаСпискаНоменклатуры._НомерДок       = Выборка.Номер;
	//	СтрокаСпискаНоменклатуры._Номенклатура   = Выборка.Номенклатура;
	//	СтрокаСпискаНоменклатуры._Количество     = Выборка.Количество;
	//	СтрокаСпискаНоменклатуры.СчетУчета       = Выборка.СчетУчета;
	//	СтрокаСпискаНоменклатуры._КодНом         = Выборка.НоменклатураКод;
	
	//	
	// 	
	//КонецЦикла;	
	
	//  Объект.СписокДокументов.Свернуть("Документа,НомерДок,ДатаДок,ПризнакПрихода,Флаг,КодСклада,Ответственный,СчетЗатрат,Субконто1,Субконто2,Субконто3,Комментарий","Сумма");
	//
	//
	
	//
	//
	
КонецПроцедуры

Процедура ЗагрузитьТЧПродукция(Запрос)
	Запрос.текст = "ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Номер,
	|	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Дата,
	|	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Склад.Код КАК Склад,
	|	ОтчетПроизводстваЗаСменуПродукция.Номенклатура.Код,
	|	ОтчетПроизводстваЗаСменуПродукция.Номенклатура.Наименование,
	|	ОтчетПроизводстваЗаСменуПродукция.Количество,
	|	ОтчетПроизводстваЗаСменуПродукция.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	ОтчетПроизводстваЗаСменуПродукция.Номенклатура.Артикул КАК Артикул,
	|	ОтчетПроизводстваЗаСменуПродукция.Спецификация.Код,
	|	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Комментарий,
	|	ОтчетПроизводстваЗаСменуПродукция.Ссылка.СчетЗатрат.Код КАК СчетЗатрат,
	|	ОтчетПроизводстваЗаСменуПродукция.ПлановаяСтоимость,
	|	ОтчетПроизводстваЗаСменуПродукция.СуммаПлановая,
	|	ОтчетПроизводстваЗаСменуПродукция.НоменклатурнаяГруппа.Код КАК НоменклатурнаяГруппа,
	|	ОтчетПроизводстваЗаСменуПродукция.Счет.Код КАК Счет,
	|	ОтчетПроизводстваЗаСменуПродукция.Ссылка.ПодразделениеОрганизации.Код КАК Подразделение
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК ОтчетПроизводстваЗаСменуПродукция
	|ГДЕ
	|	ОтчетПроизводстваЗаСменуПродукция.Ссылка.Дата МЕЖДУ &НачДата И &КонДата" ;
	
	
	Запрос.УстановитьПараметр("НачДата",Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",Период.ДатаОкончания);
	
	Выборка = Запрос.выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		
		СтрокаСпискаНоменклатуры = Объект.СписокНоменклатуры.Добавить();
		СтрокаСпискаНоменклатуры._Артикул  = Выборка.Артикул;
		СтрокаСпискаНоменклатуры._ДатаДок  = Выборка.Дата;
		СтрокаСпискаНоменклатуры._НомерДок = Выборка.Номер;
		СтрокаСпискаНоменклатуры._КодНом   = Выборка.НоменклатураКод;
		СтрокаСпискаНоменклатуры._Номенклатура = Выборка.НоменклатураНаименование;
		СтрокаСпискаНоменклатуры._Количество   = Выборка.Количество;
		СтрокаСпискаНоменклатуры.СчетУчета     = Выборка.Счет;
		СтрокаСпискаНоменклатуры.Субконто      = Выборка.НоменклатурнаяГруппа;
		СтрокаСпискаНоменклатуры._Цена         = Выборка.ПлановаяСтоимость;
		СтрокаСпискаНоменклатуры._Сумма        = Выборка.СуммаПлановая;
		
		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.НомерДок = Выборка.Номер;
		СтрокаСпискаДокументов.ДатаДок  = Выборка.Дата;
		СтрокаСпискаДокументов.Документа = "Отчет произв.";
		СтрокаСпискаДокументов.ПризнакПрихода = 77;
		СтрокаСпискаДокументов.Флаг = истина;
		СтрокаСпискаДокументов.Комментарий = Выборка.Комментарий ;
		СтрокаСпискаДокументов.КодСклада       = Выборка.Склад;
		СтрокаСпискаДокументов.Субконто1       = Выборка.Подразделение;
		СтрокаСпискаДокументов.СчетЗатрат    = Выборка.СчетЗатрат;
		
	КонецЦикла;	
	
	Объект.СписокДокументов.Свернуть("НомерДок,Документа,ДатаДок,ПризнакПрихода,флаг,Комментарий,Кодсклада,СчетЗатрат,Субконто1","Сумма");
	
	
КонецПроцедуры	 

Процедура ЗагрузитьТЧматериалы(Запрос)
	
	Запрос.текст = "ВЫБРАТЬ
	|	ОтчетПроизводстваЗаСменуМатериалы.Ссылка.Номер,
	|	ОтчетПроизводстваЗаСменуМатериалы.Ссылка.Дата,
	|	ОтчетПроизводстваЗаСменуМатериалы.Номенклатура.Код,
	|	ОтчетПроизводстваЗаСменуМатериалы.Номенклатура.Наименование,
	|	ОтчетПроизводстваЗаСменуМатериалы.ЕдиницаИзмерения.Наименование,
	|	ОтчетПроизводстваЗаСменуМатериалы.Количество,
	|	ОтчетПроизводстваЗаСменуМатериалы.Счет.Код,
	|	ОтчетПроизводстваЗаСменуМатериалы.СтатьяЗатрат.Код КАК СтатьяЗатрат,
	|	ОтчетПроизводстваЗаСменуМатериалы.НоменклатурнаяГруппа.Код КАК НоменклатурнаяГруппа
	|ИЗ
	|	Документ.ОтчетПроизводстваЗаСмену.Материалы КАК ОтчетПроизводстваЗаСменуМатериалы
	|ГДЕ
	|	ОтчетПроизводстваЗаСменуМатериалы.Ссылка.Дата МЕЖДУ &НачДата И &КонДата" ;
	
	
	Запрос.УстановитьПараметр("НачДата",Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",Период.ДатаОкончания);
	
	Выборка = Запрос.выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		
		СтрокаСпискаМатериалов = Объект.СписокМатериалов.Добавить();
		СтрокаСпискаМатериалов.ДатаДок = Выборка.Дата;
		СтрокаСпискаМатериалов.НомерДок = Выборка.Номер;
		СтрокаСпискаМатериалов.КодМатериала = Выборка.НоменклатураКод;
		СтрокаСпискаМатериалов.НаименованиеМатериала = Выборка.НоменклатураНаименование;
		СтрокаСпискаМатериалов.Количество =Выборка.Количество;
		СтрокаСпискаМатериалов.СчетЗатрат = Выборка.СчетЗатрат;
		СтрокаСпискаМатериалов.СтатьяЗатрат = Выборка.СтатьяЗатрат;
		
		
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗагрузитьОП(Кнопка)
	
	
	Если Объект.СписокДокументов.Количество()>0 тогда
		Объект.СписокДокументов.Очистить();
	КонецЕсли;	
	
	Если Объект.СписокНоменклатуры.Количество()>0 тогда
		Объект.СписокНоменклатуры.Очистить();
	КонецЕсли;	
	
	
	сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V82.Application");
	//Попытка 
	//	Открытие = V81.Connect("Srvr="""+"servant"+""";Ref="""+"tl_upp"+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//	
	//	// Открытие = V81.Connect("Srvr="""+"servant"+""";Ref="""+"tl_upp"+""";Usr="""+"Коновалова Мария Васильевна"+""";Pwd="""+"252118"+""";");
	//	//Открытие = V81.Connect("File="""+ИмяСервера+""";Usr="""+ИмяБазы+""";Pwd="""+Пароль+""";");
	//	// Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	//	
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	
	V81 = ПолучитьПодключениеКФайловойБД();
	
	Попытка
		Запрос8  = V81.NewObject("Запрос");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗагрузитьТЧПродукция(Запрос8);
	ЗагрузитьТЧматериалы(Запрос8);
	
	
	
	
КонецПроцедуры

Процедура ЗагрузитьВходящиеПлатежки(Запрос)
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПлатежноеПоручениеВходящее.Номер,
	|	ПлатежноеПоручениеВходящее.Дата,
	|	ПлатежноеПоручениеВходящее.ВалютаДокумента.Код КАК ВалютаДокумента,
	|	ПлатежноеПоручениеВходящее.ВидОперации.Порядок КАК ВидОперации,
	|	ПлатежноеПоручениеВходящее.Контрагент.Код КАК Контрагент,
	|	ПлатежноеПоручениеВходящее.ДоговорКонтрагента.Код КАК ДоговорКонтрагента,
	|	ПлатежноеПоручениеВходящее.НомерВходящегоДокумента,
	|	ПлатежноеПоручениеВходящее.ДатаВходящегоДокумента,
	|	ПлатежноеПоручениеВходящее.СтатьяДвиженияДенежныхСредств.Код КАК СтатьяДвиженияДенежныхСредств,
	|	ПлатежноеПоручениеВходящее.СуммаДокумента,
	|	ПлатежноеПоручениеВходящее.СубконтоКт1.Код КАК СубконтоКт1,
	|	ПлатежноеПоручениеВходящее.СубконтоКт2.Код КАК СубконтоКт2,
	|	ПлатежноеПоручениеВходящее.СубконтоКт3.Код КАК СубконтоКт3,
	|	ПлатежноеПоручениеВходящее.СчетУчетаРасчетовСКонтрагентом.Код КАК СчетУчетаРасчетовСКонтрагентом,
	|	ПлатежноеПоручениеВходящее.СчетБанк.Код КАК СчетБанк,
	|	ПлатежноеПоручениеВходящее.ДатаВыписки,
	|	ПлатежноеПоручениеВходящее.СчетОрганизации.Код КАК СчетОрганизации,
	|	ПлатежноеПоручениеВходящее.СчетКонтрагента.Код КАК СчетКонтрагента,
	|	ПлатежноеПоручениеВходящее.НазначениеПлатежа,
	|	ПлатежноеПоручениеВходящее.Контрагент.Наименование,
	|	ПлатежноеПоручениеВходящее.СчетОрганизации.НомерСчета КАК НомерСчетаОрг,
	|	ПлатежноеПоручениеВходящее.СчетКонтрагента.НомерСчета КАК НомерСчетаКонтр
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
	|ГДЕ
	|	ПлатежноеПоручениеВходящее.Дата МЕЖДУ &НачДата И &КонДата
	|	И ПлатежноеПоручениеВходящее.Проведен = ИСТИНА";
	
	
	Запрос.УстановитьПараметр("НачДата",Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",Период.ДатаОкончания);
	
	Выборка = Запрос.выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		
		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.НомерДок        = Выборка.Номер;
		СтрокаСпискаДокументов.ДатаДок         = Выборка.Дата;
		СтрокаСпискаДокументов.Документа       = "Плат. пор. вход.";
		СтрокаСпискаДокументов.ПризнакПрихода  = 55;
		СтрокаСпискаДокументов.Флаг            = истина;
		СтрокаСпискаДокументов.ВидОперацииПП   = Выборка.ВидОперации ;
		СтрокаСпискаДокументов.Сумма           = Выборка.СуммаДокумента;
		СтрокаСпискаДокументов.ВалютаДоговора  = Выборка.ВалютаДокумента;
		СтрокаСпискаДокументов.Контрагент      = Выборка.КонтрагентНаименование;
		СтрокаСпискаДокументов.КодКонтрагента  = Выборка.Контрагент;
		СтрокаСпискаДокументов.КодДоговора     = Выборка.ДоговорКонтрагента;
		СтрокаСпискаДокументов.БанкСчет        = Выборка.СчетБанк;
		СтрокаСпискаДокументов.СчетОрганизации = Выборка.НомерСчетаОрг;
		СтрокаСпискаДокументов.СчетКонтрагента = Выборка.НомерСчетаКонтр;
		СтрокаСпискаДокументов.ППСчетРасчетовСКонтрагентами = Выборка.СчетУчетаРасчетовСКонтрагентом;
		СтрокаСпискаДокументов.ППСубконтоКт1                = Выборка.СубконтоКт1;
		СтрокаСпискаДокументов.ППСубконтоКт2                = Выборка.СубконтоКт2;
		СтрокаСпискаДокументов.ППСубконтоКт3                = Выборка.СубконтоКт3;
		СтрокаСпискаДокументов.СтатьяДДС                    = Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаСпискаДокументов.НазначениеПлатежа            = Выборка.НазначениеПлатежа;
		СтрокаСпискаДокументов.НомерДокументаПоставщика     = Выборка.НомерВходящегоДокумента;
		СтрокаСпискаДокументов.ДатаДокументаПоставщика      = Выборка.ДатаВходящегоДокумента;
		
	КонецЦикла;	
	
	
	
КонецПроцедуры	

Процедура ЗагрузитьИсходящиеПлатежки(Запрос)
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящее.Дата,
	|	ПлатежноеПоручениеИсходящее.Номер,
	|	ПлатежноеПоручениеИсходящее.Контрагент.Наименование КАК Контрагент,
	|	ПлатежноеПоручениеИсходящее.Контрагент.Код,
	|	ПлатежноеПоручениеИсходящее.ДоговорКонтрагента.Код КАК ДоговорКод,
	|	ПлатежноеПоручениеИсходящее.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	ПлатежноеПоручениеИсходящее.СчетОрганизации.НомерСчета КАК СчетОрганизации,
	|	ПлатежноеПоручениеИсходящее.СчетКонтрагента.НомерСчета КАК СчетКонтрагента,
	|	ПлатежноеПоручениеИсходящее.НазначениеПлатежа,
	|	ПлатежноеПоручениеИсходящее.СуммаДокумента,
	|	ПлатежноеПоручениеИсходящее.ВалютаДокумента.Код КАК ВалютаДокумента,
	|	ПлатежноеПоручениеИсходящее.СтатьяДвиженияДенежныхСредств.Код КАК СтатьяДДС,
	|	ПлатежноеПоручениеИсходящее.СчетУчетаРасчетовСКонтрагентом.Код КАК СчетУчетаРасчетовСКонтрагентом,
	|	ПлатежноеПоручениеИсходящее.СубконтоДт1.Код КАК СубконтоДт1,
	|	ПлатежноеПоручениеИсходящее.СубконтоДт2.Код КАК СубконтоДт2,
	|	ПлатежноеПоручениеИсходящее.СубконтоДт3.Код КАК СубконтоДт3,
	|	ПлатежноеПоручениеИсходящее.ФизЛицо.Код КАК ФизЛицо,
	|	ПлатежноеПоручениеИсходящее.ДоговорЗайма,
	|	ПлатежноеПоручениеИсходящее.СчетБанк.Код КАК СчетБанк,
	|	ПлатежноеПоручениеИсходящее.ВидОперации.Порядок КАК ВидОперации
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
	|ГДЕ
	|	ПлатежноеПоручениеИсходящее.Проведен = ИСТИНА
	|	И ПлатежноеПоручениеИсходящее.Дата МЕЖДУ &НачДата И &КонДата";
	
	Запрос.УстановитьПараметр("НачДата",Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",Период.ДатаОкончания);
	
	Выборка = Запрос.выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		
		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.НомерДок        = Выборка.Номер;
		СтрокаСпискаДокументов.ДатаДок         = Выборка.Дата;
		СтрокаСпискаДокументов.Документа       = "Плат. пор. исх.";
		СтрокаСпискаДокументов.ПризнакПрихода  = 56;
		СтрокаСпискаДокументов.Флаг            = истина;
		СтрокаСпискаДокументов.ВидОперацииПП   = Выборка.ВидОперации ;
		СтрокаСпискаДокументов.Сумма           = Выборка.СуммаДокумента;
		СтрокаСпискаДокументов.ВалютаДоговора  = Выборка.ВалютаДокумента;
		СтрокаСпискаДокументов.Контрагент      = Выборка.Контрагент;
		СтрокаСпискаДокументов.КодКонтрагента  = Выборка.КонтрагентКод;
		СтрокаСпискаДокументов.КодДоговора     = Выборка.ДоговорКод;
		СтрокаСпискаДокументов.БанкСчет        = Выборка.СчетБанк;
		СтрокаСпискаДокументов.СчетОрганизации = Выборка.СчетОрганизации;
		СтрокаСпискаДокументов.СчетКонтрагента = Выборка.СчетКонтрагента;
		СтрокаСпискаДокументов.ППСчетРасчетовСКонтрагентами = Выборка.СчетУчетаРасчетовСКонтрагентом;
		СтрокаСпискаДокументов.ППСубконтоКт1                = Выборка.СубконтоДт1;
		СтрокаСпискаДокументов.ППСубконтоКт2                = Выборка.СубконтоДт2;
		СтрокаСпискаДокументов.ППСубконтоКт3                = Выборка.СубконтоДт3;
		СтрокаСпискаДокументов.СтатьяДДС                    = Выборка.СтатьяДДС;
		СтрокаСпискаДокументов.НазначениеПлатежа            = Выборка.НазначениеПлатежа;
		
		
	КонецЦикла;	
	
	
	
КонецПроцедуры	

Процедура ЗагрузитьРасшифровкойПлатежаПП(Запрос)
	
	Запрос.Текст  =	"ВЫБРАТЬ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Дата,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Номер Как Номер,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.Код КАК Договор,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КурсВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаНДС,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.Код КАК СтатьяДвиженияДенежныхСредств,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом.Код КАК СчетУчетаРасчетовСКонтрагентом,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам.Код КАК СчетУчетаРасчетовПоАвансам,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СчетНаОплату.Номер КАК СчетНаОплату
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|ГДЕ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Проведен = ИСТИНА
	|	И ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачДата И &КонДата";   
	
	Запрос.УстановитьПараметр("НачДата",Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",Период.ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.следующий() цикл
		
		СтрокаРасшифровки = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаРасшифровки.Договор  = Выборка.Договор ;
		СтрокаРасшифровки.КратностьВзаиморасчетов = Выборка.КратностьВзаиморасчетов;
		СтрокаРасшифровки.СуммаВзаиморасчетов     = Выборка.СуммаВзаиморасчетов;
		СтрокаРасшифровки.СуммаПлатежа            = Выборка.СуммаПлатежа;
		
		СтрокаРасшифровки.СуммаНДС                = Выборка.СуммаНДС;
		СтрокаРасшифровки.Сделка                  = Выборка.СчетНаОплату;
		СтрокаРасшифровки.СчетРасчетовПоАвансам   = Выборка.СчетУчетаРасчетовПоАвансам;
		СтрокаРасшифровки.СчетРасчетовСКонтрагентами   = Выборка.СчетУчетаРасчетовСКонтрагентом;
		СтрокаРасшифровки.СтатьяДДС                    = Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаРасшифровки.НомерДок                     = Выборка.Номер;
		СтрокаРасшифровки.КурсВзаиморасчетов           = Выборка.КурсВзаиморасчетов;
		
	КонецЦикла;	
	
	
	
	
	
КонецПроцедуры	

Процедура ЗагрузитьРасшифровкойПлатежаППисход(Запрос)
	
	Запрос.Текст  =	"ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Номер,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.ДоговорКонтрагента.Код КАК Договор,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КурсВзаиморасчетов,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаПлатежа,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СуммаНДС,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.Код КАК СтатьяДДС,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом.Код КАК СчетУчетаРасчетовСКонтрагентом,
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам.Код КАК СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка.Проведен = ИСТИНА";    
	
	Запрос.УстановитьПараметр("НачДата",Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",Период.ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.следующий() цикл
		
		СтрокаРасшифровки = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаРасшифровки.Договор  = Выборка.Договор ;
		СтрокаРасшифровки.КратностьВзаиморасчетов      = Выборка.КратностьВзаиморасчетов;
		СтрокаРасшифровки.СуммаВзаиморасчетов          = Выборка.СуммаВзаиморасчетов;
		СтрокаРасшифровки.СуммаНДС                     = Выборка.СуммаНДС;
		СтрокаРасшифровки.СчетРасчетовПоАвансам        = Выборка.СчетУчетаРасчетовПоАвансам;
		СтрокаРасшифровки.СчетРасчетовСКонтрагентами   = Выборка.СчетУчетаРасчетовСКонтрагентом;
		СтрокаРасшифровки.СтатьяДДС                    = Выборка.СтатьяДДС;
		СтрокаРасшифровки.НомерДок                     = Выборка.Номер;
		СтрокаРасшифровки.КурсВзаиморасчетов           = Выборка.КурсВзаиморасчетов;
		СтрокаРасшифровки.СуммаПлатежа                 = Выборка.суммаПлатежа;
		
	КонецЦикла;	
	
	
	
КонецПроцедуры	

Процедура ЗагрузитьЗарплатой(Запрос)
	
	Запрос.Текст  =	"ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Номер,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Дата,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость.Номер,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость.Дата,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.СуммаКВыплате
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Проведен = ИСТИНА";
	
	
	Запрос.УстановитьПараметр("НачДата",Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",Период.ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.следующий() цикл
		
		СтрокаРасшифровки                         = Объект.ПеречислениеЗП.Добавить();
		СтрокаРасшифровки.ВедомостьДата           = Выборка.ВедомостьДата;
		СтрокаРасшифровки.ВедомостьНомер          = Выборка.ведомостьНомер;
		СтрокаРасшифровки.Сумма                   = Выборка.СуммаКВыплате;
		СтрокаРасшифровки.НомерПП                 = Выборка.Номер;
		
	КонецЦикла;	
	
	
	
КонецПроцедуры	

Процедура ЗагрузитьПОнасписание(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПлатежныйОрдерСписаниеДенежныхСредств.Дата,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.Номер,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.СчетОрганизации.НомерСчета КАК СчетОрганизации,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.СчетКонтрагента.НомерСчета КАК СчетКонтрагента,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.СчетБанк.Код КАК СчетБанк,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.СубконтоДт1.Код КАК СубконтоДт1,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.СубконтоДт2.Код КАК СубконтоДт2,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.СубконтоДт3.Код КАК СубконтоДт3,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.НомерВходящегоДокумента,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.ДатаВходящегоДокумента,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.Контрагент.Код,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.Контрагент.Наименование КАК Контрагент,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.ВидОперации.Порядок КАК ВидОперации,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.ФизЛицо.Код КАК ФизЛицо,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.СчетУчетаРасчетовСКонтрагентом.Код КАК СчетУчетаРасчетовСКонтрагентом,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.СуммаДокумента,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.ВалютаДокумента.Код КАК ВалютаДокумента,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.НазначениеПлатежа,
	|	ПлатежныйОрдерСписаниеДенежныхСредств.СтатьяДвиженияДенежныхСредств.Код КАК СтатьяДДС
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ПлатежныйОрдерСписаниеДенежныхСредств
	|ГДЕ
	|	ПлатежныйОрдерСписаниеДенежныхСредств.Проведен = ИСТИНА
	|	И ПлатежныйОрдерСписаниеДенежныхСредств.Дата МЕЖДУ &НачДата И &КонДата";
	
	Запрос.УстановитьПараметр("НачДата",Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",Период.ДатаОкончания);
	
	Выборка = Запрос.выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		
		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.НомерДок        = Выборка.Номер;
		СтрокаСпискаДокументов.ДатаДок         = Выборка.Дата;
		СтрокаСпискаДокументов.Документа       = "Плат. пор. исх.";
		СтрокаСпискаДокументов.ПризнакПрихода  = 56;
		СтрокаСпискаДокументов.Флаг            = истина;
		СтрокаСпискаДокументов.ВидОперацииПП   = Выборка.ВидОперации ;
		СтрокаСпискаДокументов.Сумма           = Выборка.СуммаДокумента;
		СтрокаСпискаДокументов.ВалютаДоговора  = Выборка.ВалютаДокумента;
		СтрокаСпискаДокументов.Контрагент      = Выборка.Контрагент;
		СтрокаСпискаДокументов.КодКонтрагента  = Выборка.КонтрагентКод;
		//СтрокаСпискаДокументов.КодДоговора     = Выборка.ДоговорКод;
		СтрокаСпискаДокументов.БанкСчет        = Выборка.СчетБанк;
		СтрокаСпискаДокументов.СчетОрганизации = Выборка.СчетОрганизации;
		СтрокаСпискаДокументов.СчетКонтрагента = Выборка.СчетКонтрагента;
		СтрокаСпискаДокументов.ППСчетРасчетовСКонтрагентами = Выборка.СчетУчетаРасчетовСКонтрагентом;
		СтрокаСпискаДокументов.ППСубконтоКт1                = Выборка.СубконтоДт1;
		СтрокаСпискаДокументов.ППСубконтоКт2                = Выборка.СубконтоДт2;
		СтрокаСпискаДокументов.ППСубконтоКт3                = Выборка.СубконтоДт3;
		СтрокаСпискаДокументов.СтатьяДДС                    = Выборка.СтатьяДДС;
		СтрокаСпискаДокументов.НазначениеПлатежа            = Выборка.НазначениеПлатежа;
		
		
	КонецЦикла;	
	
	
	
КонецПроцедуры	

Процедура ЗагрузитьРасшифровкойПлатежаПО(Запрос)
	
	Запрос.Текст  =	"ВЫБРАТЬ
	|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Номер,
	|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Дата,
	|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СуммаПлатежа,
	|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.КурсВзаиморасчетов,
	|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СуммаНДС,
	|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств.Код КАК СтатьяДДС,
	|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам.Код КАК СчетУчетаРасчетовПоАвансам,
	|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом.Код КАК СчетУчетаРасчетовСКонтрагентом
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа
	|ГДЕ
	|	ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И ПлатежныйОрдерСписаниеДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен = ИСТИНА";   
	
	Запрос.УстановитьПараметр("НачДата",Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",Период.ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.следующий() цикл
		
		СтрокаРасшифровки = Объект.РасшифровкаПлатежа.Добавить();
		//	СтрокаРасшифровки.Договор  = Выборка.Договор ;
		СтрокаРасшифровки.КратностьВзаиморасчетов      = Выборка.КратностьВзаиморасчетов;
		СтрокаРасшифровки.СуммаВзаиморасчетов          = Выборка.СуммаВзаиморасчетов;
		СтрокаРасшифровки.СуммаНДС                     = Выборка.СуммаНДС;
		СтрокаРасшифровки.СчетРасчетовПоАвансам        = Выборка.СчетУчетаРасчетовПоАвансам;
		СтрокаРасшифровки.СчетРасчетовСКонтрагентами   = Выборка.СчетУчетаРасчетовСКонтрагентом;
		СтрокаРасшифровки.СтатьяДДС                    = Выборка.СтатьяДДС;
		СтрокаРасшифровки.НомерДок                     = Выборка.Номер;
		СтрокаРасшифровки.КурсВзаиморасчетов           = Выборка.КурсВзаиморасчетов;
		СтрокаРасшифровки.СуммаПлатежа                 = Выборка.суммаПлатежа;
		
	КонецЦикла;	
	
	
	
КонецПроцедуры	

Процедура ЗагрузитьПоступленияНаРС(Кнопка)
	
	сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V82.Application");
	//Попытка 
	//	// Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	//	
	//	Открытие = V81.Connect("Srvr="""+"servant"+""";Ref="""+"tl_upp"+""";Usr="""+"Коновалова Мария Васильевна"+""";Pwd="""+"252118"+""";");
	//	//Открытие = V81.Connect("File="""+ИмяСервера+""";Usr="""+ИмяБазы+""";Pwd="""+Пароль+""";");
	//	
	//	
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	
	V81 = ПолучитьПодключениеКФайловойБД();
	
	Попытка
		Запрос8  = V81.NewObject("Запрос");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗагрузитьВходящиеПлатежки(Запрос8);
	ЗагрузитьРасшифровкойПлатежаПП(Запрос8);
	
	
КонецПроцедуры

Процедура ЗагрузитьБанковскиеДокументы(Кнопка)
	
	
	Если Объект.СписокДокументов.Количество()>0 тогда
		Объект.СписокДокументов.Очистить();
	КонецЕсли;	
	
	Если Объект.СписокНоменклатуры.Количество()>0 тогда
		Объект.СписокНоменклатуры.Очистить();
	КонецЕсли;	
	
	
	сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V82.Application");
	//Попытка 
	//	// Открытие = V81.Connect("Srvr="""+"servant"+""";Ref="""+"tl_upp"+""";Usr="""+"obmen"+""";Pwd="""+"252118"+""";");
	//	
	//	Открытие = V81.Connect("Srvr="""+"servant"+""";Ref="""+"tl_upp"+""";Usr="""+"Коновалова Мария Васильевна"+""";Pwd="""+"252118"+""";");
	//	//Открытие = V81.Connect("File="""+ИмяСервера+""";Usr="""+ИмяБазы+""";Pwd="""+Пароль+""";");
	//	
	//	
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	
	V81 = ПолучитьПодключениеКФайловойБД();
	Попытка
		Запрос8  = V81.NewObject("Запрос");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗагрузитьТЧПродукция(Запрос8);
	ЗагрузитьТЧматериалы(Запрос8);
	
	
	
	
	
КонецПроцедуры

Процедура ЗагрузитьППИсходящие(Кнопка)
	
	сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V82.Application");
	//Попытка 
	//	Открытие = V81.Connect("Srvr="""+"crm"+""";Ref="""+"db_acc16_2011"+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	//	
	//	// Открытие = V81.Connect("Srvr="""+"servant"+""";Ref="""+"tl_upp"+""";Usr="""+"Коновалова Мария Васильевна"+""";Pwd="""+"252118"+""";");
	//	//Открытие = V81.Connect("File="""+ИмяСервера+""";Usr="""+ИмяБазы+""";Pwd="""+Пароль+""";");
	//	
	//	
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	
	V81 = ПолучитьПодключениеКФайловойБД();
	Попытка
		Запрос8  = V81.NewObject("Запрос");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗагрузитьИсходящиеПлатежки(Запрос8);
	ЗагрузитьРасшифровкойПлатежаППисход(Запрос8);
	ЗагрузитьЗарплатой(Запрос8);
	
	
	
КонецПроцедуры

Процедура ЗагрузитьПлатежныйОрдер(Кнопка)
	
	
	сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V82.Application");
	//Попытка 
	//	Открытие = V81.Connect("Srvr="""+"crm"+""";Ref="""+"db_acc16_2011"+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	//	
	//	// Открытие = V81.Connect("Srvr="""+"servant"+""";Ref="""+"tl_upp"+""";Usr="""+"Коновалова Мария Васильевна"+""";Pwd="""+"252118"+""";");
	//	//Открытие = V81.Connect("File="""+ИмяСервера+""";Usr="""+ИмяБазы+""";Pwd="""+Пароль+""";");
	//	
	//	
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	
	V81 = ПолучитьПодключениеКФайловойБД();
	Попытка
		Запрос8  = V81.NewObject("Запрос");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗагрузитьПОнасписание(Запрос8);
	ЗагрузитьРасшифровкойПлатежаПО(Запрос8);
	
	
	
	
КонецПроцедуры

Процедура ЗаполнитьРКО(Запрос)  
	
	Запрос.Текст = 	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.СчетКасса.Код,
	|	РасходныйКассовыйОрдер.ВидОперации.Порядок,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.Выдать,
	|	РасходныйКассовыйОрдер.Основание,
	|	РасходныйКассовыйОрдер.Приложение,
	|	РасходныйКассовыйОрдер.ПоДокументу,
	|	РасходныйКассовыйОрдер.Контрагент.Код КАК ФЛ,
	|	РасходныйКассовыйОрдер.СтатьяДвиженияДенежныхСредств.Код как СтатьяДДС
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Дата МЕЖДУ &НачДата И &КонДата
	|	И РасходныйКассовыйОрдер.ВидОперации.Порядок = 2" ;
	
	
	Запрос.УстановитьПараметр("НачДата",Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",Период.ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		
		СтрокаТЧ = Объект.СписокДокументов.Добавить();
		СтрокаТч.НомерДок = Выборка.Номер;
		СтрокаТЧ.ДатаДок  = Выборка.Дата;
		СтрокаТЧ.Документа = "Расх. кас. ордер";
		СтрокаТЧ.Сумма     = Выборка.СуммаДокумента;
		СтрокаТЧ.ОснованиеРКО = Выборка.Основание;
		СтрокаТЧ.Приложение   = Выборка.Приложение;
		СтрокаТЧ.ПоДокументу  = Выборка.ПоДокументу;
		СтрокаТЧ.СтатьяДДС    = выборка.СтатьяДДс;
		СтрокаТЧ.Контрагент   = выборка.ФЛ;
		СтрокаТЧ.ПризнакПрихода = 58;
		СтрокаТЧ.Флаг           = истина;
		
	КонецЦикла;	
	
КонецПроцедуры	 

Процедура ЗагрузитьРКО(Кнопка)
	
	
	сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V82.Application");
	//Попытка 
	//	Открытие = V81.Connect("Srvr="""+"crm"+""";Ref="""+"db_acc16_2011"+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	//	
	//	// Открытие = V81.Connect("Srvr="""+"servant"+""";Ref="""+"tl_upp"+""";Usr="""+"Коновалова Мария Васильевна"+""";Pwd="""+"252118"+""";");
	//	//Открытие = V81.Connect("File="""+ИмяСервера+""";Usr="""+ИмяБазы+""";Pwd="""+Пароль+""";");
	//	
	//	
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	
	V81 = ПолучитьПодключениеКФайловойБД();
	Попытка
		Запрос8  = V81.NewObject("Запрос");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаполнитьРКО(Запрос8);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПКО(Кнопка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	//Фильтр = "Книга Excel (*.xls;*xlsx)|*.xls?";
	//ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл для загрузки";
	//
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;
		Файл = ПолучитьCOMОбъект(ПутьКФайлу);
		СтрокиЛиста = Файл.Sheets(1).UsedRange.Rows;
		Ном= 0; 
		Для Каждого СтрокаЛиста Из СтрокиЛиста Цикл   
			СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
			СтрокаСпискаДокументов.НомерДок = СтрокаЛиста.Cells(2).Value;
			СтрокаСпискаДокументов.ДатаДок  = СтрокаЛиста.Cells(3).Value;
			СтрокаСпискаДокументов.Документа = "Прих. кассовый ордер";
			СтрокаСпискаДокументов.Сумма         = СтрокаЛиста.Cells(12).Value;
			СтрокаСпискаДокументов.ППСубконтоКт1 = СтрокаЛиста.Cells(5).Value;
			СтрокаСпискаДокументов.ППСубконтоКт2 = СтрокаЛиста.Cells(6).Value;
			СтрокаСпискаДокументов.Приложение    = СтрокаЛиста.Cells(7).Value;
			СтрокаСпискаДокументов.ОснованиеРКО  = СтрокаЛиста.Cells(8).Value;
			СтрокаСпискаДокументов.ПринятоОт     = СтрокаЛиста.Cells(9).Value;
			СтрокаСпискаДокументов.ПризнакПрихода  = 88;
			СтрокаСпискаДокументов.НомерСчФактурыВх = СтрокаЛиста.Cells(3).Value;
		КонецЦикла;
	КонецЕсли;
	
	
	
	
	
	
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//ЭлементыФормы.Панель1.Страницы.Страница3.Видимость = ложь;
	//ЭлементыФормы.Панель1.Страницы.Страница1.Видимость = ложь;
	//ЭлементыФормы.Панель1.Страницы.Страница4.Видимость = ложь;
	//ЭлементыФормы.Панель1.Страницы.Страница5.Видимость = ложь;
	//ЭлементыФормы.Панель1.Страницы.Страница6.Видимость = ложь;
	//ЭлементыФормы.Панель1.Страницы.Страница7.Видимость = ложь;
	//ЭлементыФормы.Панель1.Страницы.Страница8.Видимость = ложь;
	
КонецПроцедуры

Процедура ЗагрузитьРеализацииСкладаМонтажа(Кнопка)
	
	Объект.Склад = справочники.Склады.НайтиПоКоду("000000003");
	
	Если Объект.СписокДокументов.Количество()>0 тогда
		Объект.СписокДокументов.Очистить();
	КонецЕсли;	
	
	Если Объект.СписокНоменклатуры.Количество()>0 тогда
		Объект.СписокНоменклатуры.Очистить();
	КонецЕсли;	
	
	Если Объект.СписокУслуг.Количество()>0 тогда
		Объект.СписокУслуг.Очистить();
	КонецЕсли;	
	
	//ПутьКБазе    = "C:\Documents and Settings\konovalova\Мои документы\InfoBase2";
	//ПутьКБазе    = "Y:\Управление торговлей(копия)\Accounting1";
	ПутьКБазе    = "X:\Управление торговлей(копия)\Accounting1";
	
	Пользователь = "админ";
	Пароль       = "252118";
	
	сообщить("начало подключения:"+ТекущаяДата());	
	//V81 = Новый COMОбъект("V82.Application");
	//Попытка 
	//	//Открытие = V81.Connect("Srvr="""+ИмяСервера+""";Ref="""+ИмяБазы+""";Usr="""+"Администратор"+""";Pwd="""+"252118"+""";");
	//	//Открытие = V81.Connect("File="""+ПутьКБазе+""";Usr="""+Пользователь+""";Pwd="""+Пароль+""";");
	//	Открытие = V81.Connect("Srvr="""+"RKKSERVERPC"+""";Ref="""+"UT"+""";Usr="""+"obmen_ne_trogaem"+""";Pwd="""+"252118"+""";");
	//	
	//Исключение
	//	Предупреждение("База данных не открыта!");
	//	возврат;
	//КонецПопытки;
	
	
	V81 = ПолучитьПодключениеКФайловойБД();
	Попытка
		Запрос8  = V81.NewObject("Запрос");
		Запрос8_ = V81.NewObject("Запрос");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Запрос8.Текст ="ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугТовары.Ссылка.Номер КАК Номер,
	|	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК Код,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.СтавкаНДС.Порядок КАК СтавкаНДС,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.Ссылка.Контрагент.Наименование КАК Контрагент,
	|	РеализацияТоваровУслугТовары.Ссылка.Контрагент.Код КАК КодКонтрагента,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Наименование КАК Единица,
	|	РеализацияТоваровУслугТовары.Ссылка.Контрагент.ИНН КАК ИНН,
	|	ВложенныйЗапрос.Ссылка КАК СчетФактураВыданный,
	|	ВложенныйЗапрос.Номер КАК НомерСчФ,
	|	ВложенныйЗапрос.Дата КАК ДатаСчФ,
	|	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.Код КАК ДоговорКод,
	|	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.Наименование КАК ДоговорНаименование,
	|	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВидДоговора.Порядок КАК ВидДоговора,
	|	РеализацияТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов.Код КАК ВалютаДоговора,
	|	РеализацияТоваровУслугТовары.Ссылка.Склад.Код КАК КодСклада,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.Комментарий КАК СТРОКА) КАК Комментарий,
	|	РеализацияТоваровУслугТовары.Ссылка.Сделка.Товар.Наименование КАК Комплект,
	|	РеализацияТоваровУслугТовары.Ссылка.Сделка.Товар.Код КАК КодКомплекта,
	|	РеализацияТоваровУслугТовары.Ссылка.Сделка.КолПродукции КАК КолКомплекта
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	|			СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование,
	|			СчетФактураВыданныйДокументыОснования.Ссылка.Номер КАК Номер,
	|			СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата
	|		ИЗ
	|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования) КАК ВложенныйЗапрос
	|		ПО РеализацияТоваровУслугТовары.Ссылка = ВложенныйЗапрос.ДокументОснование.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	|	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачДата И &КонДата
	|	И РеализацияТоваровУслугТовары.Ссылка.Склад.Код = &ОсновнойСклад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер";	
	
	Запрос8.УстановитьПараметр("НачДата",НачалоДня(Период.ДатаНачала));
	Запрос8.УстановитьПараметр("КонДата",КонецДня(Период.ДатаОкончания));
	Запрос8.УстановитьПараметр("ОсновнойСклад","000000002");
	
	Выборка = Запрос8.Выполнить().Выгрузить();
	
	Для каждого Стр из выборка цикл
		
		СтрокаСпискаДокументов = Объект.СписокДокументов.Добавить();
		СтрокаСпискаДокументов.ДатаДок  = Стр.Ссылка.дата;
		СтрокаСпискаДокументов.НомерДок = Стр.Ссылка.номер;
		СтрокаСпискаДокументов.Контрагент = Стр.Контрагент;
		СтрокаСпискаДокументов.КодКонтрагента = СокрЛП(Стр.КодКонтрагента);
		СтрокаСпискаДокументов.Сумма = Стр.Сумма;
		СтрокаСпискаДокументов.СуммаНДС = Стр.СуммаНДС;
		СтрокаСпискаДокументов.Документа = "Реализация";
		СтрокаСпискаДокументов.Флаг = истина;
		СтрокаСпискаДокументов.ПризнакПрихода = 33;
		СтрокаСпискаДокументов.инн = Стр.инн;
		СтрокаСпискаДокументов.НомерСчФактурыВх = Стр.НомерСчФ;
		СтрокаСпискаДокументов.ДатаСчФактурыВх  = Стр.ДатаСчФ;
		СтрокаСпискаДокументов.КодДоговора      = Стр.ДоговорКод;
		СтрокаСпискаДокументов.НаименованиеДоговора = Стр.ДоговорНаименование;
		СтрокаСпискаДокументов.ТипДоговора          = Стр.ВидДоговора;
		СтрокаСпискаДокументов.ВалютаДоговора       = справочники.Валюты.НайтиПоКоду("643");
		СтрокаСпискаДокументов.КодСклада            = Стр.КодСклада;
		СтрокаСпискаДокументов.Комментарий          = Стр.Комментарий;
		СтрокаСпискаДокументов.Номенклатура         = Стр.Комплект;
		СтрокаСпискаДокументов.КодНоменклатуры      = Стр.КодКомплекта;
		СтрокаСпискаДокументов.КолКомплекта         = стр.КолКомплекта;
		Если ЗначениеЗаполнено(стр.ИНН) тогда
			ТекКонтрагент = ПоискКонтрагентаПоИНН(стр.ИНН);
		Иначе
			ТекКонтрагент = справочники.Контрагенты.НайтиПоКоду("000000304");
		КонецЕсли;
		СтрокаСпискаДокументов.КонтрагентСсылка = ТекКонтрагент;
		СтрокаСпискаДокументов.ДоговорСсылка    = СтрокаСпискаДокументов.КонтрагентСсылка.ОсновнойДоговорКонтрагента;
		
		СтрокаСпискаНоменклатуры               = Объект.СписокНоменклатуры.Добавить();
		СтрокаСпискаНоменклатуры._ДатаДок      = Стр.Ссылка.дата;
		СтрокаСпискаНоменклатуры._КодНом       = Стр.Код;
		СтрокаСпискаНоменклатуры._Номенклатура = Стр.Номенклатура.Наименование;
		СтрокаСпискаНоменклатуры._НомерДок     = Стр.ссылка.Номер;
		СтрокаСпискаНоменклатуры._Сумма        = Стр.Сумма;
		СтрокаСпискаНоменклатуры._СуммаНДС     = Стр.СуммаНДС;
		СтрокаСпискаНоменклатуры._Цена         = Стр.Цена;
		СтрокаСпискаНоменклатуры._Количество   = Стр.Количество;
		СтрокаСпискаНоменклатуры._Артикул      = Стр.Артикул;
		СтрокаСпискаНоменклатуры._Единица      = Стр.Единица;
		СтрокаСпискаНоменклатуры._СтавкаНДС    = Стр.СтавкаНДС;
	КонецЦикла;
	
	//РеализацияУслуг(Запрос8_,"000000002",33);
	РеализацияУслуг(Запрос8_,"000000002",33,"000000007","Натяжной потолок в гарпуне");	
	Объект.СписокДокументов.Свернуть("ДатаДок,НомерДок,Контрагент,Документа,Флаг,ПризнакПрихода,ВидВозврата,КодКонтрагента,ИНН,НомерСчФактурыВх,ДатаСчФактурыВх,КодДоговора,НаименованиеДоговора,ТипДоговора,ВалютаДоговора,КодСклада,Комментарий,СуммаВключаетНДС,УчитыватьНДС,Страна,НомерГТД,Номенклатура,КодНоменклатуры,КонтрагентСсылка,ДоговорСсылка,КолКомплекта","Сумма,СуммаНДС");
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Период.ДатаНачала 		= '20170201';
	Период.ДатаОкончания	= '20170221';
КонецПроцедуры
















